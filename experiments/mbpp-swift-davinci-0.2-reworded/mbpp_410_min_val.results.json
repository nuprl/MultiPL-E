{
  "name": "mbpp_410_min_val",
  "language": "swift",
  "prompt": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                min = min < intval ? min : intval\n            }\n        case let .failure(value):\n            min = min < value ? min : value\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val < min_val {\n                    min_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val < min_val {\n                min_val = int_val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let num):\n            if num < min {\n                min = num\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) { (result, value) -> Int in\n        switch value {\n        case .success(let val):\n            return min(result, Int(val)!)\n        case .failure(let val):\n            return min(result, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "tmpr1fhgycf/tmpr1fhgycf.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c515b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c512ac561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6c512ac286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6c512ac13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6c512abbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpr1fhgycf                        0x00005639e1627e72 <unavailable> + 7794\n6    libswiftCore.so                    0x00002b6c513bb410 Sequence.reduce<A>(_:_:) + 530\n7    tmpr1fhgycf                        0x00005639e1627c7d <unavailable> + 7293\n8    tmpr1fhgycf                        0x00005639e16278bc <unavailable> + 6332\n9    libc.so.6                          0x00002b6c517a1460 __libc_start_main + 245\n10   tmpr1fhgycf                        0x00005639e16274f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                minval = min(minval, intval)\n            }\n        case .failure(let val):\n            minval = min(minval, val)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    let min = listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val)!\n        case .failure(let val):\n            return val\n        }\n    }.min()!\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "tmpkfi1e3al/tmpkfi1e3al.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b902f5d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b902f2cb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b902f2cb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b902f2cb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b902f2cabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpkfi1e3al                        0x0000558ed7668f23 <unavailable> + 7971\n6    libswiftCore.so                    0x00002b902f2b3820 Collection.map<A>(_:) + 426\n7    tmpkfi1e3al                        0x0000558ed7668cb2 <unavailable> + 7346\n8    tmpkfi1e3al                        0x0000558ed76688fc <unavailable> + 6396\n9    libc.so.6                          0x00002b902f7c0460 __libc_start_main + 245\n10   tmpkfi1e3al                        0x0000558ed7668539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                min_val = min(min_val, int_val)\n            }\n        case .failure(let int_val):\n            min_val = min(min_val, int_val)\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let error):\n            if error < min {\n                min = error\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval: Int = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                min = min < intval ? min : intval\n            }\n        case .failure(let intval):\n            min = min < intval ? min : intval\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal < min {\n                    min = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal < min {\n                min = intVal\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    let min = listval.reduce(Int.max) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return min(acc, Int(str)!)\n        case .failure(let int):\n            return min(acc, int)\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5uilf3iv.swift:9:20: error: cannot call value of non-function type 'Int'\n            return min(acc, Int(str)!)\n                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = 0\n    for i in listval {\n        switch i {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let err):\n            if err < minval {\n                minval = err\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmplqoacxor/tmplqoacxor.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac51e9aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac51e6a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac51e6a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac51e6a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqoacxor                        0x000056542415290a <unavailable> + 6410\n5    libc.so.6                          0x00002ac51eb96460 __libc_start_main + 245\n6    tmplqoacxor                        0x00005654241524c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intValue = Int(value) {\n                if intValue < min {\n                    min = intValue\n                }\n            }\n        case .failure(let error):\n            if error < min {\n                min = error\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                minval = min(minval, intval)\n            }\n        case .failure(let val):\n            minval = min(minval, val)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let value):\n            let intval = Int(value)\n            if intval < min {\n                min = intval\n            }\n        case .failure(let error):\n            if error < min {\n                min = error\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpmtdnzf1n.swift:11:16: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if intval < min {\n               ^\n/tmp/tmpmtdnzf1n.swift:11:16: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if intval < min {\n               ^\n                      ?? <#default value#>\n/tmp/tmpmtdnzf1n.swift:11:16: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if intval < min {\n               ^\n                     !\n/tmp/tmpmtdnzf1n.swift:12:23: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n                min = intval\n                      ^\n/tmp/tmpmtdnzf1n.swift:12:23: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n                min = intval\n                      ^\n                             ?? <#default value#>\n/tmp/tmpmtdnzf1n.swift:12:23: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n                min = intval\n                      ^\n                            !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            min = min < Int(val) ?? Int.max ? min : Int(val) ?? Int.max\n        case .failure(let val):\n            min = min < val ? min : val\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return min(acc, Int(str)!)\n        case .failure(let int):\n            return min(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpe5dtbsbj/tmpe5dtbsbj.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b908c1aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b908bea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b908bea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b908bea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b908bea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpe5dtbsbj                        0x000055daf975fe72 <unavailable> + 7794\n6    libswiftCore.so                    0x00002b908bfb0410 Sequence.reduce<A>(_:_:) + 530\n7    tmpe5dtbsbj                        0x000055daf975fc7d <unavailable> + 7293\n8    tmpe5dtbsbj                        0x000055daf975f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b908c396460 __libc_start_main + 245\n10   tmpe5dtbsbj                        0x000055daf975f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .Success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .Failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmppwc6gws4.swift:9:15: error: type 'Result<String, Int>' has no member 'Success'\n        case .Success(let str):\n             ~^~~~~~~\n/tmp/tmppwc6gws4.swift:15:15: error: type 'Result<String, Int>' has no member 'Failure'\n        case .Failure(let intval):\n             ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    let min_val = listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val) ?? 0\n        case .failure(let val):\n            return val\n        }\n    }\n    return min_val.min() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmples57fno/tmples57fno.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abe46218c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abe45f0fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abe45f0f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abe45f0e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmples57fno                        0x0000564a33f008ea <unavailable> + 6378\n5    libc.so.6                          0x00002abe46404460 __libc_start_main + 245\n6    tmples57fno                        0x0000564a33f004a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal < min {\n                    min = intVal\n                }\n            }\n        case .failure(let error):\n            if error < min {\n                min = error\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return min(acc, Int(str)!)\n        case .failure(let int):\n            return min(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpe5dtbsbj/tmpe5dtbsbj.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b908c1aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b908bea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b908bea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b908bea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b908bea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpe5dtbsbj                        0x000055daf975fe72 <unavailable> + 7794\n6    libswiftCore.so                    0x00002b908bfb0410 Sequence.reduce<A>(_:_:) + 530\n7    tmpe5dtbsbj                        0x000055daf975fc7d <unavailable> + 7293\n8    tmpe5dtbsbj                        0x000055daf975f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b908c396460 __libc_start_main + 245\n10   tmpe5dtbsbj                        0x000055daf975f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            minval = min(minval, Int(val)!)\n        case .failure(let val):\n            minval = min(minval, val)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpnecb60lk/tmpnecb60lk.swift:10: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b096c9acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b096c6a3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b096c6a3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b096c6a313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b096c6a2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnecb60lk                        0x000056056ca3bfd1 <unavailable> + 8145\n6    tmpnecb60lk                        0x000056056ca3b9ac <unavailable> + 6572\n7    libc.so.6                          0x00002b096cb98460 __libc_start_main + 245\n8    tmpnecb60lk                        0x000056056ca3b5e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val < min {\n                    min = val\n                }\n            }\n        case .failure(let error):\n            if error < min {\n                min = error\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                min_val = min(min_val, int_val)\n            }\n        case .failure(let val):\n            min_val = min(min_val, val)\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case let .success(s):\n            if let i = Int(s) {\n                if i < min {\n                    min = i\n                }\n            }\n        case let .failure(f):\n            if f < min {\n                min = f\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val < min_val {\n                    min_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val < min_val {\n                min_val = val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i < min {\n                    min = i\n                }\n            }\n        case .failure(let i):\n            if i < min {\n                min = i\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            guard let intval = Int(strval) else {\n                continue\n            }\n            if intval < minval {\n                minval = intval\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val < min_val {\n                    min_val = val\n                }\n            }\n        case .failure(let val):\n            if val < min_val {\n                min_val = val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for value in listval {\n        switch value {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let val):\n            let intval = Int(val)\n            if intval < min {\n                min = intval\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "/tmp/tmpdkbev2s1.swift:11:16: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if intval < min {\n               ^\n/tmp/tmpdkbev2s1.swift:11:16: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if intval < min {\n               ^\n                      ?? <#default value#>\n/tmp/tmpdkbev2s1.swift:11:16: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if intval < min {\n               ^\n                     !\n/tmp/tmpdkbev2s1.swift:12:23: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n                min = intval\n                      ^\n/tmp/tmpdkbev2s1.swift:12:23: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n                min = intval\n                      ^\n                             ?? <#default value#>\n/tmp/tmpdkbev2s1.swift:12:23: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n                min = intval\n                      ^\n                            !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                min = min < intval ? min : intval\n            }\n        case .failure(let intval):\n            min = min < intval ? min : intval\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            let intval = Int(strval) ?? 0\n            if intval < minval {\n                minval = intval\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpfksxwt9b/tmpfksxwt9b.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b95cfbe4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b95cf8dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b95cf8db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b95cf8da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfksxwt9b                        0x000055d963e7690a <unavailable> + 6410\n5    libc.so.6                          0x00002b95cfdd0460 __libc_start_main + 245\n6    tmpfksxwt9b                        0x000055d963e764c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val < min_val {\n                    min_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val < min_val {\n                min_val = int_val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            let intval = Int(val) ?? 0\n            if intval < minval {\n                minval = intval\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpqs88mdtm/tmpqs88mdtm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbc784ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbc7541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abbc7541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abbc75407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqs88mdtm                        0x00005623736b090a <unavailable> + 6410\n5    libc.so.6                          0x00002abbc7a36460 __libc_start_main + 245\n6    tmpqs88mdtm                        0x00005623736b04c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            let intval = Int(strval) ?? 0\n            if intval < minval {\n                minval = intval\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpfksxwt9b/tmpfksxwt9b.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b95cfbe4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b95cf8dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b95cf8db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b95cf8da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfksxwt9b                        0x000055d963e7690a <unavailable> + 6410\n5    libc.so.6                          0x00002b95cfdd0460 __libc_start_main + 245\n6    tmpfksxwt9b                        0x000055d963e764c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                min = min < intval ? min : intval\n            }\n        case .failure(let intval):\n            min = min < intval ? min : intval\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let err):\n            if err < minval {\n                minval = err\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                min = min < intval ? min : intval\n            }\n        case .failure(let val):\n            min = min < val ? min : val\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return min(acc, Int(str) ?? Int.max)\n        case .failure(let int):\n            return min(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let err):\n            if err < min {\n                min = err\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                minval = min(minval, intval)\n            }\n        case .failure(let intval):\n            minval = min(minval, intval)\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                min_val = min(min_val, int_val)\n            }\n        case .failure(let int_val):\n            min_val = min(min_val, int_val)\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal < min {\n                    min = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal < min {\n                min = intVal\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let val):\n            if val < min {\n                min = val\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val < minval {\n                    minval = val\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val < min_val {\n                    min_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val < min_val {\n                min_val = int_val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return min(acc, Int(str) ?? Int.max)\n        case .failure(let int):\n            return min(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case let .success(strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.max) {\n        switch $1 {\n        case .success(let str):\n            return min($0, Int(str)!)\n        case .failure(let int):\n            return min($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmp9ao7u23z/tmp9ao7u23z.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af863769c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af863460561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af863460286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af86346013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af86345fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp9ao7u23z                        0x0000561abc23fe72 <unavailable> + 7794\n6    libswiftCore.so                    0x00002af86356f410 Sequence.reduce<A>(_:_:) + 530\n7    tmp9ao7u23z                        0x0000561abc23fc7d <unavailable> + 7293\n8    tmp9ao7u23z                        0x0000561abc23f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002af863955460 __libc_start_main + 245\n10   tmp9ao7u23z                        0x0000561abc23f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min: Int = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                min = min < val ? min : val\n            }\n        case .failure(let val):\n            min = min < val ? min : val\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case let .success(strval):\n            if let intval = Int(strval) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let intval = Int(str) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval < minval {\n                minval = intval\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var minval = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval < minval {\n                    minval = intval\n                }\n            }\n        case .failure(let val):\n            if val < minval {\n                minval = val\n            }\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min_val = Int.max\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val < min_val {\n                    min_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val < min_val {\n                min_val = val\n            }\n        }\n    }\n    return min_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let val = Int(val) {\n                min = min < val ? min : val\n            }\n        case .failure(let val):\n            min = min < val ? min : val\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min: Int = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num < min {\n                    min = num\n                }\n            }\n        case .failure(let num):\n            if num < min {\n                min = num\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                min = min < int ? min : int\n            }\n        case .failure(let int):\n            min = min < int ? min : int\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                min = min < intval ? min : intval\n            }\n        case .failure(let intval):\n            min = min < intval ? min : intval\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int < min {\n                    min = int\n                }\n            }\n        case .failure(let int):\n            if int < min {\n                min = int\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i < min {\n                    min = i\n                }\n            }\n        case .failure(let f):\n            if f < min {\n                min = f\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the minimum value in a given heterogeneous array.\nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    var min = Int.max\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval < min {\n                    min = intval\n                }\n            }\n        case .failure(let intval):\n            if intval < min {\n                min = intval\n            }\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)\nassert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)\nassert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)",
      "timestamp": 1665510070,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}