{
  "name": "mbpp_801_test_three_equal",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpb5rx3jtl/tmpb5rx3jtl.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dba6d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dba3c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dba3c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dba3c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5rx3jtl                        0x000055ce530c51bb <unavailable> + 4539\n5    libc.so.6                          0x00002b4dba8bd460 __libc_start_main + 245\n6    tmpb5rx3jtl                        0x000055ce530c4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpb5rx3jtl/tmpb5rx3jtl.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dba6d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dba3c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dba3c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dba3c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5rx3jtl                        0x000055ce530c51bb <unavailable> + 4539\n5    libc.so.6                          0x00002b4dba8bd460 __libc_start_main + 245\n6    tmpb5rx3jtl                        0x000055ce530c4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpb5rx3jtl/tmpb5rx3jtl.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dba6d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dba3c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dba3c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dba3c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5rx3jtl                        0x000055ce530c51bb <unavailable> + 4539\n5    libc.so.6                          0x00002b4dba8bd460 __libc_start_main + 245\n6    tmpb5rx3jtl                        0x000055ce530c4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpb5rx3jtl/tmpb5rx3jtl.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dba6d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dba3c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dba3c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dba3c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5rx3jtl                        0x000055ce530c51bb <unavailable> + 4539\n5    libc.so.6                          0x00002b4dba8bd460 __libc_start_main + 245\n6    tmpb5rx3jtl                        0x000055ce530c4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "tmpb5rx3jtl/tmpb5rx3jtl.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dba6d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dba3c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dba3c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dba3c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5rx3jtl                        0x000055ce530c51bb <unavailable> + 4539\n5    libc.so.6                          0x00002b4dba8bd460 __libc_start_main + 245\n6    tmpb5rx3jtl                        0x000055ce530c4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && x == z {\n        return 3\n    } else if x == y || x == z || y == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1666123430,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || z == x {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmph5sbtywl/tmph5sbtywl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc7450c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc7147b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc7147988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc71467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph5sbtywl                        0x000055f5694092d1 <unavailable> + 4817\n5    libc.so.6                          0x00002acdc763c460 __libc_start_main + 245\n6    tmph5sbtywl                        0x000055f569408e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if x == z {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmp7ussayi3/tmp7ussayi3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac71c62ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac71c321b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac71c321988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac71c3207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ussayi3                        0x00005595112ac2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002ac71c816460 __libc_start_main + 245\n6    tmp7ussayi3                        0x00005595112abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    var count = 0\n    if x == y {\n        count += 1\n    }\n    if y == z {\n        count += 1\n    }\n    if z == x {\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "tmpu6csmhjn/tmpu6csmhjn.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b193d3f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b193d0f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b193d0f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b193d0ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6csmhjn                        0x00005600db29a2d1 <unavailable> + 4817\n5    libc.so.6                          0x00002b193d5e5460 __libc_start_main + 245\n6    tmpu6csmhjn                        0x00005600db299e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    }\n    if x == y || y == z || x == z {\n        return 2\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(test_three_equal(x: 1, y: 1, z: 1) == 3)\nassert(test_three_equal(x: -1, y: -2, z: -3) == 0)\nassert(test_three_equal(x: 1, y: 2, z: 2) == 2)",
      "timestamp": 1665517469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}