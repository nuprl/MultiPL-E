{
  "name": "mbpp_80_tetrahedral_number",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return n * (n + 1) * (n + 2) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n: Int) -> Int {\n    return (n * (n + 1) * (n + 2)) / 6\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(tetrahedral_number(n: 5) == 35)\nassert(tetrahedral_number(n: 6) == 56)\nassert(tetrahedral_number(n: 7) == 84)",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}