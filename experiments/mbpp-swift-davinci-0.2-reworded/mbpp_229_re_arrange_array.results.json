{
  "name": "mbpp_229_re_arrange_array",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmphiqdelor/tmphiqdelor.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a62cf3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a629eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a629ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a629e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphiqdelor                        0x00005613e29a6721 <unavailable> + 5921\n5    libc.so.6                          0x00002b5a62edf460 __libc_start_main + 245\n6    tmphiqdelor                        0x00005613e29a62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result = neg + pos\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpdbwbn4ku/tmpdbwbn4ku.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad691fa3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad691c9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad691c9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad691c997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbwbn4ku                        0x000055e4a76f0721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad69218f460 __libc_start_main + 245\n6    tmpdbwbn4ku                        0x000055e4a76f02b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpl9jaodbx/tmpl9jaodbx.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54ebdd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54ebad0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54ebad0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54ebacf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9jaodbx                        0x000055b1dd4c2531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54ebfc5460 __libc_start_main + 245\n6    tmpl9jaodbx                        0x000055b1dd4c20c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var new_arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < n && new_arr[i] < 0 {\n            i += 1\n        }\n        while j >= 0 && new_arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = new_arr[i]\n            new_arr[i] = new_arr[j]\n            new_arr[j] = temp\n        }\n    }\n    return new_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpvt48km4w/tmpvt48km4w.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15a0226c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b159ff1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b159ff1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b159ff1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvt48km4w                        0x0000559b4f1b84e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b15a0412460 __libc_start_main + 245\n6    tmpvt48km4w                        0x0000559b4f1b8079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp4398ksxm/tmp4398ksxm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fc9f09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fc9c00b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fc9c00988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fc9bff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4398ksxm                        0x00005601c16134e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b7fca0f5460 __libc_start_main + 245\n6    tmp4398ksxm                        0x00005601c1613079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpxf7r1yrs/tmpxf7r1yrs.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5e35b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5e32abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5e32ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5e32aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxf7r1yrs                        0x00005610bd179531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad5e37a0460 __libc_start_main + 245\n6    tmpxf7r1yrs                        0x00005610bd1790c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] >= 0 {\n            positive.append(arr[i])\n        } else {\n            negative.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmplp2j3r1n/tmplp2j3r1n.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff85269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff84f60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff84f60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff84f5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplp2j3r1n                        0x000055dc274e4721 <unavailable> + 5921\n5    libc.so.6                          0x00002aff85455460 __libc_start_main + 245\n6    tmplp2j3r1n                        0x000055dc274e42b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = n - 1\n    while i < n && j >= 0 {\n        if arr[i] < 0 {\n            result.append(arr[i])\n            i += 1\n        } else {\n            result.append(arr[j])\n            j -= 1\n        }\n    }\n    while i < n {\n        result.append(arr[i])\n        i += 1\n    }\n    while j >= 0 {\n        result.append(arr[j])\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpx4jprj79/tmpx4jprj79.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbb028fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbaff86b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbaff86988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbaff857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx4jprj79                        0x000055b45edbc541 <unavailable> + 5441\n5    libc.so.6                          0x00002adbb047b460 __libc_start_main + 245\n6    tmpx4jprj79                        0x000055b45edbc0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpwrkjk_j1/tmpwrkjk_j1.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81a9031c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81a8d28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81a8d28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81a8d277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwrkjk_j1                        0x000056130d654531 <unavailable> + 5425\n5    libc.so.6                          0x00002b81a921d460 __libc_start_main + 245\n6    tmpwrkjk_j1                        0x000056130d6540c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < n && arr[i] < 0 {\n            i += 1\n        }\n        while j >= 0 && arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp6s2d9tz8/tmp6s2d9tz8.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab025894c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab02558bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab02558b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab02558a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6s2d9tz8                        0x000055d4248be4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ab025a80460 __libc_start_main + 245\n6    tmp6s2d9tz8                        0x000055d4248be079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negatives = [Int]()\n    var positives = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negatives.append(arr[i])\n        } else {\n            positives.append(arr[i])\n        }\n    }\n    result = negatives + positives\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpcngth5if/tmpcngth5if.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b080b56dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b080b264b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b080b264988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b080b2637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcngth5if                        0x00005651e2566721 <unavailable> + 5921\n5    libc.so.6                          0x00002b080b759460 __libc_start_main + 245\n6    tmpcngth5if                        0x00005651e25662b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpr4u5s45f/tmpr4u5s45f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b98a02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b986f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b986f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b986f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr4u5s45f                        0x00005577bb5e7531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4b98bee460 __libc_start_main + 245\n6    tmpr4u5s45f                        0x00005577bb5e70c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result = neg + pos\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpdbwbn4ku/tmpdbwbn4ku.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad691fa3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad691c9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad691c9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad691c997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbwbn4ku                        0x000055e4a76f0721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad69218f460 __libc_start_main + 245\n6    tmpdbwbn4ku                        0x000055e4a76f02b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpswp4z04r/tmpswp4z04r.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b06a3685c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b06a337cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b06a337c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06a337b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpswp4z04r                        0x000055cf3de6c4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b06a3871460 __libc_start_main + 245\n6    tmpswp4z04r                        0x000055cf3de6c079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmprv3zsbgz/tmprv3zsbgz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31674d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31671cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31671cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31671ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprv3zsbgz                        0x0000557d732f94e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b31676c4460 __libc_start_main + 245\n6    tmprv3zsbgz                        0x0000557d732f9079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmphiqdelor/tmphiqdelor.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a62cf3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a629eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a629ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a629e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphiqdelor                        0x00005613e29a6721 <unavailable> + 5921\n5    libc.so.6                          0x00002b5a62edf460 __libc_start_main + 245\n6    tmphiqdelor                        0x00005613e29a62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkr98k_gn/tmpkr98k_gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12f118dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12f0e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12f0e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12f0e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkr98k_gn                        0x00005603a0c19531 <unavailable> + 5425\n5    libc.so.6                          0x00002b12f1379460 __libc_start_main + 245\n6    tmpkr98k_gn                        0x00005603a0c190c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpk4qczd59/tmpk4qczd59.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ce0236c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1cdff2db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1cdff2d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1cdff2c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk4qczd59                        0x000055d5acc14531 <unavailable> + 5425\n5    libc.so.6                          0x00002b1ce0422460 __libc_start_main + 245\n6    tmpk4qczd59                        0x000055d5acc140c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result.append(contentsOf: neg)\n    result.append(contentsOf: pos)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpnqk7x3pl/tmpnqk7x3pl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22b896dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22b8664b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22b8664988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22b86637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqk7x3pl                        0x00005589f31f6741 <unavailable> + 5953\n5    libc.so.6                          0x00002b22b8b59460 __libc_start_main + 245\n6    tmpnqk7x3pl                        0x00005589f31f62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else {\n            result.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpi1gbvbz7/tmpi1gbvbz7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84e3989c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84e3680b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84e3680988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84e367f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi1gbvbz7                        0x0000561409ed0531 <unavailable> + 5425\n5    libc.so.6                          0x00002b84e3b75460 __libc_start_main + 245\n6    tmpi1gbvbz7                        0x0000561409ed00c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = n - 1\n    while i < n && j >= 0 {\n        if arr[i] < 0 {\n            result.append(arr[i])\n            i += 1\n        } else {\n            result.append(arr[j])\n            j -= 1\n        }\n    }\n    while i < n {\n        result.append(arr[i])\n        i += 1\n    }\n    while j >= 0 {\n        result.append(arr[j])\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpx4jprj79/tmpx4jprj79.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbb028fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbaff86b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbaff86988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbaff857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx4jprj79                        0x000055b45edbc541 <unavailable> + 5441\n5    libc.so.6                          0x00002adbb047b460 __libc_start_main + 245\n6    tmpx4jprj79                        0x000055b45edbc0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpqltx_ue9/tmpqltx_ue9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad279a15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad27970cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad27970c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad27970b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqltx_ue9                        0x0000564c88c23531 <unavailable> + 5425\n5    libc.so.6                          0x00002ad279c01460 __libc_start_main + 245\n6    tmpqltx_ue9                        0x0000564c88c230c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpr4u5s45f/tmpr4u5s45f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4b98a02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4b986f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4b986f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4b986f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr4u5s45f                        0x00005577bb5e7531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4b98bee460 __libc_start_main + 245\n6    tmpr4u5s45f                        0x00005577bb5e70c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result = neg + pos\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpdbwbn4ku/tmpdbwbn4ku.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad691fa3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad691c9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad691c9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad691c997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbwbn4ku                        0x000055e4a76f0721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad69218f460 __libc_start_main + 245\n6    tmpdbwbn4ku                        0x000055e4a76f02b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = result[i]\n            result[i] = result[j]\n            result[j] = temp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp245peqsy/tmp245peqsy.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1b22a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1b1f9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1b1f9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1b1f997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp245peqsy                        0x0000557b1f3884e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ab1b248f460 __libc_start_main + 245\n6    tmp245peqsy                        0x0000557b1f388079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpugcw3qy1/tmpugcw3qy1.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b59d7912c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b59d7609b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b59d7609988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59d76087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpugcw3qy1                        0x0000559fc43774e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b59d7afe460 __libc_start_main + 245\n6    tmpugcw3qy1                        0x0000559fc4377079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvgxw27mt/tmpvgxw27mt.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e23550c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e23247b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e23247988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e232467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgxw27mt                        0x0000564a129cb531 <unavailable> + 5425\n5    libc.so.6                          0x00002b2e2373c460 __libc_start_main + 245\n6    tmpvgxw27mt                        0x0000564a129cb0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp_geqy7dp/tmp_geqy7dp.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4bc178cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4bc1483b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4bc1483988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4bc14827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_geqy7dp                        0x000055aefe780531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4bc1978460 __libc_start_main + 245\n6    tmp_geqy7dp                        0x000055aefe7800c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < n && arr[i] < 0 {\n            i += 1\n        }\n        while j >= 0 && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpq9veaphl/tmpq9veaphl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b371c679c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b371c370b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b371c370988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b371c36f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq9veaphl                        0x00005624e655c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b371c865460 __libc_start_main + 245\n6    tmpq9veaphl                        0x00005624e655c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmphiqdelor/tmphiqdelor.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a62cf3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a629eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a629ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a629e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphiqdelor                        0x00005613e29a6721 <unavailable> + 5921\n5    libc.so.6                          0x00002b5a62edf460 __libc_start_main + 245\n6    tmphiqdelor                        0x00005613e29a62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkr98k_gn/tmpkr98k_gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12f118dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12f0e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12f0e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12f0e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkr98k_gn                        0x00005603a0c19531 <unavailable> + 5425\n5    libc.so.6                          0x00002b12f1379460 __libc_start_main + 245\n6    tmpkr98k_gn                        0x00005603a0c190c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmphiqdelor/tmphiqdelor.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a62cf3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a629eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a629ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a629e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphiqdelor                        0x00005613e29a6721 <unavailable> + 5921\n5    libc.so.6                          0x00002b5a62edf460 __libc_start_main + 245\n6    tmphiqdelor                        0x00005613e29a62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < n && arr[i] < 0 {\n            i += 1\n        }\n        while j >= 0 && arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpmgb2dwjq/tmpmgb2dwjq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a62245c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a61f3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a61f3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a61f3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmgb2dwjq                        0x000055755895e531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4a62431460 __libc_start_main + 245\n6    tmpmgb2dwjq                        0x000055755895e0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvtyyftf1/tmpvtyyftf1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b048a2c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0489fbcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0489fbc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0489fbb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvtyyftf1                        0x0000562ffbd1f4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b048a4b1460 __libc_start_main + 245\n6    tmpvtyyftf1                        0x0000562ffbd1f079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = -1\n    for j in 0..<n {\n        if arr[j] < 0 {\n            i += 1\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvtyyftf1/tmpvtyyftf1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b048a2c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0489fbcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0489fbc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0489fbb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvtyyftf1                        0x0000562ffbd1f4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b048a4b1460 __libc_start_main + 245\n6    tmpvtyyftf1                        0x0000562ffbd1f079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpvtyyftf1/tmpvtyyftf1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b048a2c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0489fbcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0489fbc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0489fbb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvtyyftf1                        0x0000562ffbd1f4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b048a4b1460 __libc_start_main + 245\n6    tmpvtyyftf1                        0x0000562ffbd1f079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else {\n            result.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpi1gbvbz7/tmpi1gbvbz7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84e3989c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84e3680b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84e3680988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84e367f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi1gbvbz7                        0x0000561409ed0531 <unavailable> + 5425\n5    libc.so.6                          0x00002b84e3b75460 __libc_start_main + 245\n6    tmpi1gbvbz7                        0x0000561409ed00c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    var negative: [Int] = []\n    var positive: [Int] = []\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp896_mze0/tmp896_mze0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3605499c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3605190b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3605190988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b360518f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp896_mze0                        0x0000560bb5ac16f1 <unavailable> + 5873\n5    libc.so.6                          0x00002b3605685460 __libc_start_main + 245\n6    tmp896_mze0                        0x0000560bb5ac1289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var new_arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && new_arr[i] < 0 {\n            i += 1\n        }\n        while i < j && new_arr[j] >= 0 {\n            j -= 1\n        }\n        new_arr.swapAt(i, j)\n    }\n    return new_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp6m1riol5/tmp6m1riol5.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e33f01c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e33bf8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e33bf8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e33bf77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6m1riol5                        0x00005629f1fc1531 <unavailable> + 5425\n5    libc.so.6                          0x00002b2e340ed460 __libc_start_main + 245\n6    tmp6m1riol5                        0x00005629f1fc10c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "/tmp/tmpub_2oef_.swift:15:16: error: cannot assign through subscript: 'arr' is a 'let' constant\n            arr[i] = arr[j]\n            ~~~^\n/tmp/tmpub_2oef_.swift:16:16: error: cannot assign through subscript: 'arr' is a 'let' constant\n            arr[j] = temp\n            ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result.append(contentsOf: neg)\n    result.append(contentsOf: pos)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpnqk7x3pl/tmpnqk7x3pl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b22b896dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b22b8664b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b22b8664988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22b86637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqk7x3pl                        0x00005589f31f6741 <unavailable> + 5953\n5    libc.so.6                          0x00002b22b8b59460 __libc_start_main + 245\n6    tmpnqk7x3pl                        0x00005589f31f62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            result.append(arr[i])\n        }\n    }\n    for i in 0..<n {\n        if arr[i] >= 0 {\n            result.append(arr[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpp_ype4af/tmpp_ype4af.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32ac4e2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32ac1d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32ac1d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32ac1d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp_ype4af                        0x0000556c2d2196c1 <unavailable> + 5825\n5    libc.so.6                          0x00002b32ac6ce460 __libc_start_main + 245\n6    tmpp_ype4af                        0x0000556c2d219259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmprv3zsbgz/tmprv3zsbgz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31674d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31671cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31671cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31671ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprv3zsbgz                        0x0000557d732f94e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b31676c4460 __libc_start_main + 245\n6    tmprv3zsbgz                        0x0000557d732f9079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpl7qjf_9n/tmpl7qjf_9n.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad90b79ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad90b491b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad90b491988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad90b4907b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl7qjf_9n                        0x00005645f74c1721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad90b986460 __libc_start_main + 245\n6    tmpl7qjf_9n                        0x00005645f74c12b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpl9jaodbx/tmpl9jaodbx.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54ebdd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54ebad0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54ebad0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54ebacf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9jaodbx                        0x000055b1dd4c2531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54ebfc5460 __libc_start_main + 245\n6    tmpl9jaodbx                        0x000055b1dd4c20c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && arr[i] < 0 {\n            i += 1\n        }\n        while i < j && arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp_geqy7dp/tmp_geqy7dp.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4bc178cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4bc1483b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4bc1483988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4bc14827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_geqy7dp                        0x000055aefe780531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4bc1978460 __libc_start_main + 245\n6    tmp_geqy7dp                        0x000055aefe7800c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var newArr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        if newArr[i] < 0 {\n            i += 1\n        } else if newArr[j] > 0 {\n            j -= 1\n        } else {\n            newArr.swapAt(i, j)\n        }\n    }\n    \n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp614bs3u6/tmp614bs3u6.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f37a64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f3775bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f3775b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f3775a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp614bs3u6                        0x000055ea718e1531 <unavailable> + 5425\n5    libc.so.6                          0x00002b0f37c50460 __libc_start_main + 245\n6    tmp614bs3u6                        0x000055ea718e10c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpdb_bxnqm/tmpdb_bxnqm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad1e2788c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad1e247fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad1e247f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1e247e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdb_bxnqm                        0x000056288bbd14e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ad1e2974460 __libc_start_main + 245\n6    tmpdb_bxnqm                        0x000056288bbd1079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && result[i] < 0 {\n            i += 1\n        }\n        while i < j && result[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            result.swapAt(i, j)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpl9jaodbx/tmpl9jaodbx.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54ebdd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54ebad0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54ebad0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54ebacf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9jaodbx                        0x000055b1dd4c2531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54ebfc5460 __libc_start_main + 245\n6    tmpl9jaodbx                        0x000055b1dd4c20c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] >= 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpw_x3zg8x/tmpw_x3zg8x.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b54e62fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b54e5ff4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b54e5ff4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b54e5ff37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw_x3zg8x                        0x000056316019c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b54e64e9460 __libc_start_main + 245\n6    tmpw_x3zg8x                        0x000056316019c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    var positive: [Int] = []\n    var negative: [Int] = []\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpsiq2l4zl/tmpsiq2l4zl.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad114f59c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad114c50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad114c50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad114c4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsiq2l4zl                        0x000055bbb4b2e6d1 <unavailable> + 5841\n5    libc.so.6                          0x00002ad115145460 __libc_start_main + 245\n6    tmpsiq2l4zl                        0x000055bbb4b2e269 <unavailable> + 4713\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result = negative + positive\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmphiqdelor/tmphiqdelor.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a62cf3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a629eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a629ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a629e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphiqdelor                        0x00005613e29a6721 <unavailable> + 5921\n5    libc.so.6                          0x00002b5a62edf460 __libc_start_main + 245\n6    tmphiqdelor                        0x00005613e29a62b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpzr_a7s4i/tmpzr_a7s4i.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afabc1d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afabbeceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afabbece988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afabbecd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzr_a7s4i                        0x000055a7420c44e1 <unavailable> + 5345\n5    libc.so.6                          0x00002afabc3c3460 __libc_start_main + 245\n6    tmpzr_a7s4i                        0x000055a7420c4079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] >= 0 {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmprv3zsbgz/tmprv3zsbgz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b31674d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b31671cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b31671cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31671ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprv3zsbgz                        0x0000557d732f94e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b31676c4460 __libc_start_main + 245\n6    tmprv3zsbgz                        0x0000557d732f9079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpb649j_mh/tmpb649j_mh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab47e896c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab47e58db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab47e58d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab47e58c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb649j_mh                        0x0000555615b5f741 <unavailable> + 5953\n5    libc.so.6                          0x00002ab47ea82460 __libc_start_main + 245\n6    tmpb649j_mh                        0x0000555615b5f2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    \n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    \n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpjlh4oem8/tmpjlh4oem8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64961fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6495ef5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6495ef5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6495ef47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlh4oem8                        0x000055737d584741 <unavailable> + 5953\n5    libc.so.6                          0x00002b64963ea460 __libc_start_main + 245\n6    tmpjlh4oem8                        0x000055737d5842d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpw5o42b4f/tmpw5o42b4f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb5ed20c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb5ea17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb5ea17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb5ea167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw5o42b4f                        0x000055710494d4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002aeb5ef0c460 __libc_start_main + 245\n6    tmpw5o42b4f                        0x000055710494d079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var newArr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if newArr[i] < 0 {\n            i += 1\n        } else {\n            newArr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpig0o43ib/tmpig0o43ib.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac15488fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac154586b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac154586988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1545857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpig0o43ib                        0x000055b678071531 <unavailable> + 5425\n5    libc.so.6                          0x00002ac154a7b460 __libc_start_main + 245\n6    tmpig0o43ib                        0x000055b6780710c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var newArr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while i < j && newArr[i] < 0 {\n            i += 1\n        }\n        while i < j && newArr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            newArr.swapAt(i, j)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpovebtw7h/tmpovebtw7h.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002baa2e605c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002baa2e2fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002baa2e2fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002baa2e2fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpovebtw7h                        0x000055ddd5046531 <unavailable> + 5425\n5    libc.so.6                          0x00002baa2e7f1460 __libc_start_main + 245\n6    tmpovebtw7h                        0x000055ddd50460c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if result[i] < 0 {\n            i += 1\n        } else {\n            result.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpi1gbvbz7/tmpi1gbvbz7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84e3989c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84e3680b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84e3680988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84e367f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi1gbvbz7                        0x0000561409ed0531 <unavailable> + 5425\n5    libc.so.6                          0x00002b84e3b75460 __libc_start_main + 245\n6    tmpi1gbvbz7                        0x0000561409ed00c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 {\n            i += 1\n        }\n        while arr[j] > 0 {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpqlxo2t8y/tmpqlxo2t8y.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6559c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6559965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6559965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65599647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlxo2t8y                        0x0000556400b63531 <unavailable> + 5425\n5    libc.so.6                          0x00002b6559e5a460 __libc_start_main + 245\n6    tmpqlxo2t8y                        0x0000556400b630c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkr98k_gn/tmpkr98k_gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12f118dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12f0e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12f0e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12f0e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkr98k_gn                        0x00005603a0c19531 <unavailable> + 5425\n5    libc.so.6                          0x00002b12f1379460 __libc_start_main + 245\n6    tmpkr98k_gn                        0x00005603a0c190c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmp2c5bu64k/tmp2c5bu64k.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fef297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3feef8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3feef8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3feef8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2c5bu64k                        0x000056445602c531 <unavailable> + 5425\n5    libc.so.6                          0x00002b3fef483460 __libc_start_main + 245\n6    tmp2c5bu64k                        0x000056445602c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var neg = [Int]()\n    var pos = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            neg.append(arr[i])\n        } else {\n            pos.append(arr[i])\n        }\n    }\n    result = neg + pos\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpdbwbn4ku/tmpdbwbn4ku.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad691fa3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad691c9ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad691c9a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad691c997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbwbn4ku                        0x000055e4a76f0721 <unavailable> + 5921\n5    libc.so.6                          0x00002ad69218f460 __libc_start_main + 245\n6    tmpdbwbn4ku                        0x000055e4a76f02b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpt3qjr07x/tmpt3qjr07x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cae22ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cadf21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cadf21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cadf207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt3qjr07x                        0x000056428e5db531 <unavailable> + 5425\n5    libc.so.6                          0x00002b4cae416460 __libc_start_main + 245\n6    tmpt3qjr07x                        0x000056428e5db0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] > 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp8zu3a78_/tmp8zu3a78_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b24998b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b24995a8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b24995a8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24995a77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8zu3a78_                        0x000055ddbfd344e1 <unavailable> + 5345\n5    libc.so.6                          0x00002b2499a9d460 __libc_start_main + 245\n6    tmp8zu3a78_                        0x000055ddbfd34079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    \n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else {\n            arr.swapAt(i, j)\n            j -= 1\n        }\n    }\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp6w370grf/tmp6w370grf.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afbc63d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afbc60c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afbc60c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afbc60c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6w370grf                        0x000055558ee71531 <unavailable> + 5425\n5    libc.so.6                          0x00002afbc65bd460 __libc_start_main + 245\n6    tmp6w370grf                        0x000055558ee710c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<arr.count {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp0te4eaf4/tmp0te4eaf4.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84cff98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84cfc8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84cfc8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84cfc8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0te4eaf4                        0x0000563f4a3b3791 <unavailable> + 6033\n5    libc.so.6                          0x00002b84d0184460 __libc_start_main + 245\n6    tmp0te4eaf4                        0x0000563f4a3b3329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmp9x67u3kc/tmp9x67u3kc.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaed8220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaed7f17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaed7f17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaed7f167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9x67u3kc                        0x0000562798b9f721 <unavailable> + 5921\n5    libc.so.6                          0x00002aaed840c460 __libc_start_main + 245\n6    tmp9x67u3kc                        0x0000562798b9f2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] < 0 {\n            i += 1\n        } else if arr[j] > 0 {\n            j -= 1\n        } else {\n            arr.swapAt(i, j)\n            i += 1\n            j -= 1\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1666122891,
      "stdout": "",
      "stderr": "tmpkaxc2bea/tmpkaxc2bea.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93a8ac9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93a87c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93a87c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93a87bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkaxc2bea                        0x0000564fc66b3531 <unavailable> + 5425\n5    libc.so.6                          0x00002b93a8cb5460 __libc_start_main + 245\n6    tmpkaxc2bea                        0x0000564fc66b30c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = n - 1\n    while i < j {\n        while arr[i] < 0 && i < j {\n            i += 1\n        }\n        while arr[j] >= 0 && i < j {\n            j -= 1\n        }\n        if i < j {\n            let temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpinx5dv0n/tmpinx5dv0n.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4add6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4ada65b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4ada65988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4ada647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpinx5dv0n                        0x000055a1c5fed4e1 <unavailable> + 5345\n5    libc.so.6                          0x00002ae4adf5a460 __libc_start_main + 245\n6    tmpinx5dv0n                        0x000055a1c5fed079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpahyr8tew/tmpahyr8tew.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51770eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5176de1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5176de1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5176de07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpahyr8tew                        0x000056379e10a741 <unavailable> + 5953\n5    libc.so.6                          0x00002b51772d6460 __libc_start_main + 245\n6    tmpahyr8tew                        0x000056379e10a2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var negative = [Int]()\n    var positive = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result = negative + positive\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpmpnvqpac/tmpmpnvqpac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0d73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0a6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0a6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee0a697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmpnvqpac                        0x0000556c5124b721 <unavailable> + 5921\n5    libc.so.6                          0x00002b8ee0f5f460 __libc_start_main + 245\n6    tmpmpnvqpac                        0x0000556c5124b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var positive = [Int]()\n    var negative = [Int]()\n    for i in 0..<n {\n        if arr[i] < 0 {\n            negative.append(arr[i])\n        } else {\n            positive.append(arr[i])\n        }\n    }\n    result.append(contentsOf: negative)\n    result.append(contentsOf: positive)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])\nassert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])\nassert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])",
      "timestamp": 1665517252,
      "stdout": "",
      "stderr": "tmpkde_8job/tmpkde_8job.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a78c98c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a7898fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a7898f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a7898e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkde_8job                        0x000055ddef38b741 <unavailable> + 5953\n5    libc.so.6                          0x00002b9a78e84460 __libc_start_main + 245\n6    tmpkde_8job                        0x000055ddef38b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}