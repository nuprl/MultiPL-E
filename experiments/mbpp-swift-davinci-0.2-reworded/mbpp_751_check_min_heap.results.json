{
  "name": "mbpp_751_check_min_heap",
  "language": "swift",
  "prompt": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in 0..<n {\n        if 2*i+1 < n && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < n && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n        i += 1\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < arr.count {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left_child_index = 2 * i + 1\n        let right_child_index = 2 * i + 2\n        if left_child_index < arr.count {\n            if arr[left_child_index] < arr[i] {\n                is_min_heap = false\n                break\n            }\n        }\n        if right_child_index < arr.count {\n            if arr[right_child_index] < arr[i] {\n                is_min_heap = false\n                break\n            }\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count/2 {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n-2)/2, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < n && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f480b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f47db0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5f47db0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5f47db013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5f47dafbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5f47bb0e83 <unavailable> + 188035\n6    tmpntjgbckk                        0x000056238e2f76b4 <unavailable> + 5812\n7    tmpntjgbckk                        0x000056238e2f734d <unavailable> + 4941\n8    libc.so.6                          0x00002b5f482a5460 __libc_start_main + 245\n9    tmpntjgbckk                        0x000056238e2f7019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if (2*i + 2 < arr.count) && (arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f480b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f47db0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5f47db0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5f47db013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5f47dafbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5f47bb0e83 <unavailable> + 188035\n6    tmpntjgbckk                        0x000056238e2f76b4 <unavailable> + 5812\n7    tmpntjgbckk                        0x000056238e2f734d <unavailable> + 4941\n8    libc.so.6                          0x00002b5f482a5460 __libc_start_main + 245\n9    tmpntjgbckk                        0x000056238e2f7019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9170b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac916dad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac916dad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac916dad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac916dacbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac916bade83 <unavailable> + 188035\n6    tmpc0wavtmb                        0x000055bf6e4a96b4 <unavailable> + 5812\n7    tmpc0wavtmb                        0x000055bf6e4a934d <unavailable> + 4941\n8    libc.so.6                          0x00002ac9172a2460 __libc_start_main + 245\n9    tmpc0wavtmb                        0x000055bf6e4a9019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count {\n            if arr[i] > arr[2 * i + 1] {\n                return false\n            }\n        }\n        if 2 * i + 2 < arr.count {\n            if arr[i] > arr[2 * i + 2] {\n                return false\n            }\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: n/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < n && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count/2-1, through: 0, by: -1) {\n        if arr[i] > arr[2*i+1] || (2*i+2 < arr.count && arr[i] > arr[2*i+2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0794b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0791ac561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba0791ac286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba0791ac13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba0791abbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba078face83 <unavailable> + 188035\n6    tmpmwfl_x_r                        0x000055ed773c269e <unavailable> + 5790\n7    tmpmwfl_x_r                        0x000055ed773c234d <unavailable> + 4941\n8    libc.so.6                          0x00002ba0796a1460 __libc_start_main + 245\n9    tmpmwfl_x_r                        0x000055ed773c2019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count / 2 {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in 0..<n {\n        if 2*i+1 < n && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < n && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_heap = true\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            is_heap = false\n            break\n        }\n    }\n    return is_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aedb601ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aedb5d11561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aedb5d11286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aedb5d1113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aedb5d10bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002aedb5b11e83 <unavailable> + 188035\n6    tmp0241hbmg                        0x0000558e65605a26 <unavailable> + 6694\n7    tmp0241hbmg                        0x0000558e656054dd <unavailable> + 5341\n8    libc.so.6                          0x00002aedb6206460 __libc_start_main + 245\n9    tmp0241hbmg                        0x0000558e656051a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae08f0a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae08eda0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae08eda0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae08eda013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae08ed9fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae08eba0e83 <unavailable> + 188035\n6    tmph20_f_31                        0x0000557920a69b83 <unavailable> + 7043\n7    tmph20_f_31                        0x0000557920a6960d <unavailable> + 5645\n8    libc.so.6                          0x00002ae08f295460 __libc_start_main + 245\n9    tmph20_f_31                        0x0000557920a692d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = i * 2 + 1\n        let right = i * 2 + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in 0..<n {\n        if 2*i+1 < n && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < n && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9170b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac916dad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac916dad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac916dad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac916dacbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac916bade83 <unavailable> + 188035\n6    tmpc0wavtmb                        0x000055bf6e4a96b4 <unavailable> + 5812\n7    tmpc0wavtmb                        0x000055bf6e4a934d <unavailable> + 4941\n8    libc.so.6                          0x00002ac9172a2460 __libc_start_main + 245\n9    tmpc0wavtmb                        0x000055bf6e4a9019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2-1, through: 0, by: -1) {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = arr.count / 2 - 1\n    while i >= 0 {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, to: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < n && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i+1] || (2*i+2 < arr.count && arr[i] > arr[2*i+2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 1..<arr.count {\n        if arr[i] < arr[(i-1)/2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n-1)/2, through: 0, by: -1) {\n        if arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < n && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in 0..<n {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < n && arr[i] > arr[left] {\n            return false\n        }\n        if right < n && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if (2 * i + 2 < n && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, to: -1, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: (arr.count / 2) - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    let n = arr.count\n    for i in 0..<n {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < n && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < n && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            is_min_heap = false\n            break\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: (arr.count - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if arr[i] > arr[(i-1)/2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "tmpnmktym0i/tmpnmktym0i.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada9603cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada95d33b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada95d33988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada95d327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmktym0i                        0x000055d133780552 <unavailable> + 5458\n5    libc.so.6                          0x00002ada96228460 __libc_start_main + 245\n6    tmpnmktym0i                        0x000055d1337801a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    var i = 0\n    while i < arr.count {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n-1)/2, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < n && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f480b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f47db0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5f47db0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5f47db013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5f47dafbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5f47bb0e83 <unavailable> + 188035\n6    tmpntjgbckk                        0x000056238e2f76b4 <unavailable> + 5812\n7    tmpntjgbckk                        0x000056238e2f734d <unavailable> + 4941\n8    libc.so.6                          0x00002b5f482a5460 __libc_start_main + 245\n9    tmpntjgbckk                        0x000056238e2f7019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if 2*i + 1 < arr.count && arr[i] > arr[2*i + 1] {\n            is_min_heap = false\n            break\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = arr.count - 1\n    while i > 0 {\n        let parent = (i - 1) / 2\n        if arr[parent] > arr[i] {\n            return false\n        }\n        i -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        if 2*i+1 < arr.count {\n            if arr[i] > arr[2*i+1] {\n                is_min_heap = false\n                break\n            }\n        }\n        if 2*i+2 < arr.count {\n            if arr[i] > arr[2*i+2] {\n                is_min_heap = false\n                break\n            }\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left_child = 2 * i + 1\n        let right_child = 2 * i + 2\n        if left_child < arr.count && arr[i] > arr[left_child] {\n            return false\n        }\n        if right_child < arr.count && arr[i] > arr[right_child] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n-2)/2, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < n && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count/2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f480b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f47db0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5f47db0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5f47db013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5f47dafbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b5f47bb0e83 <unavailable> + 188035\n6    tmpntjgbckk                        0x000056238e2f76b4 <unavailable> + 5812\n7    tmpntjgbckk                        0x000056238e2f734d <unavailable> + 4941\n8    libc.so.6                          0x00002b5f482a5460 __libc_start_main + 245\n9    tmpntjgbckk                        0x000056238e2f7019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if arr[i] > arr[2 * i + 1] || arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac9170b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac916dad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac916dad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac916dad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac916dacbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac916bade83 <unavailable> + 188035\n6    tmpc0wavtmb                        0x000055bf6e4a96b4 <unavailable> + 5812\n7    tmpc0wavtmb                        0x000055bf6e4a934d <unavailable> + 4941\n8    libc.so.6                          0x00002ac9172a2460 __libc_start_main + 245\n9    tmpc0wavtmb                        0x000055bf6e4a9019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in 0..<n {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < n && arr[i] > arr[left] {\n            return false\n        }\n        if right < n && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left_child_index = 2 * i + 1\n        let right_child_index = 2 * i + 2\n        if left_child_index < arr.count && arr[i] > arr[left_child_index] {\n            is_min_heap = false\n            break\n        }\n        if right_child_index < arr.count && arr[i] > arr[right_child_index] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in stride(from: arr.count / 2 - 1, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] || (2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[left] < arr[i] {\n            return false\n        }\n        if right < arr.count && arr[right] < arr[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2*i + 1\n        let right = 2*i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || (2*i + 2 < arr.count && arr[i] > arr[2*i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if 2*i+1 < arr.count && arr[i] > arr[2*i+1] {\n            return false\n        }\n        if 2*i+2 < arr.count && arr[i] > arr[2*i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        if 2 * i + 1 < arr.count && arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < arr.count && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count {\n        let left_child_index = 2 * i + 1\n        let right_child_index = 2 * i + 2\n        if left_child_index < arr.count && arr[i] > arr[left_child_index] {\n            is_min_heap = false\n            break\n        }\n        if right_child_index < arr.count && arr[i] > arr[right_child_index] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    let n = arr.count\n    for i in stride(from: (n - 1) / 2, through: 0, by: -1) {\n        if arr[i] > arr[2 * i + 1] {\n            return false\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var is_min_heap = true\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] || arr[i] > arr[2*i + 2] {\n            is_min_heap = false\n            break\n        }\n    }\n    return is_min_heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ddd403c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ddd0fa561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9ddd0fa286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9ddd0fa13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9ddd0f9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9ddcefae83 <unavailable> + 188035\n6    tmp692a135q                        0x000055a6e2de9a26 <unavailable> + 6694\n7    tmp692a135q                        0x000055a6e2de94dd <unavailable> + 5341\n8    libc.so.6                          0x00002b9ddd5ef460 __libc_start_main + 245\n9    tmp692a135q                        0x000055a6e2de91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    var i = 0\n    while i < arr.count {\n        let left = 2 * i + 1\n        let right = 2 * i + 2\n        if left < arr.count && arr[i] > arr[left] {\n            return false\n        }\n        if right < arr.count && arr[i] > arr[right] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunc check_min_heap(arr: [Int]) -> Bool {\n    for i in 0..<arr.count/2 {\n        if arr[i] > arr[2*i + 1] {\n            return false\n        }\n        if 2*i + 2 < arr.count && arr[i] > arr[2*i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)\nassert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)\nassert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)",
      "timestamp": 1665510043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}