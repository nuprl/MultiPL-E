{
  "name": "mbpp_102_snake_to_camel",
  "language": "swift",
  "prompt": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var shouldCapitalize = false\n    for char in word {\n        if char == \"_\" {\n            shouldCapitalize = true\n        } else {\n            if shouldCapitalize {\n                result.append(char.uppercased())\n                shouldCapitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpprre_6jj/tmpprre_6jj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b292d453c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b292d14ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b292d14a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b292d1497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpprre_6jj                        0x000055e2223525a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b292d63f460 __libc_start_main + 245\n6    tmpprre_6jj                        0x000055e2223521e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercase())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmphs2wau_6.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphs2wau_6.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var word = word\n    while word.characters.count > 0 {\n        if word.hasPrefix(\"_\") {\n            result.append(word.remove(at: word.startIndex))\n        } else {\n            result.append(word.remove(at: word.startIndex).uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpmkygjvho.swift:6:16: error: 'characters' is unavailable: Please use String directly\n    while word.characters.count > 0 {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmprifo70ie.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprifo70ie.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n            continue\n        }\n        if capitalizeNext {\n            result.append(char.uppercase())\n            capitalizeNext = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp8stbkjyl.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8stbkjyl.swift:12:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n            } else {\n                result.append(c)\n            }\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpg2jp8zdp.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpg2jp8zdp.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpcip9l8xp.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpfgbu5okx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp4a48flpn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4a48flpn.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercase())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpkv4x2oxy.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkv4x2oxy.swift:10:29: error: value of type 'Character' has no member 'uppercase'\n            result.append(c.uppercase())\n                          ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var nextUpper = false\n    for char in word {\n        if char == \"_\" {\n            nextUpper = true\n        } else {\n            if nextUpper {\n                result.append(char.uppercased())\n                nextUpper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpl16fixml/tmpl16fixml.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba56df4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba56dc41b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba56dc41988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba56dc407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl16fixml                        0x00005621ab01f5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ba56e136460 __libc_start_main + 245\n6    tmpl16fixml                        0x00005621ab01f1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpcip9l8xp.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(c.uppercased())\n            next_upper = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp9s46syvk/tmp9s46syvk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b265a82cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b265a523b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b265a523988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b265a5227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9s46syvk                        0x000055fdf64995a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b265aa18460 __libc_start_main + 245\n6    tmp9s46syvk                        0x000055fdf64991e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capital = false\n    for char in word {\n        if char == \"_\" {\n            capital = true\n        } else {\n            if capital {\n                result += String(char).uppercased()\n                capital = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpkictjbaq/tmpkictjbaq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcc95f9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcc92f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcc92f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcc92ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkictjbaq                        0x000055b167c1f5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002abcc97e5460 __libc_start_main + 245\n6    tmpkictjbaq                        0x000055b167c1f1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    let first = words[0]\n    let rest = words[1..<words.count]\n    let rest_camel = rest.map { $0.capitalized }\n    let rest_joined = rest_camel.joined()\n    return first + rest_joined\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpiv_yw69b.swift:7:36: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    let rest_camel = rest.map { $0.capitalized }\n                                ~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lirm2s6.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lirm2s6.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmptd87dtz1/tmptd87dtz1.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7da60d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7da5dccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7da5dcc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7da5dcb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd87dtz1                        0x000055720d5ca5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b7da62c1460 __libc_start_main + 245\n6    tmptd87dtz1                        0x000055720d5ca1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpjca3phuq.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result.append(c.uppercase())\n                next_is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lv8lr92.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lv8lr92.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu6_yyt8r.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for ch in word {\n        if ch == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(ch.uppercased())\n                is_first = false\n            } else {\n                result.append(ch)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (i, w) in words.enumerated() {\n        if i == 0 {\n            camel += w\n        } else {\n            camel += w.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpc5_98kt0.swift:10:24: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += w.capitalized\n                     ~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(Character(String(c).uppercased()))\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpawverbln.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_word = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_word = false\n        } else {\n            if is_first_word {\n                result.append(char)\n            } else {\n                result.append(char.uppercaseString)\n                is_first_word = true\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp5a5e61wq.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5a5e61wq.swift:13:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercase)\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp5p85okrk.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5p85okrk.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase)\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lirm2s6.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lirm2s6.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else if is_upper {\n            result.append(char.uppercased())\n            is_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpknqceph8/tmpknqceph8.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab85c048c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab85bd3fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab85bd3f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab85bd3e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpknqceph8                        0x000055b71f1395a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab85c234460 __libc_start_main + 245\n6    tmpknqceph8                        0x000055b71f1391e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpq2_u5t_g.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq2_u5t_g.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercased())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu6_yyt8r.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpq2_u5t_g.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq2_u5t_g.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercaseString)\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpmyglx3y2.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmyglx3y2.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercaseString)\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8zkmdek5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8zkmdek5.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmprztkk82h.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpawverbln.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lirm2s6.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lirm2s6.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpcip9l8xp.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpznka5yz8.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpznka5yz8.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase)\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word.lowercased()\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp2z67a5xr.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word.lowercased()\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp2z67a5xr.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu7n_iu6m.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu7n_iu6m.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { (index, element) in\n        if index == 0 {\n            return element\n        } else {\n            return element.capitalized\n        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp24a43uax.swift:6:20: error: cannot convert return expression of type 'String.SubSequence' (aka 'Substring') to return type 'String'\n            return element\n                   ^~~~~~~\n                   String()\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_ztmgvy4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            result += is_upper ? String(c).uppercased() : String(c)\n            is_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpje9t_ar4/tmpje9t_ar4.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a87518c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a8720fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a8720f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a8720e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpje9t_ar4                        0x000056340650b5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b8a87704460 __libc_start_main + 245\n6    tmpje9t_ar4                        0x000056340650b1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpq2_u5t_g.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq2_u5t_g.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            camel += words[i]\n        } else {\n            camel += words[i].capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8os3ny3a.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmprztkk82h.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for letter in word {\n        if letter == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(letter).uppercased()\n                is_first = false\n            } else {\n                result += String(letter)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var nextUpper = false\n    for char in word {\n        if char == \"_\" {\n            nextUpper = true\n        } else {\n            if nextUpper {\n                result.append(char.uppercased())\n                nextUpper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpl16fixml/tmpl16fixml.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba56df4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba56dc41b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba56dc41988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba56dc407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl16fixml                        0x00005621ab01f5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ba56e136460 __libc_start_main + 245\n6    tmpl16fixml                        0x00005621ab01f1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            result += words[i]\n        } else {\n            result += words[i].capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_tbwv0w5.swift:10:32: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += words[i].capitalized\n                      ~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n            } else {\n                result.append(char)\n            }\n            is_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmpbz8na56b/tmpbz8na56b.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad434416c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad43410db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad43410d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad43410c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbz8na56b                        0x000056073b2c05a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ad434602460 __libc_start_main + 245\n6    tmpbz8na56b                        0x000056073b2c01e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmprifo70ie.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprifo70ie.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = words[0]\n    for i in 1..<words.count {\n        result += words[i].capitalized\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpz7iq28vl.swift:7:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n        result += words[i].capitalized\n                  ~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpz7iq28vl.swift:9:12: error: cannot convert return expression of type 'String.SubSequence' (aka 'Substring') to return type 'String'\n    return result\n           ^~~~~~\n           String( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmptd87dtz1/tmptd87dtz1.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7da60d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7da5dccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7da5dcc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7da5dcb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd87dtz1                        0x000055720d5ca5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b7da62c1460 __libc_start_main + 245\n6    tmptd87dtz1                        0x000055720d5ca1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercase())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfts7ka_i.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfts7ka_i.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercaseString)\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpskrat_ur.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpskrat_ur.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n            continue\n        }\n        if capitalize {\n            result.append(char.uppercased())\n            capitalize = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp5bmc65gy/tmp5bmc65gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3c54b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3c51aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3c51aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3c51a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5bmc65gy                        0x00005587f2b245a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ae3c569f460 __libc_start_main + 245\n6    tmp5bmc65gy                        0x00005587f2b241e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpq2_u5t_g.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq2_u5t_g.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lirm2s6.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lirm2s6.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpcip9l8xp.swift:4:99: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()\n                                                                                       ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(c.uppercased())\n            next_upper = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp9s46syvk/tmp9s46syvk.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b265a82cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b265a523b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b265a523988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b265a5227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9s46syvk                        0x000055fdf64995a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b265aa18460 __libc_start_main + 245\n6    tmp9s46syvk                        0x000055fdf64991e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercase())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfts7ka_i.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfts7ka_i.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_ztmgvy4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else if is_upper {\n            result.append(char.uppercaseString)\n            is_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpibunopzw.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpibunopzw.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpbt41pk49.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var should_capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            should_capitalize = true\n        } else {\n            if should_capitalize {\n                result.append(char.uppercased())\n                should_capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8_l_9tsn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmprkie58vj/tmprkie58vj.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38f8cb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38f89aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38f89aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38f89a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprkie58vj                        0x00005569a22785a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b38f8e9f460 __libc_start_main + 245\n6    tmprkie58vj                        0x00005569a22781e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8o14r03o.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpdeffmun2.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdeffmun2.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(String(char).uppercased())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp06x2c1jw.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var isFirst = true\n    for c in word.characters {\n        if c == \"_\" {\n            isFirst = true\n        } else {\n            if isFirst {\n                result.append(c.uppercase)\n                isFirst = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpi3owged4.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpi3owged4.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase)\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpxkao0i8r.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel_word = \"\"\n    var capital = false\n    for char in word {\n        if char == \"_\" {\n            capital = true\n        } else {\n            if capital {\n                camel_word.append(char.uppercased())\n                capital = false\n            } else {\n                camel_word.append(char)\n            }\n        }\n    }\n    return camel_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "tmpp326bozv/tmpp326bozv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b88072afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8806fa6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8806fa6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8806fa57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp326bozv                        0x00005570d82d45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b880749b460 __libc_start_main + 245\n6    tmpp326bozv                        0x00005570d82d41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "tmp0u8v38ac/tmp0u8v38ac.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae0a577cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae0a5473b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae0a5473988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae0a54727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0u8v38ac                        0x0000558129eee5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ae0a5968460 __libc_start_main + 245\n6    tmp0u8v38ac                        0x0000558129eee1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercase())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfts7ka_i.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfts7ka_i.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    let first = words[0]\n    let rest = words[1..<words.count]\n    let capitalized = rest.map { $0.capitalized }\n    return ([first] + capitalized).joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpodv71g93.swift:7:37: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n    let capitalized = rest.map { $0.capitalized }\n                                 ~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                new_word += String(c).uppercased()\n                is_first = false\n            } else {\n                new_word += String(c)\n            }\n        }\n    }\n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpfhezn66k.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8o14r03o.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_lirm2s6.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_lirm2s6.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp4a48flpn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4a48flpn.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpbt41pk49.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "tmp7pwk20yb/tmp7pwk20yb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcf3f74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcf3c6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcf3c6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcf3c6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7pwk20yb                        0x000055cdd16a35a7 <unavailable> + 5543\n5    libc.so.6                          0x00002afcf4160460 __libc_start_main + 245\n6    tmp7pwk20yb                        0x000055cdd16a31e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_ztmgvy4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp01_3bb20.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp01_3bb20.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}