{
  "name": "mbpp_247_lps",
  "language": "swift",
  "prompt": "\n/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunc lps(str: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(lps(str: \"TENS FOR TENS\") == 5)\nassert(lps(str: \"CARDIO FOR CARDS\") == 7)\nassert(lps(str: \"PART OF THE JOURNEY IS PART\") == 9)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let str = Array(str)\n    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n - 1, through: 0, by: -1) {\n        var endIndex = startIndex + 1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n - 1, through: 0, by: -1) {\n        var endIndex = startIndex + 1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    let chars = Array(str)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if chars[i] == chars[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if str[i] == str[j] && len == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let strArray = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if strArray[i] == strArray[j] && length == 2 {\n                dp[i][j] = 2\n            } else if strArray[i] == strArray[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let str = Array(str)\n    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for start in stride(from: n - 1, through: 0, by: -1) {\n        for end in start + 1..<n {\n            if str[start] == str[end] {\n                dp[start][end] = 2 + dp[start + 1][end - 1]\n            } else {\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        for endIndex in startIndex+1..<n {\n            if str[startIndex] == str[endIndex] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in (0..<str.count-1).reversed() {\n        for j in i+1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][str.count-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i + length - 1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let s = Array(str)\n    let n = s.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in 0..<n {\n        for j in i+1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n-1 {\n        if str[i] == str[i+1] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    for k in 3...n {\n        for i in 0..<n-k+1 {\n            let j = i+k-1\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n-1 {\n        if str[i] == str[i+1] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    for k in 3...n {\n        for i in 0..<n-k+1 {\n            let j = i+k-1\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let arr = Array(str)\n    let n = arr.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if arr[i] == arr[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let str = Array(str)\n    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if str[i] == str[j] && len == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in (0..<n).reversed() {\n        for j in i+1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex+1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n-1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    let s = Array(str)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for l in 2...str.count {\n        for i in 0..<str.count-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][str.count-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if str[i] == str[j] && len == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let s = Array(str)\n    let n = s.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: s.count), count: s.count)\n    for i in 0..<s.count {\n        dp[i][i] = 1\n    }\n    for i in (0..<s.count-1).reversed() {\n        for j in i+1..<s.count {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][s.count-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex+1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if str[i] == str[j] && len == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in 0..<n-1 {\n        if str[i] == str[i+1] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    \n    for i in 2..<n {\n        for j in 0..<n-i {\n            if str[j] == str[j+i] {\n                dp[j][j+i] = dp[j+1][j+i-1] + 2\n            } else {\n                dp[j][j+i] = max(dp[j][j+i-1], dp[j+1][j+i])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex + 1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n            endIndex += 1\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<(n - l + 1) {\n            let j = i + l - 1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    \n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let str = Array(str)\n    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let chars = Array(str)\n    let n = chars.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if chars[i] == chars[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n-1 {\n        if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: i+1)] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    for length in 3...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex+1\n        while endIndex < n {\n            if s[startIndex] == s[endIndex] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    let strArray = Array(str)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for l in 2...str.count {\n        for i in 0..<str.count-l+1 {\n            let j = i+l-1\n            if strArray[i] == strArray[j] && l == 2 {\n                dp[i][j] = 2\n            } else if strArray[i] == strArray[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][str.count-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        for endIndex in startIndex+1..<n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    guard str.count > 1 else { return str.count }\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.characters.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i + l - 1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, to: -1, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n-2, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if s[i] == s[j] && len == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, to: -1, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if s[i] == s[j] && len == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    \n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: str.count - 1, through: 0, by: -1) {\n        var endIndex = startIndex + 1\n        while endIndex < str.count {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for gap in 1..<n {\n        for i in 0..<n-gap {\n            let j = i + gap\n            if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for startIndex in stride(from: n - 1, through: 0, by: -1) {\n        for endIndex in startIndex + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for cl in 2...n {\n        for i in 0..<n-cl+1 {\n            let j = i+cl-1\n            if str[i] == str[j] && cl == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n {\n            let j = i + length - 1\n            if j >= n {\n                break\n            }\n            \n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex+1\n        while endIndex < n {\n            if str[str.index(str.startIndex, offsetBy: startIndex)] == str[str.index(str.startIndex, offsetBy: endIndex)] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n            endIndex += 1\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in 0..<n {\n        for j in 0..<n {\n            if i == j {\n                continue\n            }\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i + length - 1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i+length-1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n-1, through: 0, by: -1) {\n        var endIndex = startIndex+1\n        while endIndex < n {\n            if s[startIndex] == s[endIndex] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex+1][endIndex-1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex+1][endIndex], dp[startIndex][endIndex-1])\n            }\n            endIndex += 1\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n-1 {\n        if str[i] == str[i+1] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    for k in 2..<n {\n        for i in 0..<n-k {\n            let j = i+k\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n-1 {\n        if str[i] == str[i+1] {\n            dp[i][i+1] = 2\n        } else {\n            dp[i][i+1] = 1\n        }\n    }\n    for k in 3...n {\n        for i in 0..<n-k+1 {\n            let j = i+k-1\n            if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n-2, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let str = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for startIndex in stride(from: n - 1, through: 0, by: -1) {\n        for endIndex in startIndex + 1..<n {\n            if str[startIndex] == str[endIndex] {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1]\n            } else {\n                dp[startIndex][endIndex] = max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1])\n            }\n        }\n    }\n    \n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for length in 2...n {\n        for i in 0..<n-length+1 {\n            let j = i + length - 1\n            if str[i] == str[j] && length == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[i] == str[j] && l == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[i] == str[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 2, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for cl in 2...n {\n        for i in 0..<n-cl+1 {\n            let j = i+cl-1\n            if str[i] == str[j] && cl == 2 {\n                dp[i][j] = 2\n            } else if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for i in stride(from: n-1, through: 0, by: -1) {\n        for j in i+1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for len in 2...n {\n        for i in 0..<n-len+1 {\n            let j = i+len-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i+1][j-1]\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for cl in 2...n {\n        for i in 0..<n-cl+1 {\n            let j = i + cl - 1\n            if s[i] == s[j] && cl == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if s[i] == s[j] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    var dp = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] && l == 2 {\n                dp[i][j] = 2\n            } else if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]",
    "    let n = str.count\n    let s = Array(str)\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    \n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    \n    for l in 2...n {\n        for i in 0..<n-l+1 {\n            let j = i+l-1\n            if s[i] == s[j] && l == 2 {\n                dp[i][j] = 2\n            } else if s[i] == s[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    \n    return dp[0][n-1]",
    "    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        dp[i][i] = 1\n    }\n    for i in stride(from: str.count - 1, through: 0, by: -1) {\n        for j in i + 1..<str.count {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][str.count - 1]",
    "    let n = str.count\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in stride(from: n - 1, through: 0, by: -1) {\n        for j in i + 1..<n {\n            if str[str.index(str.startIndex, offsetBy: i)] == str[str.index(str.startIndex, offsetBy: j)] {\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            } else {\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return dp[0][n - 1]"
  ]
}