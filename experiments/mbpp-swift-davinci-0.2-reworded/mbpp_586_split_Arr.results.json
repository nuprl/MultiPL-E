{
  "name": "mbpp_586_split_Arr",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let n = n % l.count\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var new_l = l\n    let first_part = new_l[0..<n]\n    let second_part = new_l[n..<new_l.count]\n    new_l = second_part + first_part\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "/tmp/tmph2je6_3k.swift:7:25: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    new_l = second_part + first_part\n            ~~~~~~~~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var new_l = [Int]()\n    for i in n..<l.count {\n        new_l.append(l[i])\n    }\n    for i in 0..<n {\n        new_l.append(l[i])\n    }\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = second + first\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmputmrujod.swift:7:18: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    arr = second + first\n          ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    var n = n\n    if n > l.count {\n        n = l.count\n    }\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp7jv5i1hb.swift:11:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var a = [Int]()\n    var b = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            a.append(l[i])\n        } else {\n            b.append(l[i])\n        }\n    }\n    return b + a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let n = n % l.count\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in n..<l.count {\n        result.append(l[i])\n    }\n    for i in 0..<n {\n        result.append(l[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    var n = n\n    if n > l.count {\n        n = n % l.count\n    }\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first_part = l[0..<n]\n    let second_part = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first_part)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var new_l = l\n    let first_part = new_l[0..<n]\n    let second_part = new_l[n..<new_l.count]\n    new_l = second_part + first_part\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "/tmp/tmph2je6_3k.swift:7:25: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    new_l = second_part + first_part\n            ~~~~~~~~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        }\n    }\n    for i in 0..<l.count {\n        if i >= n {\n            newArr.append(l[i])\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp8qx8uj4e/tmp8qx8uj4e.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d934d2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d931c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d931c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d931c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8qx8uj4e                        0x000055cea09e36e9 <unavailable> + 5865\n5    libc.so.6                          0x00002b1d936be460 __libc_start_main + 245\n6    tmp8qx8uj4e                        0x000055cea09e32b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < n {\n        newArr.append(l[i])\n        i += 1\n    }\n    i = n\n    while i < l.count {\n        newArr.append(l[i])\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmpbftwky1o/tmpbftwky1o.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b099c62cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b099c323b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b099c323988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b099c3227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbftwky1o                        0x00005615f8903559 <unavailable> + 5465\n5    libc.so.6                          0x00002b099c818460 __libc_start_main + 245\n6    tmpbftwky1o                        0x00005615f8903129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        }\n    }\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmph2iogu70/tmph2iogu70.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6528f05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6528bfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6528bfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6528bfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph2iogu70                        0x000055ad0555b6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002b65290f1460 __libc_start_main + 245\n6    tmph2iogu70                        0x000055ad0555b2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.append(contentsOf: first)\n    l.removeFirst(n)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    for x in l {\n        if i < n {\n            newArr.append(x)\n        } else {\n            newArr.insert(x, at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp_7i0n24u/tmp_7i0n24u.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3f914cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3f8e43b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3f8e43988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3f8e427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_7i0n24u                        0x000055ed5fb98679 <unavailable> + 5753\n5    libc.so.6                          0x00002ac3f9338460 __libc_start_main + 245\n6    tmp_7i0n24u                        0x000055ed5fb98249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i >= n {\n            newArr.append(l[i])\n        }\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        }\n        else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmpb_viuor8/tmpb_viuor8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b696d02fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b696cd26b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b696cd26988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b696cd257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb_viuor8                        0x00005583ff1e65a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b696d21b460 __libc_start_main + 245\n6    tmpb_viuor8                        0x00005583ff1e6179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l1 = l\n    let l2 = l1[0..<n]\n    l1.removeFirst(n)\n    l1.append(contentsOf: l2)\n    return l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = second + first\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmputmrujod.swift:7:18: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    arr = second + first\n          ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = second + first\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmputmrujod.swift:7:18: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    arr = second + first\n          ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr: [Int] = []\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr: [Int] = []\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmpdi72mnz6/tmpdi72mnz6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64f9aa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64f979cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64f979c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64f979b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdi72mnz6                        0x0000564a53f306e9 <unavailable> + 5865\n5    libc.so.6                          0x00002b64f9c91460 __libc_start_main + 245\n6    tmpdi72mnz6                        0x0000564a53f302b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var new_l = l\n    let first = new_l[0..<n]\n    let second = new_l[n..<new_l.count]\n    new_l = second + first\n    return new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpgcgc36us.swift:7:20: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    new_l = second + first\n            ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    return l[n..<l.count] + l[0..<n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmptkaid475.swift:4:27: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return l[n..<l.count] + l[0..<n]\n           ~~~~~~~~~~~~~~~^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp2g4nr1dr/tmp2g4nr1dr.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35f6329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35f6020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35f6020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35f601f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2g4nr1dr                        0x000055c8e0d075a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b35f6515460 __libc_start_main + 245\n6    tmp2g4nr1dr                        0x000055c8e0d07179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp2g4nr1dr/tmp2g4nr1dr.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35f6329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35f6020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35f6020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35f601f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2g4nr1dr                        0x000055c8e0d075a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b35f6515460 __libc_start_main + 245\n6    tmp2g4nr1dr                        0x000055c8e0d07179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in n..<l.count {\n        result.append(l[i])\n    }\n    for i in 0..<n {\n        result.append(l[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp6izbph_q/tmp6izbph_q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19138cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19135c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19135c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19135c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6izbph_q                        0x000055f77e5ba6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002b1913ab9460 __libc_start_main + 245\n6    tmp6izbph_q                        0x000055f77e5ba2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            result.append(l[i])\n        } else {\n            result.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp_zi53n2r/tmp_zi53n2r.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad19889fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad198596b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad198596988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad1985957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_zi53n2r                        0x000055a6dd8135a9 <unavailable> + 5545\n5    libc.so.6                          0x00002ad198a8b460 __libc_start_main + 245\n6    tmp_zi53n2r                        0x000055a6dd813179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    while i < l.count {\n        if i < n {\n            result.append(l[i])\n        } else {\n            result.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp4jc5a9v2/tmp4jc5a9v2.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f42c68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f4295fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f4295f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f4295e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4jc5a9v2                        0x0000562ac2540559 <unavailable> + 5465\n5    libc.so.6                          0x00002b5f42e54460 __libc_start_main + 245\n6    tmp4jc5a9v2                        0x0000562ac2540129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    var first = [Int]()\n    var second = [Int]()\n    for i in 0..<n {\n        first.append(l[i])\n    }\n    for i in n..<l.count {\n        second.append(l[i])\n    }\n    result = second + first\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp98is5gyc/tmp98is5gyc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0188dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0185d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0185d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0185d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp98is5gyc                        0x00005642958cf6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002ab018aca460 __libc_start_main + 245\n6    tmp98is5gyc                        0x00005642958cf2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = second + first\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmputmrujod.swift:7:18: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    arr = second + first\n          ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first_part = l[0..<n]\n    let second_part = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first_part)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = second + first\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmputmrujod.swift:7:18: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    arr = second + first\n          ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = l\n    let first = result[0..<n]\n    let second = result[n..<result.count]\n    result = second + first\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpvgcqmvdb.swift:7:21: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    result = second + first\n             ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var list = l\n    let first = list[0..<n]\n    let second = list[n..<list.count]\n    list = second + first\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpvccsrbct.swift:7:19: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    list = second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let n = n % l.count\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp98is5gyc/tmp98is5gyc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0188dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0185d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0185d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0185d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp98is5gyc                        0x00005642958cf6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002ab018aca460 __libc_start_main + 245\n6    tmp98is5gyc                        0x00005642958cf2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp2g4nr1dr/tmp2g4nr1dr.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35f6329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35f6020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35f6020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35f601f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2g4nr1dr                        0x000055c8e0d075a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b35f6515460 __libc_start_main + 245\n6    tmp2g4nr1dr                        0x000055c8e0d07179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr: [Int] = []\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "tmphjnmve6v/tmphjnmve6v.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0257297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0256f8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0256f8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0256f8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphjnmve6v                        0x000055d0f5566739 <unavailable> + 5945\n5    libc.so.6                          0x00002b0257483460 __libc_start_main + 245\n6    tmphjnmve6v                        0x000055d0f5566309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = l\n    let first = result[0..<n]\n    let second = result[n..<l.count]\n    result = Array(second) + Array(first)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    arr.removeFirst(n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpxzvhgp6h.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp2g4nr1dr/tmp2g4nr1dr.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35f6329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35f6020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35f6020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35f601f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2g4nr1dr                        0x000055c8e0d075a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b35f6515460 __libc_start_main + 245\n6    tmp2g4nr1dr                        0x000055c8e0d07179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var a = l\n    let b = a[0..<n]\n    a.removeFirst(n)\n    a.append(contentsOf: b)\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp2g4nr1dr/tmp2g4nr1dr.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35f6329c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35f6020b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35f6020988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35f601f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2g4nr1dr                        0x000055c8e0d075a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b35f6515460 __libc_start_main + 245\n6    tmp2g4nr1dr                        0x000055c8e0d07179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l1 = l\n    var l2 = l\n    l1.removeFirst(n)\n    l2.removeLast(l.count - n)\n    return l1 + l2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = second + first\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmp6ruqsbmk.swift:7:16: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    l = second + first\n        ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmpomz731tr.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    newArr = secondPart + firstPart\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpuxdvm9j_.swift:7:25: error: cannot assign value of type 'ArraySlice<Int>' to type '[Int]'\n    newArr = secondPart + firstPart\n             ~~~~~~~~~~~^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmp98is5gyc/tmp98is5gyc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0188dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0185d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0185d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0185d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp98is5gyc                        0x00005642958cf6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002ab018aca460 __libc_start_main + 245\n6    tmp98is5gyc                        0x00005642958cf2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        }\n        else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "tmpb_viuor8/tmpb_viuor8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b696d02fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b696cd26b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b696cd26988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b696cd257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb_viuor8                        0x00005583ff1e65a9 <unavailable> + 5545\n5    libc.so.6                          0x00002b696d21b460 __libc_start_main + 245\n6    tmpb_viuor8                        0x00005583ff1e6179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var a = l\n    let b = a[0..<n]\n    a.removeSubrange(0..<n)\n    a.append(contentsOf: b)\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to split an array at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}