{
  "name": "mbpp_91_find_substring",
  "language": "swift",
  "prompt": "\n/// Write a function to check if a string is present as a substring in a given array of string values.\nfunc find_substring(str1: [String], sub_str: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ack\") == true)\nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"abc\") == false)\nassert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ange\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = false\n    for i in 0..<str1.count {\n        if str1[i].contains(sub_str) {\n            result = true\n        }\n    }\n    return result",
    "    var is_substring = false\n    for i in 0..<str1.count {\n        if str1[i].contains(sub_str) {\n            is_substring = true\n        }\n    }\n    return is_substring",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    var result = false\n    for str in str1 {\n        if str.contains(sub_str) {\n            result = true\n        }\n    }\n    return result",
    "    var result = false\n    for i in str1 {\n        if i.contains(sub_str) {\n            result = true\n        }\n    }\n    return result",
    "    for i in str1 {\n        if i.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    var result = false\n    for str in str1 {\n        if str.contains(sub_str) {\n            result = true\n            break\n        }\n    }\n    return result",
    "    var result = false\n    for str in str1 {\n        if str.contains(sub_str) {\n            result = true\n            break\n        }\n    }\n    return result",
    "    for i in str1 {\n        if i.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    var found = false\n    for str in str1 {\n        if str.contains(sub_str) {\n            found = true\n            break\n        }\n    }\n    return found",
    "    for i in 0..<str1.count {\n        if str1[i].contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    var result = false\n    for str in str1 {\n        if str.contains(sub_str) {\n            result = true\n            break\n        }\n    }\n    return result",
    "    var result = false\n    for i in 0..<str1.count {\n        if str1[i].contains(sub_str) {\n            result = true\n        }\n    }\n    return result",
    "    for i in str1 {\n        if i.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false",
    "    for str in str1 {\n        if str.contains(sub_str) {\n            return true\n        }\n    }\n    return false"
  ]
}