{
  "name": "mbpp_407_rearrange_bigger",
  "language": "swift",
  "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i - 1] >= n_arr_int[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    n_arr_int.swapAt(i - 1, j)\n    j = n_arr_int.count - 1\n    while i < j {\n        n_arr_int.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return n_arr_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmprft4r3nq.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmprft4r3nq.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmprft4r3nq.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpx33nf39t.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx33nf39t.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx33nf39t.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpx33nf39t.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpd5teujmw.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpd5teujmw.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpd5teujmw.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpaayo2828.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpaayo2828.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpaayo2828.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpaayo2828.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp947iixst.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp947iixst.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp947iixst.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp0uv_nuh4.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp0uv_nuh4.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp0uv_nuh4.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp0uv_nuh4.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp0uv_nuh4.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n))\n    ^~~\n    var\n/tmp/tmp0uv_nuh4.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp0uv_nuh4.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n))\n    ^~~\n    var\n/tmp/tmp0uv_nuh4.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp0uv_nuh4.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n))\n    ^~~\n    var\n/tmp/tmp0uv_nuh4.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp0uv_nuh4.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n))\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmplwjb69yc.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmplwjb69yc.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmplwjb69yc.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var index = digits.count - 1\n    while index > 0 && digits[index - 1] >= digits[index] {\n        index -= 1\n    }\n    if index == 0 {\n        return -1\n    }\n    var next = digits[index - 1]\n    var smallest = index\n    for i in index + 1..<digits.count {\n        if digits[i] > next && digits[i] < digits[smallest] {\n            smallest = i\n        }\n    }\n    digits.swapAt(index - 1, smallest)\n    digits[index...].sort()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu0jybkxc.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu0jybkxc.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu0jybkxc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpu0jybkxc.swift:19:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(index - 1, smallest)\n    ~~~~~~ ^\n/tmp/tmpu0jybkxc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu0jybkxc.swift:20:22: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits[index...].sort()\n    ~~~~~~           ^\n/tmp/tmpu0jybkxc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpjhn9vyid.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjhn9vyid.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjhn9vyid.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpjhn9vyid.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp75uv90f2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp75uv90f2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp75uv90f2.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp75uv90f2.swift:23:23: error: no exact matches in call to instance method 'joined'\n    return Int(digits.joined())!\n                      ^\nSwift.Sequence:1:11: note: candidate requires that 'String.Element' (aka 'Character') conform to 'StringProtocol' (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element == String {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpbuxom0wk.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbuxom0wk.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbuxom0wk.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp3kkqy8jp.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3kkqy8jp.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3kkqy8jp.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpaayo2828.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpaayo2828.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpaayo2828.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpaayo2828.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpaayo2828.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpaayo2828.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits: [Int] = []\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpjuihlz2i.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjuihlz2i.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjuihlz2i.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpxrcql57c.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpxrcql57c.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpxrcql57c.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp7ga9oz90.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp7ga9oz90.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp7ga9oz90.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i..<digits.count].reversed()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpi3humqq3.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3humqq3.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3humqq3.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpi3humqq3.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmpi3humqq3.swift:4:9: note: 'digits' previously declared here\n    let digits = Array(String(n)).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1xo60trx.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1xo60trx.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1xo60trx.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpx_1ouoh_.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx_1ouoh_.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx_1ouoh_.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpspgmuojb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspgmuojb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspgmuojb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in 0..<digits.count {\n        for j in i+1..<digits.count {\n            if digits[j] > digits[i] {\n                let temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n                for k in 0..<digits.count {\n                    result = result * 10 + digits[k]\n                }\n                return result\n            }\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpoyv4wyai.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpoyv4wyai.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpoyv4wyai.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmperrve2n6.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmperrve2n6.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmperrve2n6.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp930b__de.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp930b__de.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp930b__de.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpatbhqe26.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpatbhqe26.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpatbhqe26.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpatbhqe26.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsa9__nim.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsa9__nim.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsa9__nim.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpsa9__nim.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpsa9__nim.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpsa9__nim.swift:17:18: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits[i...].reverse()\n    ~~~~~~       ^\n/tmp/tmpsa9__nim.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp6b0s27k0.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp6b0s27k0.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp6b0s27k0.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpz_0e3gb1.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpz_0e3gb1.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpz_0e3gb1.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in (0..<digits.count - 1).reversed() {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpr_nxgz7y.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpr_nxgz7y.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpr_nxgz7y.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp5u45u1_7.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp5u45u1_7.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp5u45u1_7.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpbuxom0wk.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbuxom0wk.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbuxom0wk.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0 ..< digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp0x_fjiv6.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp0x_fjiv6.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp0x_fjiv6.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpdenvb5px.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdenvb5px.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdenvb5px.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpgobxj28a.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgobxj28a.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgobxj28a.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpx36scu5t.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx36scu5t.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx36scu5t.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpx36scu5t.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i-1] = digits[j]\n    ~~~~~~^\n/tmp/tmpx36scu5t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx36scu5t.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpx36scu5t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx36scu5t.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpx36scu5t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx36scu5t.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpx36scu5t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpgq_1o0eh.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgq_1o0eh.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgq_1o0eh.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgq_1o0eh.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmpgq_1o0eh.swift:4:9: note: 'digits' previously declared here\n    let digits = Array(String(n)).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsfd61dge.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsfd61dge.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsfd61dge.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var s = String(n)\n    var i = s.count - 1\n    while i > 0 && s[i] <= s[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = s.count - 1\n    while s[j] <= s[i - 1] {\n        j -= 1\n    }\n    s.swapAt(i - 1, j)\n    s.replaceSubrange(i...s.count - 1, with: String(s[i...s.count - 1]).reversed())\n    return Int(s)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpocj7wtye.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpocj7wtye.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpocj7wtye.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpocj7wtye.swift:6:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && s[i] <= s[i - 1] {\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpocj7wtye.swift:6:28: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && s[i] <= s[i - 1] {\n                           ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpocj7wtye.swift:13:11: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while s[j] <= s[i - 1] {\n          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpocj7wtye.swift:13:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while s[j] <= s[i - 1] {\n                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpocj7wtye.swift:16:7: error: value of type 'String' has no member 'swapAt'\n    s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpjsm_5xrv.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjsm_5xrv.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjsm_5xrv.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpzdat221o.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpzdat221o.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpzdat221o.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpzdat221o.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpzdat221o.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpzdat221o.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i] <= digits[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmppyfogs3a.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmppyfogs3a.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmppyfogs3a.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpatbhqe26.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpatbhqe26.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpatbhqe26.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpatbhqe26.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpatbhqe26.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpatbhqe26.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    var chars = Array(s)\n    var i = chars.count - 1\n    while i > 0 && chars[i - 1] >= chars[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = chars.count - 1\n    while j >= i && chars[j] <= chars[i - 1] {\n        j -= 1\n    }\n    chars.swapAt(i - 1, j)\n    j = chars.count - 1\n    while i < j {\n        chars.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(chars))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp4f___x0e.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp4f___x0e.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp4f___x0e.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpxpmh98j9.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpxpmh98j9.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpxpmh98j9.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpjhn9vyid.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjhn9vyid.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjhn9vyid.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpjhn9vyid.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpjhn9vyid.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpjhn9vyid.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpjsm_5xrv.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjsm_5xrv.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjsm_5xrv.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpdenvb5px.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdenvb5px.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdenvb5px.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwcx0pede.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwcx0pede.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwcx0pede.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.map { String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpqtdl8f9l.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpqtdl8f9l.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpqtdl8f9l.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpqtdl8f9l.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpqtdl8f9l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpqtdl8f9l.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpqtdl8f9l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpqtdl8f9l.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpqtdl8f9l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpqtdl8f9l.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpqtdl8f9l.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var res = 0\n    for i in 0..<digits.count {\n        res = res * 10 + digits[i]\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8ixzzx4u.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8ixzzx4u.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8ixzzx4u.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpnij3f6ro.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnij3f6ro.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnij3f6ro.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpnij3f6ro.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpnij3f6ro.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpnij3f6ro.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let str = String(n)\n    let len = str.count\n    var i = len - 1\n    while i > 0 && str[i] <= str[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = len - 1\n    while str[j] <= str[i - 1] {\n        j -= 1\n    }\n    var arr = Array(str)\n    arr.swapAt(i - 1, j)\n    var k = len - 1\n    while i < k {\n        arr.swapAt(i, k)\n        i += 1\n        k -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpct2g4epo.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpct2g4epo.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpct2g4epo.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpct2g4epo.swift:7:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && str[i] <= str[i - 1] {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpct2g4epo.swift:7:30: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && str[i] <= str[i - 1] {\n                             ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpct2g4epo.swift:14:11: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while str[j] <= str[i - 1] {\n          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpct2g4epo.swift:14:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while str[j] <= str[i - 1] {\n                    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpu_rp8ftj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu_rp8ftj.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu_rp8ftj.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpu_rp8ftj.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    swap(&digits[i-1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8o_meksb.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8o_meksb.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8o_meksb.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp947iixst.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp947iixst.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp947iixst.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp3kkqy8jp.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3kkqy8jp.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3kkqy8jp.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp0dks_m1a.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp0dks_m1a.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp0dks_m1a.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i...].reversed()\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmptgmavhe3.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmptgmavhe3.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmptgmavhe3.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmptgmavhe3.swift:16:9: error: invalid redeclaration of 'digits'\n    var digits = digits\n        ^\n/tmp/tmptgmavhe3.swift:4:9: note: 'digits' previously declared here\n    let digits = String(n).map { Int(String($0))! }\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpdenvb5px.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdenvb5px.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdenvb5px.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp5u45u1_7.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp5u45u1_7.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp5u45u1_7.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp1bghfjee.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1bghfjee.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1bghfjee.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1bghfjee.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1bghfjee.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmp1bghfjee.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpgo3_9y3s.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgo3_9y3s.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgo3_9y3s.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgo3_9y3s.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgo3_9y3s.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpgo3_9y3s.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = (number * 10) + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmply_6h_d3.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmply_6h_d3.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmply_6h_d3.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp947iixst.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp947iixst.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp947iixst.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpspgmuojb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspgmuojb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspgmuojb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp947iixst.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp947iixst.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp947iixst.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var array = Array(String(n))\n    var i = array.count - 1\n    while i > 0 && array[i - 1] >= array[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = array.count - 1\n    while array[j] <= array[i - 1] {\n        j -= 1\n    }\n    array.swapAt(i - 1, j)\n    j = array.count - 1\n    while i < j {\n        array.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(array))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpjvr_v0nj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjvr_v0nj.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjvr_v0nj.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num2 = 0\n    for i in 0..<digits.count {\n        num2 = num2 * 10 + digits[i]\n    }\n    return num2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp6z4gn884.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp6z4gn884.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp6z4gn884.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmphollx1re.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphollx1re.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphollx1re.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmphollx1re.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmphollx1re.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmphollx1re.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3f5p7_h1.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3f5p7_h1.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3f5p7_h1.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp3f5p7_h1.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmp3f5p7_h1.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp3f5p7_h1.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmp3f5p7_h1.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3e4evl6x.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3e4evl6x.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3e4evl6x.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpspgmuojb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspgmuojb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspgmuojb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    let c = Array(s)\n    var i = c.count - 1\n    while i > 0 && c[i - 1] >= c[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[j] <= c[i - 1] {\n        j -= 1\n    }\n    let temp = c[i - 1]\n    c[i - 1] = c[j]\n    c[j] = temp\n    j = c.count - 1\n    while i < j {\n        let temp = c[i]\n        c[i] = c[j]\n        c[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(c))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp_0k_wqdp.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp_0k_wqdp.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp_0k_wqdp.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp_0k_wqdp.swift:18:6: error: cannot assign through subscript: 'c' is a 'let' constant\n    c[i - 1] = c[j]\n    ~^\n/tmp/tmp_0k_wqdp.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let c = Array(s)\n    ^~~\n    var\n/tmp/tmp_0k_wqdp.swift:19:6: error: cannot assign through subscript: 'c' is a 'let' constant\n    c[j] = temp\n    ~^\n/tmp/tmp_0k_wqdp.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let c = Array(s)\n    ^~~\n    var\n/tmp/tmp_0k_wqdp.swift:23:10: error: cannot assign through subscript: 'c' is a 'let' constant\n        c[i] = c[j]\n        ~^\n/tmp/tmp_0k_wqdp.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let c = Array(s)\n    ^~~\n    var\n/tmp/tmp_0k_wqdp.swift:24:10: error: cannot assign through subscript: 'c' is a 'let' constant\n        c[j] = temp\n        ~^\n/tmp/tmp_0k_wqdp.swift:5:5: note: change 'let' to 'var' to make it mutable\n    let c = Array(s)\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3e4evl6x.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3e4evl6x.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3e4evl6x.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpdenvb5px.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpdenvb5px.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpdenvb5px.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpjwce84zl.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjwce84zl.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjwce84zl.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = n.digits()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp7399qcq5.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp7399qcq5.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp7399qcq5.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp7399qcq5.swift:4:20: error: value of type 'Int' has no member 'digits'\n    let digits = n.digits()\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpu_rp8ftj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu_rp8ftj.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu_rp8ftj.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpu_rp8ftj.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpi3ezr060.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpi3ezr060.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpi3ezr060.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpu4ol3uez.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu4ol3uez.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu4ol3uez.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpn6boo_fv.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpn6boo_fv.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpn6boo_fv.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpn6boo_fv.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpn6boo_fv.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpn6boo_fv.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp930b__de.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp930b__de.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp930b__de.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    var chars = Array(s)\n    var i = chars.count - 1\n    while i > 0 && chars[i - 1] >= chars[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = chars.count - 1\n    while j >= i && chars[j] <= chars[i - 1] {\n        j -= 1\n    }\n    chars.swapAt(i - 1, j)\n    j = chars.count - 1\n    while i < j {\n        chars.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(chars))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp4f___x0e.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp4f___x0e.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp4f___x0e.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpbpzn1tlu.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbpzn1tlu.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbpzn1tlu.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmphxu7kp1w.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmphxu7kp1w.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmphxu7kp1w.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpu_rp8ftj.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu_rp8ftj.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu_rp8ftj.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpu_rp8ftj.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpu_rp8ftj.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmpu_rp8ftj.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp75uv90f2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp75uv90f2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp75uv90f2.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp75uv90f2.swift:23:23: error: no exact matches in call to instance method 'joined'\n    return Int(digits.joined())!\n                      ^\nSwift.Sequence:1:11: note: candidate requires that 'String.Element' (aka 'Character') conform to 'StringProtocol' (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element == String {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpwh174oak.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpwh174oak.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpwh174oak.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpqq840jb1.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpqq840jb1.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpqq840jb1.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpqq840jb1.swift:16:12: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n    digits.swapAt(i - 1, j)\n    ~~~~~~ ^\n/tmp/tmpqq840jb1.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpqq840jb1.swift:19:16: error: cannot use mutating member on immutable value: 'digits' is a 'let' constant\n        digits.swapAt(i, j)\n        ~~~~~~ ^\n/tmp/tmpqq840jb1.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpx_1ouoh_.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx_1ouoh_.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx_1ouoh_.swift:42:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    swap(&digits[i-1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp9_3b6jco.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp9_3b6jco.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp9_3b6jco.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp9_3b6jco.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i-1], &digits[j])\n         ^~~~~~~\n/tmp/tmp9_3b6jco.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp9_3b6jco.swift:16:24: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i-1], &digits[j])\n                       ^~~~~~~\n/tmp/tmp9_3b6jco.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp9_3b6jco.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmp9_3b6jco.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp9_3b6jco.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmp9_3b6jco.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpq1b5hnm_.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpq1b5hnm_.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpq1b5hnm_.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3e4evl6x.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3e4evl6x.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3e4evl6x.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpe31fba1f.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpe31fba1f.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpe31fba1f.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpe31fba1f.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i-1] = digits[j]\n    ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpsr87y20b.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpsr87y20b.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpsr87y20b.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpx33nf39t.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx33nf39t.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx33nf39t.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpx33nf39t.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? \"Not possible\" : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp9y43r99p.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp9y43r99p.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp9y43r99p.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    let n = s.count\n    var i = n - 1\n    while i > 0 && s[i - 1] >= s[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n - 1\n    while s[j] <= s[i - 1] {\n        j -= 1\n    }\n    var s = Array(s)\n    s.swapAt(i - 1, j)\n    s = s[0..<i] + s[i..<n].reversed()\n    return Int(String(s))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpyx18immf.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpyx18immf.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpyx18immf.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpyx18immf.swift:7:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && s[i - 1] >= s[i] {\n                   ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyx18immf.swift:7:32: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && s[i - 1] >= s[i] {\n                               ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyx18immf.swift:14:11: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while s[j] <= s[i - 1] {\n          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyx18immf.swift:14:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while s[j] <= s[i - 1] {\n                  ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyx18immf.swift:17:9: error: invalid redeclaration of 's'\n    var s = Array(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpx33nf39t.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx33nf39t.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx33nf39t.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpx33nf39t.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let s = String(n)\n    var i = s.count - 1\n    while i > 0 && s[s.index(s.startIndex, offsetBy: i - 1)] >= s[s.index(s.startIndex, offsetBy: i)] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = s.count - 1\n    while s[s.index(s.startIndex, offsetBy: j)] <= s[s.index(s.startIndex, offsetBy: i - 1)] {\n        j -= 1\n    }\n    var s = s\n    s.replaceSubrange(s.index(s.startIndex, offsetBy: i - 1) ... s.index(s.startIndex, offsetBy: i - 1), with: String(s[s.index(s.startIndex, offsetBy: j)]))\n    s.replaceSubrange(s.index(s.startIndex, offsetBy: j) ... s.index(s.startIndex, offsetBy: j), with: String(s[s.index(s.startIndex, offsetBy: i - 1)]))\n    var start = s.index(s.startIndex, offsetBy: i)\n    var end = s.index(s.endIndex, offsetBy: -1)\n    while start < end {\n        s.replaceSubrange(start ... start, with: String(s[end]))\n        s.replaceSubrange(end ... end, with: String(s[start]))\n        start = s.index(after: start)\n        end = s.index(before: end)\n    }\n    return Int(s)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp6b9wh7r3.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp6b9wh7r3.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp6b9wh7r3.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp6b9wh7r3.swift:16:9: error: invalid redeclaration of 's'\n    var s = s\n        ^\n/tmp/tmp6b9wh7r3.swift:4:9: note: 's' previously declared here\n    let s = String(n)\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp75uv90f2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp75uv90f2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp75uv90f2.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp75uv90f2.swift:23:23: error: no exact matches in call to instance method 'joined'\n    return Int(digits.joined())!\n                      ^\nSwift.Sequence:1:11: note: candidate requires that 'String.Element' (aka 'Character') conform to 'StringProtocol' (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element == String {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    if digits.count == 1 {\n        return -1\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp18b25bv2.swift:56:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp18b25bv2.swift:57:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp18b25bv2.swift:58:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpcn9mmpmp.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpcn9mmpmp.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpcn9mmpmp.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp85y0xrg8.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp85y0xrg8.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp85y0xrg8.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpx33nf39t.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpx33nf39t.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpx33nf39t.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpx33nf39t.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpx33nf39t.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpx33nf39t.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpo70t7w34.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpo70t7w34.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpo70t7w34.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpo70t7w34.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i - 1] = digits[j]\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpo70t7w34.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpo70t7w34.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpc__uabby.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpc__uabby.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpc__uabby.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp1vgs_egc.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp1vgs_egc.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp1vgs_egc.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp1vgs_egc.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n             ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmp1vgs_egc.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[j])\n                         ^~~~~~~\n/tmp/tmp1vgs_egc.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpu8fm333j.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpu8fm333j.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpu8fm333j.swift:46:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp930b__de.swift:23:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp930b__de.swift:24:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp930b__de.swift:25:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpp0u6t5t5.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpp0u6t5t5.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpp0u6t5t5.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp9oq817wk.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp9oq817wk.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp9oq817wk.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp75uv90f2.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp75uv90f2.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp75uv90f2.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmp75uv90f2.swift:23:23: error: no exact matches in call to instance method 'joined'\n    return Int(digits.joined())!\n                      ^\nSwift.Sequence:1:11: note: candidate requires that 'String.Element' (aka 'Character') conform to 'StringProtocol' (requirement specified as 'Self.Element' : 'StringProtocol')\nextension Sequence where Self.Element : StringProtocol {\n          ^\nSwift.BidirectionalCollection:1:11: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'String')\nextension BidirectionalCollection where Self.Element == String {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpkj_fovg9.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpkj_fovg9.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpkj_fovg9.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmpmwrfrthb.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpmwrfrthb.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpmwrfrthb.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmp3s6snzbp.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3s6snzbp.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3s6snzbp.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpe31fba1f.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpe31fba1f.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpe31fba1f.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpe31fba1f.swift:17:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[i-1] = digits[j]\n    ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:18:11: error: cannot assign through subscript: 'digits' is a 'let' constant\n    digits[j] = temp\n    ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:22:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[i] = digits[j]\n        ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpe31fba1f.swift:23:15: error: cannot assign through subscript: 'digits' is a 'let' constant\n        digits[j] = temp\n        ~~~~~~^\n/tmp/tmpe31fba1f.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = Array(String(n)).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpq2mfte0u.swift:48:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpq2mfte0u.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpq2mfte0u.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123062,
      "stdout": "",
      "stderr": "/tmp/tmp8p6urgki.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp8p6urgki.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp8p6urgki.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var str = String(n)\n    var i = str.count - 1\n    while i > 0 && str[i] <= str[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = str.count - 1\n    while str[j] <= str[i - 1] {\n        j -= 1\n    }\n    str.swapAt(i - 1, j)\n    j = str.count - 1\n    while i < j {\n        str.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(str)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpbmktayo1.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpbmktayo1.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpbmktayo1.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpbmktayo1.swift:6:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && str[i] <= str[i - 1] {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbmktayo1.swift:6:30: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while i > 0 && str[i] <= str[i - 1] {\n                             ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbmktayo1.swift:13:11: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while str[j] <= str[i - 1] {\n          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbmktayo1.swift:13:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n    while str[j] <= str[i - 1] {\n                    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbmktayo1.swift:16:9: error: value of type 'String' ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpgstwhrxe.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpgstwhrxe.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpgstwhrxe.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n/tmp/tmpgstwhrxe.swift:16:10: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n         ^~~~~~~\n/tmp/tmpgstwhrxe.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgstwhrxe.swift:16:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n    swap(&digits[i - 1], &digits[j])\n                         ^~~~~~~\n/tmp/tmpgstwhrxe.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgstwhrxe.swift:19:14: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n             ^~~~~~~\n/tmp/tmpgstwhrxe.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n/tmp/tmpgstwhrxe.swift:19:26: error: cannot pass immutable value as inout argument: 'digits' is a 'let' constant\n        swap(&digits[i], &digits[k])\n                         ^~~~~~~\n/tmp/tmpgstwhrxe.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let digits = String(n).map { Int(String($0))! }\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmpnh8rxw74.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpnh8rxw74.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpnh8rxw74.swift:55:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num = 0\n    for i in 0..<digits.count {\n        num = num * 10 + digits[i]\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpakoj5tsj.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpakoj5tsj.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpakoj5tsj.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1665517249,
      "stdout": "",
      "stderr": "/tmp/tmp3kkqy8jp.swift:49:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmp3kkqy8jp.swift:50:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmp3kkqy8jp.swift:51:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var arr = Array(String(n))\n    var i = arr.count - 1\n    while i > 0 && arr[i-1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i-1] {\n        j -= 1\n    }\n    arr.swapAt(i-1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpjp0s7dbf.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpjp0s7dbf.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpjp0s7dbf.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num2 = 0\n    for i in 0..<digits.count {\n        num2 = num2 * 10 + digits[i]\n    }\n    return num2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "/tmp/tmpspcvemst.swift:52:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 12) == 21)\n       ^\n                               as! Int\n/tmp/tmpspcvemst.swift:53:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Bool'\nassert(rearrange_bigger(n: 10) == false)\n       ^\n                               as! Bool\n/tmp/tmpspcvemst.swift:54:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(rearrange_bigger(n: 102) == 120)\n       ^\n                                as! Int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}