{
  "name": "mbpp_92_is_undulating",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_undulating(n: 1212121) == true)\nassert(is_undulating(n: 1991) == false)\nassert(is_undulating(n: 121) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = 0\n    while i < digits.count - 1 {\n        if digits[i] == digits[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var is_increasing = true\n    while n > 0 {\n        let digit = n % 10\n        if is_increasing {\n            if digit > last_digit {\n                return false\n            }\n        } else {\n            if digit < last_digit {\n                return false\n            }\n        }\n        last_digit = digit\n        n /= 10\n        is_increasing = !is_increasing\n    }\n    return true",
    "    var n = n\n    var prev = n % 10\n    n /= 10\n    var curr = n % 10\n    n /= 10\n    while n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true",
    "    var str = String(n)\n    var i = 0\n    while i < str.count - 1 {\n        if str[i] == str[i + 1] {\n            return false\n        }\n        i += 1\n    }\n    return true",
    "    var n = n\n    var prev = n % 10\n    n /= 10\n    var curr = n % 10\n    n /= 10\n    while n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var current_digit = n % 10\n    n /= 10\n    var is_increasing = last_digit < current_digit\n    while n > 0 {\n        last_digit = current_digit\n        current_digit = n % 10\n        n /= 10\n        if is_increasing && last_digit < current_digit {\n            return false\n        }\n        if !is_increasing && last_digit > current_digit {\n            return false\n        }\n        is_increasing = !is_increasing\n    }\n    return true",
    "    var n = n\n    var last_digit = n % 10\n    var current_digit = 0\n    var is_increasing = true\n    while n > 0 {\n        n /= 10\n        current_digit = n % 10\n        if current_digit == last_digit {\n            return false\n        }\n        if is_increasing && current_digit > last_digit {\n            return false\n        }\n        if !is_increasing && current_digit < last_digit {\n            return false\n        }\n        is_increasing = !is_increasing\n        last_digit = current_digit\n    }\n    return true",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var is_increasing = true\n    while n > 0 {\n        let digit = n % 10\n        if is_increasing {\n            if digit > last_digit {\n                return false\n            }\n        } else {\n            if digit < last_digit {\n                return false\n            }\n        }\n        is_increasing = !is_increasing\n        last_digit = digit\n        n /= 10\n    }\n    return true",
    "    let s = String(n)\n    let a = s.map { Int(String($0))! }\n    let b = zip(a, a.dropFirst())\n    return b.allSatisfy { $0.0 != $1.0 }",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var current_digit = n % 10\n    n /= 10\n    var is_increasing = last_digit < current_digit\n    while n > 0 {\n        last_digit = current_digit\n        current_digit = n % 10\n        n /= 10\n        if last_digit == current_digit {\n            return false\n        }\n        if is_increasing && last_digit < current_digit {\n            return false\n        }\n        if !is_increasing && last_digit > current_digit {\n            return false\n        }\n        is_increasing = !is_increasing\n    }\n    return true",
    "    let digits = n.digits()\n    for i in 0..<digits.count - 2 {\n        if digits[i] == digits[i + 2] {\n            return true\n        }\n    }\n    return false",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var is_increasing = true\n    while n > 0 {\n        let digit = n % 10\n        if is_increasing && digit > last_digit {\n            return false\n        } else if !is_increasing && digit < last_digit {\n            return false\n        }\n        is_increasing = !is_increasing\n        last_digit = digit\n        n /= 10\n    }\n    return true",
    "    var n = n\n    var prev = n % 10\n    n /= 10\n    while n > 0 {\n        let curr = n % 10\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true",
    "    var n = n\n    var last = n % 10\n    n /= 10\n    var current = n % 10\n    n /= 10\n    while n > 0 {\n        if last == current {\n            return false\n        }\n        last = current\n        current = n % 10\n        n /= 10\n    }\n    return true",
    "    var n = n\n    var prev = n % 10\n    n /= 10\n    while n > 0 {\n        let curr = n % 10\n        if curr == prev {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true",
    "    let digits = n.digits\n    var last_digit = digits[0]\n    var is_increasing = true\n    for digit in digits[1..<digits.count] {\n        if digit == last_digit {\n            return false\n        }\n        if is_increasing {\n            if digit < last_digit {\n                is_increasing = false\n            }\n        } else {\n            if digit > last_digit {\n                return false\n            }\n        }\n        last_digit = digit\n    }\n    return true",
    "    var n = n\n    var last_digit = n % 10\n    var is_undulating = true\n    while n > 0 {\n        n /= 10\n        let digit = n % 10\n        if last_digit == digit {\n            is_undulating = false\n            break\n        }\n        last_digit = digit\n    }\n    return is_undulating",
    "    var n = n\n    var prev_digit = n % 10\n    n /= 10\n    var curr_digit = n % 10\n    n /= 10\n    while n > 0 {\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = n % 10\n        n /= 10\n    }\n    return true",
    "    let digits = n.digits()\n    for i in 0..<digits.count - 2 {\n        if digits[i] == digits[i + 2] {\n            return true\n        }\n    }\n    return false",
    "    var n = n\n    var last_digit = n % 10\n    n /= 10\n    var is_increasing = true\n    while n > 0 {\n        let digit = n % 10\n        if is_increasing {\n            if digit > last_digit {\n                return false\n            }\n        } else {\n            if digit < last_digit {\n                return false\n            }\n        }\n        last_digit = digit\n        is_increasing = !is_increasing\n        n /= 10\n    }\n    return true"
  ]
}