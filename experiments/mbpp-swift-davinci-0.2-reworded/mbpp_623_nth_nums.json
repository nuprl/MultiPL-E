{
  "name": "mbpp_623_nth_nums",
  "language": "swift",
  "prompt": "\n/// Write a function to compute the n-th power of each number in an array.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return nums.map { $0 ^ n }",
    "    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0.power(n) }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }",
    "    return nums.map { $0 ^ n }"
  ]
}