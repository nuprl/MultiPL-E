{
  "name": "mbpp_736_left_insertion",
  "language": "swift",
  "prompt": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high)/2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x > a[mid] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        }\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x > a[mid] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] >= x {\n            r = m\n        } else {\n            l = m + 1\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] == x {\n            if mid == 0 || a[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] == x {\n            return m\n        } else if a[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var l = 0\n    var r = a.count - 1\n    var m = 0\n    while l <= r {\n        m = (l + r) / 2\n        if a[m] == x {\n            return m\n        } else if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] >= x {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low",
    "    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left",
    "    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left"
  ]
}