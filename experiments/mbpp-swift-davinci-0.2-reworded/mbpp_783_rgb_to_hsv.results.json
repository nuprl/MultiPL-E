{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "swift",
  "prompt": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    var r: Float = Float(r)\n    var g: Float = Float(g)\n    var b: Float = Float(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if max != 0.0 {\n        s = diff / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2.0 + (b - r) / diff\n    } else {\n        h = 4.0 + (r - g) / diff\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpc_6262ze.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpc_6262ze.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpc_6262ze.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpc_6262ze.swift:13:11: error: cannot call value of non-function type 'Float'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmpc_6262ze.swift:13:18: error: cannot call value of non-function type 'Float'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmpc_6262ze.swift:14:11: error: cannot call value of non-function type 'Float'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmpc_6262ze.swift:14:18: error: cannot call value of non-function type 'Float'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Float\n    let s: Float\n    let v: Float\n    \n    v = max\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = (max - min) / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmp7mm46g37.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp7mm46g37.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp7mm46g37.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime: Int = r / 255\n    let g_prime: Int = g / 255\n    let b_prime: Int = b / 255\n    \n    let cmax: Int = max(r_prime, g_prime, b_prime)\n    let cmin: Int = min(r_prime, g_prime, b_prime)\n    let delta: Int = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    } else if cmax == g_prime {\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    } else if cmax == b_prime {\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpp0legfln.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpp0legfln.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpp0legfln.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let delta = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    if delta == 0 {\n        h = 0\n    } else if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpisshj9xm.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpisshj9xm.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpisshj9xm.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp9chubjby.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9chubjby.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9chubjby.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9chubjby.swift:16:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmp9chubjby.swift:23:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmp9chubjby.swift:25:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp9chubjby.swift:27:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp9chubjby.swift:34:19: error: cannot convert value of type 'Float' to expected element type 'Double'\n    return [h, s, v]\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Float\n    let s: Float\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmptkik4kr6.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptkik4kr6.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptkik4kr6.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "/tmp/tmpnauu2uup.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnauu2uup.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnauu2uup.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpnauu2uup.swift:16:16: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((g - b) / diff)\n            ~~~^~~~~~~~~~~~~~~~~~\n            Double(              )\n/tmp/tmpnauu2uup.swift:18:35: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((b - r) / diff) + 120\n            ~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Double(                    )\n/tmp/tmpnauu2uup.swift:20:35: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((r - g) / diff) + 240\n            ~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Double(                    )\n/tmp/tmpnauu2uup.swift:25:15: error: cannot assign value of type 'Float' to type 'Double'\n        s = 1 - (min / max)\n            ~~^~~~~~~~~~~~~\n            Double(        )\n/tmp/tmpnauu2uup.swift:27:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r: Int = r / 255\n    let g: Int = g / 255\n    let b: Int = b / 255\n    \n    let cmax: Int = max(r, max(g, b))\n    let cmin: Int = min(r, min(g, b))\n    let delta: Int = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta % 6)\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta * 100 / cmax\n    }\n    \n    v = cmax * 100\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmp3b6lb5bu.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3b6lb5bu.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3b6lb5bu.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    max = max(rr, gg, bb)\n    min = min(rr, gg, bb)\n    diff = max - min\n    v = max\n    if max == 0 {\n        s = 0\n    } else {\n        s = (255 * diff) / max\n    }\n    if s == 0 {\n        h = 0\n    } else {\n        if rr == max {\n            h = (60 * (gg - bb)) / diff\n        } else if gg == max {\n            h = 120 + (60 * (bb - rr)) / diff\n        } else if bb == max {\n            h = 240 + (60 * (rr - gg)) / diff\n        }\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmp9v0h48xu.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9v0h48xu.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9v0h48xu.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9v0h48xu.swift:16:11: error: cannot call value of non-function type 'Int'\n    max = max(rr, gg, bb)\n          ^\n/tmp/tmp9v0h48xu.swift:17:11: error: cannot call value of non-function type 'Int'\n    min = min(rr, gg, bb)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1 = Double(r) / 255\n    let g1 = Double(g) / 255\n    let b1 = Double(b) / 255\n    \n    let max = max(r1, g1, b1)\n    let min = min(r1, g1, b1)\n    \n    if max == min {\n        h = 0\n    } else if max == r1 {\n        h = 60 * ((g1 - b1) / (max - min))\n    } else if max == g1 {\n        h = 60 * ((b1 - r1) / (max - min)) + 120\n    } else if max == b1 {\n        h = 60 * ((r1 - g1) / (max - min)) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(Double(max - min) / max * 100)\n    }\n    \n    v = Int(max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpvz6ydjdp.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpvz6ydjdp.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpvz6ydjdp.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpvz6ydjdp.swift:18:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * ((g1 - b1) / (max - min))\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            Int(                          )\n/tmp/tmpvz6ydjdp.swift:20:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((b1 - r1) / (max - min)) + 120\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvz6ydjdp.swift:22:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((r1 - g1) / (max - min)) + 240\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpx8rs2ztn.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpx8rs2ztn.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpx8rs2ztn.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h = 0.0\n    let s = 0.0\n    let v = 0.0\n    if max == min {\n        return [h, s, v]\n    }\n    let c = max - min\n    let hh = 0.0\n    if max == r {\n        hh = (g - b) / c\n    } else if max == g {\n        hh = 2 + (b - r) / c\n    } else if max == b {\n        hh = 4 + (r - g) / c\n    }\n    let h = hh * 60\n    if h < 0 {\n        return [h + 360, s, v]\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpgjkv8uoz.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgjkv8uoz.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgjkv8uoz.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpgjkv8uoz.swift:18:9: error: cannot assign to value: 'hh' is a 'let' constant\n        hh = (g - b) / c\n        ^~\n/tmp/tmpgjkv8uoz.swift:16:5: note: change 'let' to 'var' to make it mutable\n    let hh = 0.0\n    ^~~\n    var\n/tmp/tmpgjkv8uoz.swift:18:22: error: cannot assign value of type 'Float' to type 'Double'\n        hh = (g - b) / c\n             ~~~~~~~~^~~\n             Double(    )\n/tmp/tmpgjkv8uoz.swift:20:9: error: cannot assign to value: 'hh' is a 'let' constant\n        hh = 2 + (b - r) / c\n        ^~\n/tmp/tmpgjkv8uoz.swift:16:5: note: change 'let' to 'var' to make it mutable\n    let hh = 0.0\n    ^~~\n    var\n/tmp/tmpgjkv8uoz.swift:20:16: error: cannot assign value of type 'Float' to type 'Double'\n        hh = 2 + (b - r) / c\n             ~~^~~~~~~~~~~~~\n             Double(        )\n/tmp/tmpgjkv8uoz.swift:22:9: error: cannot assign to value: 'hh' is a 'let' constant\n        hh = 4 + (r - g) / c\n        ^~\n/tmp/tmpgjkv8uoz.swift:16:5: note: change 'let' to 'va",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmp_mdnzhaf.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_mdnzhaf.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_mdnzhaf.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp_mdnzhaf.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpukg1onwi.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpukg1onwi.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpukg1onwi.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //Calculate V\n    v = rgbMax\n    \n    if (v == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //Calculate S\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //Calculate H\n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    }\n    else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    }\n    else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpwtw4d0t4.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwtw4d0t4.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwtw4d0t4.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = max\n    if max != 0 {\n        s = diff / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2 + (b - r) / diff\n    } else if b == max {\n        h = 4 + (r - g) / diff\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpip64mkyh.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpip64mkyh.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpip64mkyh.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpip64mkyh.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v: Double = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    v = Int(max)\n    let diff = max - min\n    if max == 0.0 {\n        s = 0\n    } else {\n        s = Int(diff / max * 100)\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = Int((g - b) / diff * 60)\n    } else if max == g {\n        h = Int((b - r) / diff * 60) + 120\n    } else if max == b {\n        h = Int((r - g) / diff * 60) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmppj11c_dy.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppj11c_dy.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppj11c_dy.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = Int(60 * ((g - b) / delta) % 6)\n    } else if cmax == g {\n        h = Int(60 * ((b - r) / delta) + 2)\n    } else if cmax == b {\n        h = Int(60 * ((r - g) / delta) + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax / 255 * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "/tmp/tmpi1callkw.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi1callkw.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi1callkw.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpi1callkw.swift:16:40: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g - b) / delta) % 6)\n                                       ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    diff = max - min\n    \n    v = max\n    \n    if (max != 0) {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    \n    if (r == max) {\n        h = (g - b) * 60 / diff\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    \n    if (h < 0) {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmp9uw0dz3c.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9uw0dz3c.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9uw0dz3c.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9uw0dz3c.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmp9uw0dz3c.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta)\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax / 255\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpqlfh4wmr.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqlfh4wmr.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqlfh4wmr.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    v = max\n    let diff = max - min\n    if max != 0.0 {\n        s = diff / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2.0 + (b - r) / diff\n    } else {\n        h = 4.0 + (r - g) / diff\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpoh9vqjm_.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpoh9vqjm_.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpoh9vqjm_.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, g_prime, b_prime)\n    let cmin = min(r_prime, g_prime, b_prime)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if cmax == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60 + 120)\n    } else if cmax == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpnn7rf3dj.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnn7rf3dj.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnn7rf3dj.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let diff = max - min\n    \n    v = max\n    \n    if max != 0 {\n        s = 255 * diff / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = 0 + 43 * (g - b) / diff\n    } else if g == max {\n        h = 85 + 43 * (b - r) / diff\n    } else {\n        h = 171 + 43 * (r - g) / diff\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp543jutde.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp543jutde.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp543jutde.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0.0\n    } else if max_ == r_ {\n        h = 60.0 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60.0 * ((b_ - r_) / diff) + 120.0\n    } else if max_ == b_ {\n        h = 60.0 * ((r_ - g_) / diff) + 240.0\n    }\n    if h < 0 {\n        h += 360.0\n    }\n    if max_ == 0 {\n        s = 0.0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpuk21umg9.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuk21umg9.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuk21umg9.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var min: Float = 0.0\n    var max: Float = 0.0\n    var delta: Float = 0.0\n    var r1: Float = 0.0\n    var g1: Float = 0.0\n    var b1: Float = 0.0\n    r1 = Float(r) / 255\n    g1 = Float(g) / 255\n    b1 = Float(b) / 255\n    min = min(r1, min(g1, b1))\n    max = max(r1, max(g1, b1))\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    if r1 == max {\n        h = (g1 - b1) / delta\n    } else if g1 == max {\n        h = 2 + (b1 - r1) / delta\n    } else {\n        h = 4 + (r1 - g1) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpp5e_s496.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpp5e_s496.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpp5e_s496.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpp5e_s496.swift:16:11: error: cannot call value of non-function type 'Float'\n    min = min(r1, min(g1, b1))\n          ^\n/tmp/tmpp5e_s496.swift:16:19: error: cannot call value of non-function type 'Float'\n    min = min(r1, min(g1, b1))\n                  ^\n/tmp/tmpp5e_s496.swift:17:11: error: cannot call value of non-function type 'Float'\n    max = max(r1, max(g1, b1))\n          ^\n/tmp/tmpp5e_s496.swift:17:19: error: cannot call value of non-function type 'Float'\n    max = max(r1, max(g1, b1))\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if (max == 0.0) {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    if (s == 0.0) {\n        h = 0.0\n    } else {\n        if (r == max) {\n            h = (g - b) / diff\n        } else if (g == max) {\n            h = 2.0 + (b - r) / diff\n        } else if (b == max) {\n            h = 4.0 + (r - g) / diff\n        }\n        h = h * 60.0\n        if (h < 0.0) {\n            h = h + 360.0\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgxuxlb9h.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgxuxlb9h.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgxuxlb9h.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpgxuxlb9h.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmpgxuxlb9h.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmpgxuxlb9h.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmpgxuxlb9h.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    if delta == 0 {\n        h = 0\n    } else if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpqixgg7xv.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqixgg7xv.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqixgg7xv.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    \n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = Int((g - b) / delta) % 6\n    } else if cmax == g {\n        h = Int((b - r) / delta) + 2\n    } else if cmax == b {\n        h = Int((r - g) / delta) + 4\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax / 255 * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpv15rxwpp.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpv15rxwpp.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpv15rxwpp.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, g, b)\n    let cmin = min(r, g, b)\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / diff)\n    } else if cmax == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if cmax == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmppg31v46w.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppg31v46w.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppg31v46w.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(((g_ - b_) / delta) * 60)\n    } else if cmax == g_ {\n        h = Int(((b_ - r_) / delta) * 60) + 120\n    } else if cmax == b_ {\n        h = Int(((r_ - g_) / delta) * 60) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int((delta / cmax) * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpaea0aume.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpaea0aume.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpaea0aume.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let h = 0.0\n    let s = 0.0\n    let v = 0.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    if max == min {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if max == r {\n        return [\"h\": 60 * (g - b) / diff, \"s\": diff / max, \"v\": max]\n    }\n    if max == g {\n        return [\"h\": 60 * (b - r) / diff + 120, \"s\": diff / max, \"v\": max]\n    }\n    if max == b {\n        return [\"h\": 60 * (r - g) / diff + 240, \"s\": diff / max, \"v\": max]\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpuqzjcts5.swift:41:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuqzjcts5.swift:42:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuqzjcts5.swift:43:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    v = max\n    diff = max - min\n    s = (max == 0) ? 0 : diff / max\n    \n    if (max == min) {\n        h = 0\n    } else {\n        if (r == max) {\n            h = (g - b) / diff\n        } else if (g == max) {\n            h = 2 + (b - r) / diff\n        } else if (b == max) {\n            h = 4 + (r - g) / diff\n        }\n        h *= 60\n        if (h < 0) {\n            h += 360\n        }\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp9d0rxmxk.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9d0rxmxk.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9d0rxmxk.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9d0rxmxk.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmp9d0rxmxk.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    if max != 0.0 {\n        s = d / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / d\n    } else if g == max {\n        h = 2.0 + (b - r) / d\n    } else {\n        h = 4.0 + (r - g) / d\n    }\n    \n    h *= 60.0\n    \n    if h < 0.0 {\n        h += 360.0\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp9d_k4d9g.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9d_k4d9g.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9d_k4d9g.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9d_k4d9g.swift:18:15: error: cannot assign value of type 'Float' to type 'Double'\n        s = d / max\n            ~~^~~~~\n            Double()\n/tmp/tmp9d_k4d9g.swift:22:38: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n        return [\"h\": h, \"s\": s, \"v\": v]\n                                     ^\n/tmp/tmp9d_k4d9g.swift:26:21: error: cannot assign value of type 'Float' to type 'Double'\n        h = (g - b) / d\n            ~~~~~~~~^~~\n            Double(    )\n/tmp/tmp9d_k4d9g.swift:28:17: error: cannot assign value of type 'Float' to type 'Double'\n        h = 2.0 + (b - r) / d\n            ~~~~^~~~~~~~~~~~~\n            Double(          )\n/tmp/tmp9d_k4d9g.swift:30:17: error: cannot assign value of type 'Float' to type 'Double'\n        h = 4.0 + (r - g) / d\n            ~~~~^~~~~~~~~~~~~\n            Double(          )\n/tmp/tmp9d_k4d9g.swift:39:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptuuny1i3.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptuuny1i3.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptuuny1i3.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    var rr: Int = r\n    var gg: Int = g\n    var bb: Int = b\n    \n    var cmax: Int = max(rr, gg, bb)\n    var cmin: Int = min(rr, gg, bb)\n    var diff: Int = cmax - cmin\n    \n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff) % 360\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff) + 120\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff) + 240\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    \n    v = cmax\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpst7q92ta.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpst7q92ta.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpst7q92ta.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpst7q92ta.swift:8:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Int = r\n    ~~~ ^\n    let\n/tmp/tmpst7q92ta.swift:9:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Int = g\n    ~~~ ^\n    let\n/tmp/tmpst7q92ta.swift:10:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Int = b\n    ~~~ ^\n    let\n/tmp/tmpst7q92ta.swift:12:9: warning: variable 'cmax' was never mutated; consider changing to 'let' constant\n    var cmax: Int = max(rr, gg, bb)\n    ~~~ ^\n    let\n/tmp/tmpst7q92ta.swift:13:9: warning: variable 'cmin' was never mutated; consider changing to 'let' constant\n    var cmin: Int = min(rr, gg, bb)\n    ~~~ ^\n    let\n/tmp/tmpst7q92ta.swift:14:9: warning: variable 'diff' was never mutated; consider changing to 'let' constant\n    var diff: Int = cmax - cmin\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var delta: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    \n    v = max\n    delta = max - min\n    \n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptd4kjqm4.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptd4kjqm4.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptd4kjqm4.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptd4kjqm4.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmptd4kjqm4.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var r_: Int = 0\n    var g_: Int = 0\n    var b_: Int = 0\n    var h_: Int = 0\n    var s_: Int = 0\n    var v_: Int = 0\n    r_ = r\n    g_ = g\n    b_ = b\n    if r_ > g_ {\n        max = r_\n        if g_ > b_ {\n            min = b_\n        } else {\n            min = g_\n        }\n    } else {\n        max = g_\n        if r_ > b_ {\n            min = b_\n        } else {\n            min = r_\n        }\n    }\n    diff = max - min\n    v = max\n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    if s == 0 {\n        h = 0\n    } else {\n        if r_ == max {\n            h = 60 * (g_ - b_) / diff\n        } else if g_ == max {\n            h = 120 + 60 * (b_ - r_) / diff\n        } else {\n            h = 240 + 60 * (r_ - g_) / diff\n        }\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpruik4l90.swift:73:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpruik4l90.swift:74:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpruik4l90.swift:75:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpruik4l90.swift:13:9: warning: variable 'h_' was never used; consider replacing with '_' or removing it\n    var h_: Int = 0\n        ^~\n        _\n/tmp/tmpruik4l90.swift:14:9: warning: variable 's_' was never used; consider replacing with '_' or removing it\n    var s_: Int = 0\n        ^~\n        _\n/tmp/tmpruik4l90.swift:15:9: warning: variable 'v_' was never used; consider replacing with '_' or removing it\n    var v_: Int = 0\n        ^~\n        _\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    \n    max = Float(max(r, max(g, b)))\n    min = Float(min(r, min(g, b)))\n    diff = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == Float(r) {\n        h = 60 * Float((Float(g) - Float(b)) / diff)\n    } else if max == Float(g) {\n        h = 60 * Float((Float(b) - Float(r)) / diff) + 120\n    } else if max == Float(b) {\n        h = 60 * Float((Float(r) - Float(g)) / diff) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpq1gtr36g.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpq1gtr36g.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpq1gtr36g.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpq1gtr36g.swift:11:24: error: cannot call value of non-function type 'Float'\n    max = Float(max(r, max(g, b)))\n                       ^\n/tmp/tmpq1gtr36g.swift:11:17: error: cannot call value of non-function type 'Float'\n    max = Float(max(r, max(g, b)))\n                ^\n/tmp/tmpq1gtr36g.swift:12:24: error: cannot call value of non-function type 'Float'\n    min = Float(min(r, min(g, b)))\n                       ^\n/tmp/tmpq1gtr36g.swift:12:17: error: cannot call value of non-function type 'Float'\n    min = Float(min(r, min(g, b)))\n                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0\n    var s: Float = 0\n    var v: Float = 0\n    var max: Float = 0\n    var min: Float = 0\n    var diff: Float = 0\n    var r_: Float = 0\n    var g_: Float = 0\n    var b_: Float = 0\n    var h_: Float = 0\n    var s_: Float = 0\n    var v_: Float = 0\n    r_ = Float(r)\n    g_ = Float(g)\n    b_ = Float(b)\n    max = max(r_, max(g_, b_))\n    min = min(r_, min(g_, b_))\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    h_ = h\n    s_ = s\n    v_ = v\n    return [\"h\": h_, \"s\": s_, \"v\": v_]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpajgv265v.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpajgv265v.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpajgv265v.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpajgv265v.swift:19:11: error: cannot call value of non-function type 'Float'\n    max = max(r_, max(g_, b_))\n          ^\n/tmp/tmpajgv265v.swift:19:19: error: cannot call value of non-function type 'Float'\n    max = max(r_, max(g_, b_))\n                  ^\n/tmp/tmpajgv265v.swift:20:11: error: cannot call value of non-function type 'Float'\n    min = min(r_, min(g_, b_))\n          ^\n/tmp/tmpajgv265v.swift:20:19: error: cannot call value of non-function type 'Float'\n    min = min(r_, min(g_, b_))\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r1 = Double(r) / 255.0\n    let g1 = Double(g) / 255.0\n    let b1 = Double(b) / 255.0\n    let cmax = max(r1, max(g1, b1))\n    let cmin = min(r1, min(g1, b1))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((g1 - b1) / diff)\n    } else if cmax == g1 {\n        h = 60 * ((b1 - r1) / diff) + 120\n    } else if cmax == b1 {\n        h = 60 * ((r1 - g1) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(diff / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "/tmp/tmpmoj7p1or.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmoj7p1or.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmoj7p1or.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpmoj7p1or.swift:16:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * ((g1 - b1) / diff)\n            ~~~^~~~~~~~~~~~~~~~~~~~\n            Int(                   )\n/tmp/tmpmoj7p1or.swift:18:37: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * ((b1 - r1) / diff) + 120\n            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Int(                         )\n/tmp/tmpmoj7p1or.swift:20:37: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * ((r1 - g1) / diff) + 240\n            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Int(                         )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpy9p6_rp5.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpy9p6_rp5.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpy9p6_rp5.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var min: Float = 0.0\n    var max: Float = 0.0\n    var delta: Float = 0.0\n    var rf: Float = Float(r) / 255.0\n    var gf: Float = Float(g) / 255.0\n    var bf: Float = Float(b) / 255.0\n    min = rf\n    if gf < min {\n        min = gf\n    }\n    if bf < min {\n        min = bf\n    }\n    max = rf\n    if gf > max {\n        max = gf\n    }\n    if bf > max {\n        max = bf\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp0a4w4tdi.swift:63:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:64:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:65:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:10:9: warning: variable 'rf' was never mutated; consider changing to 'let' constant\n    var rf: Float = Float(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp0a4w4tdi.swift:11:9: warning: variable 'gf' was never mutated; consider changing to 'let' constant\n    var gf: Float = Float(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp0a4w4tdi.swift:12:9: warning: variable 'bf' was never mutated; consider changing to 'let' constant\n    var bf: Float = Float(b) / 255.0\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let delta = max - min\n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpx5qrmhi7.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpx5qrmhi7.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpx5qrmhi7.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            h = 0\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpi5ytawty.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi5ytawty.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi5ytawty.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //Calculate V\n    v = rgbMax\n    \n    if v == 0 {\n        return [\"h\": 0, \"s\": 0, \"v\": 0]\n    }\n    \n    //Calculate S\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if s == 0 {\n        return [\"h\": 0, \"s\": 0, \"v\": v]\n    }\n    \n    //Calculate H\n    if rgbMax == r {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if rgbMax == g {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmprn5xzkdq.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmprn5xzkdq.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmprn5xzkdq.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpx389xp60.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpx389xp60.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpx389xp60.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpx389xp60.swift:16:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmpx389xp60.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmpx389xp60.swift:24:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpx389xp60.swift:26:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpx389xp60.swift:35:14: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n        \"v\": v\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else if max == b {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - min / max\n    }\n    \n    v = max / 255\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpvj15yvsy.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpvj15yvsy.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpvj15yvsy.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp8__mc_ef.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp8__mc_ef.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp8__mc_ef.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgkv24s1a.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgkv24s1a.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgkv24s1a.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp9zkbz3ji.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9zkbz3ji.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9zkbz3ji.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1 = r / 255\n    let g1 = g / 255\n    let b1 = b / 255\n    \n    let cmax = max(r1, g1, b1)\n    let cmin = min(r1, g1, b1)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * (((g1 - b1) / delta) % 6)\n    } else if cmax == g1 {\n        h = 60 * (((b1 - r1) / delta) + 2)\n    } else if cmax == b1 {\n        h = 60 * (((r1 - g1) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpga4hjrq6.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpga4hjrq6.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpga4hjrq6.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpcmnqmuht.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcmnqmuht.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcmnqmuht.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0\n    var s = 0\n    var v = 0\n    var min = 0\n    var max = 0\n    var diff = 0\n    \n    r /= 255\n    g /= 255\n    b /= 255\n    min = min(r, g, b)\n    max = max(r, g, b)\n    diff = max - min\n    v = max\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    if max == min {\n        h = 0\n    } else {\n        if r == max {\n            h = (g - b) / diff\n        } else if g == max {\n            h = 2 + (b - r) / diff\n        } else if b == max {\n            h = 4 + (r - g) / diff\n        }\n    }\n    \n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp3besbsrw.swift:58:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3besbsrw.swift:59:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3besbsrw.swift:60:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp3besbsrw.swift:11:7: error: left side of mutating operator isn't mutable: 'r' is a 'let' constant\n    r /= 255\n    ~ ^\n/tmp/tmp3besbsrw.swift:12:7: error: left side of mutating operator isn't mutable: 'g' is a 'let' constant\n    g /= 255\n    ~ ^\n/tmp/tmp3besbsrw.swift:13:7: error: left side of mutating operator isn't mutable: 'b' is a 'let' constant\n    b /= 255\n    ~ ^\n/tmp/tmp3besbsrw.swift:14:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmp3besbsrw.swift:15:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    let min = min(r, g, b)\n    let max = max(r, g, b)\n    let delta = max - min\n    v = Int(max * 100)\n    if max != 0 {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = Int((g - b) / delta * 60)\n    } else if g == max {\n        h = Int(2 + (b - r) / delta * 60)\n    } else {\n        h = Int(4 + (r - g) / delta * 60)\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpexomsxd5.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpexomsxd5.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpexomsxd5.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpexomsxd5.swift:7:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpexomsxd5.swift:7:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmpexomsxd5.swift:8:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpexomsxd5.swift:8:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmpexomsxd5.swift:9:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpexomsxd5.swift:9:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Durat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta % 6)\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax * 100\n    }\n    v = cmax * 100\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpcxcnkv3i.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcxcnkv3i.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcxcnkv3i.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h = max - min\n    let s = (max == 0.0) ? 0.0 : h / max\n    let v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpvpbnm_0i.swift:28:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpvpbnm_0i.swift:29:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpvpbnm_0i.swift:30:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta.truncatingRemainder(dividingBy: 6)))\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta.truncatingRemainder(dividingBy: 6))) + 120\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta.truncatingRemainder(dividingBy: 6))) + 240\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpudrt1ux9.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpudrt1ux9.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpudrt1ux9.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    }\n    else if max == r {\n        h = (g - b) / d + (g < b ? 6 : 0)\n    }\n    else if max == g {\n        h = (b - r) / d + 2\n    }\n    else if max == b {\n        h = (r - g) / d + 4\n    }\n    \n    h /= 6\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpmx483pvo.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmx483pvo.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmx483pvo.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else if max == b {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "/tmp/tmprobxi2qe.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmprobxi2qe.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmprobxi2qe.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmprobxi2qe.swift:18:26: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * (g - b) / (max - min)\n            ~~~~~~~~~~~~~^~~~~~~~~~~~~\n            Double(                   )\n/tmp/tmprobxi2qe.swift:20:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * (b - r) / (max - min) + 120\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprobxi2qe.swift:22:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * (r - g) / (max - min) + 240\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprobxi2qe.swift:32:15: error: cannot assign value of type 'Float' to type 'Double'\n        s = 1 - (min / max)\n            ~~^~~~~~~~~~~~~\n            Double(        )\n/tmp/tmprobxi2qe.swift:35:9: error: cannot assign value of type 'Float' to type 'Dou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let r_ = Float(r) / 255.0\n    let g_ = Float(g) / 255.0\n    let b_ = Float(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * (g_ - b_) / (max_ - min_)\n    } else if max_ == g_ {\n        h = 60 * (b_ - r_) / (max_ - min_) + 120\n    } else if max_ == b_ {\n        h = 60 * (r_ - g_) / (max_ - min_) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = 1 - min_ / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp4llk6iur.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4llk6iur.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4llk6iur.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    v = max\n    let delta = max - min\n    if max != 0.0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2.0 + (b - r) / delta\n    } else {\n        h = 4.0 + (r - g) / delta\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptgl3x9dc.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptgl3x9dc.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptgl3x9dc.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptuuny1i3.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptuuny1i3.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptuuny1i3.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_: Double = Double(r) / 255.0\n    let g_: Double = Double(g) / 255.0\n    let b_: Double = Double(b) / 255.0\n    let max_: Double = max(r_, max(g_, b_))\n    let min_: Double = min(r_, min(g_, b_))\n    let diff: Double = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max_ == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpuee_qakx.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuee_qakx.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuee_qakx.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if max == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60.0 * (g - b) / diff\n    } else if max == g {\n        h = 60.0 * (b - r) / diff + 120.0\n    } else if max == b {\n        h = 60.0 * (r - g) / diff + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpzta9uxlw.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzta9uxlw.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzta9uxlw.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpzta9uxlw.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmpzta9uxlw.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmpzta9uxlw.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmpzta9uxlw.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //calculate v\n    v = rgbMax\n    \n    if (v == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //calculate s\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //calculate h\n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp6w0g4ga8.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6w0g4ga8.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6w0g4ga8.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    \n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    \n    let diff: Float = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = 60 * ((gf - bf) / diff)\n    } else if max == gf {\n        h = 60 * ((bf - rf) / diff) + 120\n    } else if max == bf {\n        h = 60 * ((rf - gf) / diff) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpfe3owuxq.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfe3owuxq.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfe3owuxq.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //Calculate value\n    v = rgbMax\n    \n    if (v == 0) {\n        s = 0\n        h = 0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //Calculate saturation\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        h = 0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //Calculate hue\n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp05d0hp8r.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp05d0hp8r.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp05d0hp8r.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime: Int = r / 255\n    let g_prime: Int = g / 255\n    let b_prime: Int = b / 255\n    \n    let cmax: Int = max(r_prime, g_prime, b_prime)\n    let cmin: Int = min(r_prime, g_prime, b_prime)\n    let delta: Int = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    } else if cmax == g_prime {\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    } else if cmax == b_prime {\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta * 100 / cmax\n    }\n    \n    v = cmax * 100\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp4s4qckpm.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4s4qckpm.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4s4qckpm.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Float(r) / 255\n    let g_prime = Float(g) / 255\n    let b_prime = Float(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta).truncatingRemainder(dividingBy: 6))\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp_hq1cwa_.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_hq1cwa_.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_hq1cwa_.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    \n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    let diff: Float = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = Int(60 * ((gf - bf) / diff) + 360) % 360\n    } else if max == gf {\n        h = Int(60 * ((bf - rf) / diff) + 120)\n    } else if max == bf {\n        h = Int(60 * ((rf - gf) / diff) + 240)\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max * 100)\n    }\n    \n    v = Int(max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpu9pefu9g.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpu9pefu9g.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpu9pefu9g.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta).truncatingRemainder(dividingBy: 6))\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp05vaknuc.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp05vaknuc.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp05vaknuc.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptqebauqt.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptqebauqt.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptqebauqt.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if max != 0.0 {\n        s = diff / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2.0 + (b - r) / diff\n    } else {\n        h = 4.0 + (r - g) / diff\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmphdrx_2cs.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphdrx_2cs.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphdrx_2cs.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphdrx_2cs.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmphdrx_2cs.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmphdrx_2cs.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmphdrx_2cs.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    let v = max\n    var s = 0.0\n    if max != 0 {\n        s = diff / max\n    }\n    var h = 0.0\n    if diff != 0 {\n        if max == r {\n            h = (g - b) / diff\n        } else if max == g {\n            h = 2 + (b - r) / diff\n        } else if max == b {\n            h = 4 + (r - g) / diff\n        }\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpov1g6eyw.swift:45:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpov1g6eyw.swift:46:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpov1g6eyw.swift:47:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgaolzrn7.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgaolzrn7.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgaolzrn7.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpgaolzrn7.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let cmax = max(r_prime, g_prime, b_prime)\n    let cmin = min(r_prime, g_prime, b_prime)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if cmax == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if cmax == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "/tmp/tmpw6dz3ibp.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpw6dz3ibp.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpw6dz3ibp.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpw6dz3ibp.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpojq2jqa0.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpojq2jqa0.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpojq2jqa0.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1 = Double(r) / 255.0\n    let g1 = Double(g) / 255.0\n    let b1 = Double(b) / 255.0\n    \n    let min = min(r1, g1, b1)\n    let max = max(r1, g1, b1)\n    let delta = max - min\n    \n    v = Int(max * 100)\n    \n    if (max != 0) {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r1 == max) {\n        h = Int((g1 - b1) / delta)\n    } else if (g1 == max) {\n        h = Int(2 + (b1 - r1) / delta)\n    } else {\n        h = Int(4 + (r1 - g1) / delta)\n    }\n    \n    h *= 60\n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp1zthj4lq.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1zthj4lq.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1zthj4lq.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    \n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = Int((g - b) / delta) % 6\n    } else if cmax == g {\n        h = Int((b - r) / delta + 2)\n    } else if cmax == b {\n        h = Int((r - g) / delta + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax / 255 * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp0qtbpoqn.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0qtbpoqn.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0qtbpoqn.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp318jlgpw.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp318jlgpw.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp318jlgpw.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp318jlgpw.swift:13:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmp318jlgpw.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmp318jlgpw.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp318jlgpw.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp318jlgpw.swift:26:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    let cmax: Float = max(rf, max(gf, bf))\n    let cmin: Float = min(rf, min(gf, bf))\n    let delta: Float = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = Int(((gf - bf) / delta).truncatingRemainder(dividingBy: 6))\n    } else if cmax == gf {\n        h = Int(((bf - rf) / delta) + 2)\n    } else if cmax == bf {\n        h = Int(((rf - gf) / delta) + 4)\n    }\n    h = h * 60\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgewtch0g.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgewtch0g.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgewtch0g.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let diff = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpf31vwmtt.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpf31vwmtt.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpf31vwmtt.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let r_f = Float(r) / 255.0\n    let g_f = Float(g) / 255.0\n    let b_f = Float(b) / 255.0\n    let c_max = max(r_f, max(g_f, b_f))\n    let c_min = min(r_f, min(g_f, b_f))\n    let delta = c_max - c_min\n    if delta == 0 {\n        h = 0\n    } else if c_max == r_f {\n        h = 60 * ((g_f - b_f) / delta)\n    } else if c_max == g_f {\n        h = 60 * ((b_f - r_f) / delta + 2)\n    } else if c_max == b_f {\n        h = 60 * ((r_f - g_f) / delta + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if c_max == 0 {\n        s = 0\n    } else {\n        s = delta / c_max\n    }\n    v = c_max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzp96jj7q.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzp96jj7q.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzp96jj7q.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var max: Double = 0\n    var min: Double = 0\n    var diff: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpc7hdvck0.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpc7hdvck0.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpc7hdvck0.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpc7hdvck0.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmpc7hdvck0.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmpc7hdvck0.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmpc7hdvck0.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppq5xgs11.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppq5xgs11.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppq5xgs11.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = 60 * Int(((g_prime - b_prime) / delta).truncatingRemainder(dividingBy: 6))\n    } else if c_max == g_prime {\n        h = 60 * Int(((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = 60 * Int(((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpi47pllcp.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi47pllcp.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi47pllcp.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpng5123a1.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpng5123a1.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpng5123a1.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpng5123a1.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1en9ngmu.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1en9ngmu.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1en9ngmu.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var max: Double = 0\n    var min: Double = 0\n    var diff: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphz1z90bs.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphz1z90bs.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphz1z90bs.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphz1z90bs.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmphz1z90bs.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmphz1z90bs.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmphz1z90bs.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let diff = max - min\n    \n    if max != 0 {\n        s = diff / max\n    } else {\n        s = 0\n        h = -1\n    }\n    \n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2 + (b - r) / diff\n    } else if b == max {\n        h = 4 + (r - g) / diff\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpqpgny_nj.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqpgny_nj.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqpgny_nj.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let min_ = min(r_, min(g_, b_))\n    let max_ = max(r_, max(g_, b_))\n    let delta = max_ - min_\n    \n    v = max_\n    \n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = delta / max_\n        \n        if r_ == max_ {\n            h = (g_ - b_) / delta\n        } else if g_ == max_ {\n            h = 2 + (b_ - r_) / delta\n        } else {\n            h = 4 + (r_ - g_) / delta\n        }\n        \n        h *= 60\n        \n        if h < 0 {\n            h += 360\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1i2lz4q3.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1i2lz4q3.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1i2lz4q3.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    var red: Int = r\n    var green: Int = g\n    var blue: Int = b\n    \n    let min: Int = min(red, green, blue)\n    let max: Int = max(red, green, blue)\n    \n    // V\n    v = max\n    \n    // S\n    let delta: Int = max - min\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        // r = g = b = 0\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    // H\n    if red == max {\n        h = (green - blue) * 60 / delta\n    } else if green == max {\n        h = 120 + (blue - red) * 60 / delta\n    } else {\n        h = 240 + (red - green) * 60 / delta\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpfpqctp9c.swift:58:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfpqctp9c.swift:59:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfpqctp9c.swift:60:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpfpqctp9c.swift:8:9: warning: variable 'red' was never mutated; consider changing to 'let' constant\n    var red: Int = r\n    ~~~ ^\n    let\n/tmp/tmpfpqctp9c.swift:9:9: warning: variable 'green' was never mutated; consider changing to 'let' constant\n    var green: Int = g\n    ~~~ ^\n    let\n/tmp/tmpfpqctp9c.swift:10:9: warning: variable 'blue' was never mutated; consider changing to 'let' constant\n    var blue: Int = b\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = max\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2.0 + (b - r) / delta\n    } else {\n        h = 4.0 + (r - g) / delta\n    }\n    h *= 60.0\n    if h < 0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpw6gu6m3v.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpw6gu6m3v.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpw6gu6m3v.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var max: Double = 0\n    var min: Double = 0\n    var diff: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp293iielf.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp293iielf.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp293iielf.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp293iielf.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmp293iielf.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmp293iielf.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmp293iielf.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1: Int = r / 255\n    let g1: Int = g / 255\n    let b1: Int = b / 255\n    \n    let cmax: Int = max(r1, g1, b1)\n    let cmin: Int = min(r1, g1, b1)\n    let delta: Int = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * (((g1 - b1) / delta) % 6)\n    } else if cmax == g1 {\n        h = 60 * (((b1 - r1) / delta) + 2)\n    } else if cmax == b1 {\n        h = 60 * (((r1 - g1) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta * 100 / cmax\n    }\n    \n    v = cmax * 100\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpztk7nd9e.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpztk7nd9e.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpztk7nd9e.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmptzx92m9z.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptzx92m9z.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptzx92m9z.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptzx92m9z.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var rr: Double = Double(r) / 255.0\n    var gg: Double = Double(g) / 255.0\n    var bb: Double = Double(b) / 255.0\n    var cmax: Double = max(rr, gg, bb)\n    var cmin: Double = min(rr, gg, bb)\n    var diff: Double = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff) + 120\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoayzjp16.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpoayzjp16.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpoayzjp16.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpoayzjp16.swift:7:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Double = Double(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpoayzjp16.swift:8:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Double = Double(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpoayzjp16.swift:9:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Double = Double(b) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpoayzjp16.swift:10:9: warning: variable 'cmax' was never mutated; consider changing to 'let' constant\n    var cmax: Double = max(rr, gg, bb)\n    ~~~ ^\n    let\n/tmp/tmpoayzjp16.swift:11:9: warning: variable 'cmin' was never mutated; consider changing to 'let' constant\n    var cmin: Double = min(rr, gg, bb)\n    ~~~ ^\n    let\n/tmp/tmpoayzjp16.swift:12:9: warning: variable 'diff' was never mutated; consider changing to 'let' constant\n    var diff: Double = cmax - cmin\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let delta = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    if delta == 0 {\n        h = 0\n    } else if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510546,
      "stdout": "",
      "stderr": "/tmp/tmpisshj9xm.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpisshj9xm.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpisshj9xm.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmptzx92m9z.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptzx92m9z.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptzx92m9z.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptzx92m9z.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0, s = 0, v = 0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    v = Int(max)\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = Int(delta / max * 100)\n        if r == max {\n            h = Int((g - b) / delta)\n        } else if g == max {\n            h = Int(2 + (b - r) / delta)\n        } else if b == max {\n            h = Int(4 + (r - g) / delta)\n        }\n        h = h * 60\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpm2_16ium.swift:45:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm2_16ium.swift:46:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm2_16ium.swift:47:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmptzx92m9z.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptzx92m9z.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptzx92m9z.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptzx92m9z.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpp3ejzj33.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpp3ejzj33.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpp3ejzj33.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(60 * ((g_ - b_) / delta) + 360) % 360\n    } else if cmax == g_ {\n        h = Int(60 * ((b_ - r_) / delta) + 120)\n    } else if cmax == b_ {\n        h = Int(60 * ((r_ - g_) / delta) + 240)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpkfgj25dx.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkfgj25dx.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkfgj25dx.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r)\n    let g_ = Double(g)\n    let b_ = Double(b)\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * Int((g_ - b_) / delta.truncatingRemainder(dividingBy: 360))\n    } else if cmax == g_ {\n        h = 60 * Int((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * Int((r_ - g_) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax / 255 * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpnb9zesie.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnb9zesie.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnb9zesie.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int((g_ - b_) / delta * 60)\n    } else if cmax == g_ {\n        h = Int((b_ - r_) / delta * 60 + 120)\n    } else if cmax == b_ {\n        h = Int((r_ - g_) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpyerod_mw.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpyerod_mw.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpyerod_mw.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdttks2o5.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdttks2o5.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdttks2o5.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpwxqqk4s_.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwxqqk4s_.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwxqqk4s_.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpwxqqk4s_.swift:13:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmpwxqqk4s_.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n                Double(                          )\n/tmp/tmpwxqqk4s_.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmpwxqqk4s_.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmpwxqqk4s_.swift:26:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(((g_prime - b_prime) / delta) * 60)\n    } else if c_max == g_prime {\n        h = Int((((b_prime - r_prime) / delta) + 2) * 60)\n    } else if c_max == b_prime {\n        h = Int((((r_prime - g_prime) / delta) + 4) * 60)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1p2dltm6.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1p2dltm6.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1p2dltm6.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    let rd = Double(r)\n    let gd = Double(g)\n    let bd = Double(b)\n    let cmax = max(rd, max(gd, bd))\n    let cmin = min(rd, min(gd, bd))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rd {\n        h = 60 * ((gd - bd) / diff)\n    } else if cmax == gd {\n        h = 60 * (2 + (bd - rd) / diff)\n    } else if cmax == bd {\n        h = 60 * (4 + (rd - gd) / diff)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax / 255\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp3x9b864u.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3x9b864u.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3x9b864u.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpahgqglzq.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpahgqglzq.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpahgqglzq.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpahgqglzq.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmpahgqglzq.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmpahgqglzq.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmpahgqglzq.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r1: Int = r / 255\n    let g1: Int = g / 255\n    let b1: Int = b / 255\n    let cmax: Int = max(r1, g1, b1)\n    let cmin: Int = min(r1, g1, b1)\n    let diff: Int = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((g1 - b1) / diff)\n    } else if cmax == g1 {\n        h = 60 * ((b1 - r1) / diff) + 120\n    } else if cmax == b1 {\n        h = 60 * ((r1 - g1) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpsczm23gx.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsczm23gx.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsczm23gx.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (fmod((g - b) / delta, 6))\n    } else if max == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if max == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp7wcix4ks.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp7wcix4ks.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp7wcix4ks.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp7wcix4ks.swift:16:19: error: cannot find 'fmod' in scope\n        h = 60 * (fmod((g - b) / delta, 6))\n                  ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let delta = max - min\n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / delta\n    } else if max == g {\n        h = 60 * (b - r) / delta + 120\n    } else if max == b {\n        h = 60 * (r - g) / delta + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpspf2b8r0.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpspf2b8r0.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpspf2b8r0.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var rr: Float = Float(r) / 255.0\n    var gg: Float = Float(g) / 255.0\n    var bb: Float = Float(b) / 255.0\n    let minVal: Float = min(rr, min(gg, bb))\n    let maxVal: Float = max(rr, max(gg, bb))\n    let delta: Float = maxVal - minVal\n    v = maxVal\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = delta / maxVal\n        var del_R: Float = (((maxVal - rr) / 6) + (delta / 2)) / delta\n        var del_G: Float = (((maxVal - gg) / 6) + (delta / 2)) / delta\n        var del_B: Float = (((maxVal - bb) / 6) + (delta / 2)) / delta\n        if rr == maxVal {\n            h = del_B - del_G\n        } else if gg == maxVal {\n            h = (1 / 3) + del_R - del_B\n        } else if bb == maxVal {\n            h = (2 / 3) + del_G - del_R\n        }\n        if h < 0 {\n            h += 1\n        }\n        if h > 1 {\n            h -= 1\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpcytds57y.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcytds57y.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcytds57y.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpcytds57y.swift:7:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Float = Float(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpcytds57y.swift:8:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Float = Float(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpcytds57y.swift:9:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Float = Float(b) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpcytds57y.swift:19:13: warning: variable 'del_R' was never mutated; consider changing to 'let' constant\n        var del_R: Float = (((maxVal - rr) / 6) + (delta / 2)) / delta\n        ~~~ ^\n        let\n/tmp/tmpcytds57y.swift:20:13: warning: variable 'del_G' was never mutated; consider changing to 'let' constant\n        var del_G: Float = (((maxVal - gg) / 6) + (delta / 2)) / delta\n        ~~~ ^\n        let\n/tmp/tmpcytds57y.swift:21:13: warning: variable 'del_B' was never mutated; consider chan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime: Int = r / 255\n    let g_prime: Int = g / 255\n    let b_prime: Int = b / 255\n    \n    let c_max: Int = max(r_prime, g_prime, b_prime)\n    let c_min: Int = min(r_prime, g_prime, b_prime)\n    let delta: Int = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = delta / c_max\n    }\n    \n    v = c_max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppj5immzi.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppj5immzi.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppj5immzi.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60 + 120)\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpccpfli0v.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpccpfli0v.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpccpfli0v.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rr = Double(r) / 255\n    let gg = Double(g) / 255\n    let bb = Double(b) / 255\n    let cmax = max(rr, max(gg, bb))\n    let cmin = min(rr, min(gg, bb))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((Int(gg - bb) / Int(diff)) % 6)\n    } else if cmax == gg {\n        h = 60 * ((Int(bb - rr) / Int(diff)) + 2)\n    } else if cmax == bb {\n        h = 60 * ((Int(rr - gg) / Int(diff)) + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(diff / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpc93dm8zr.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpc93dm8zr.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpc93dm8zr.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgb_max: Int = max(r, max(g, b))\n    var rgb_min: Int = min(r, min(g, b))\n    v = rgb_max\n    if rgb_max == 0 {\n        s = 0\n    } else {\n        s = 255 * (rgb_max - rgb_min) / rgb_max\n    }\n    if s == 0 {\n        h = 0\n    } else {\n        if rgb_max == r {\n            h = 0 + 43 * (g - b) / (rgb_max - rgb_min)\n        } else if rgb_max == g {\n            h = 85 + 43 * (b - r) / (rgb_max - rgb_min)\n        } else {\n            h = 171 + 43 * (r - g) / (rgb_max - rgb_min)\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1dok1i25.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1dok1i25.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1dok1i25.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp1dok1i25.swift:7:9: warning: variable 'rgb_max' was never mutated; consider changing to 'let' constant\n    var rgb_max: Int = max(r, max(g, b))\n    ~~~ ^\n    let\n/tmp/tmp1dok1i25.swift:8:9: warning: variable 'rgb_min' was never mutated; consider changing to 'let' constant\n    var rgb_min: Int = min(r, min(g, b))\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0\n    var s: Float = 0\n    var v: Float = 0\n    var min: Float = 0\n    var max: Float = 0\n    var delta: Float = 0\n    var rf: Float = 0\n    var gf: Float = 0\n    var bf: Float = 0\n    rf = Float(r) / 255\n    gf = Float(g) / 255\n    bf = Float(b) / 255\n    min = min(rf, min(gf, bf))\n    max = max(rf, max(gf, bf))\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg66egmik.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg66egmik.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg66egmik.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpg66egmik.swift:16:11: error: cannot call value of non-function type 'Float'\n    min = min(rf, min(gf, bf))\n          ^\n/tmp/tmpg66egmik.swift:16:19: error: cannot call value of non-function type 'Float'\n    min = min(rf, min(gf, bf))\n                  ^\n/tmp/tmpg66egmik.swift:17:11: error: cannot call value of non-function type 'Float'\n    max = max(rf, max(gf, bf))\n          ^\n/tmp/tmpg66egmik.swift:17:19: error: cannot call value of non-function type 'Float'\n    max = max(rf, max(gf, bf))\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var max: Double = 0\n    var min: Double = 0\n    var diff: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(max(r, g), b)\n    min = min(min(r, g), b)\n    diff = max - min\n    v = max\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v,\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0tr_7cxf.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0tr_7cxf.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0tr_7cxf.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0tr_7cxf.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n          ^\n/tmp/tmp0tr_7cxf.swift:13:15: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n              ^\n/tmp/tmp0tr_7cxf.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n          ^\n/tmp/tmp0tr_7cxf.swift:14:15: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var r_: Double = Double(r) / 255\n    var g_: Double = Double(g) / 255\n    var b_: Double = Double(b) / 255\n    var max_: Double = max(r_, max(g_, b_))\n    var min_: Double = min(r_, min(g_, b_))\n    var diff: Double = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max_ == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpq62g7h69.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpq62g7h69.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpq62g7h69.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpq62g7h69.swift:7:9: warning: variable 'r_' was never mutated; consider changing to 'let' constant\n    var r_: Double = Double(r) / 255\n    ~~~ ^\n    let\n/tmp/tmpq62g7h69.swift:8:9: warning: variable 'g_' was never mutated; consider changing to 'let' constant\n    var g_: Double = Double(g) / 255\n    ~~~ ^\n    let\n/tmp/tmpq62g7h69.swift:9:9: warning: variable 'b_' was never mutated; consider changing to 'let' constant\n    var b_: Double = Double(b) / 255\n    ~~~ ^\n    let\n/tmp/tmpq62g7h69.swift:10:9: warning: variable 'max_' was never mutated; consider changing to 'let' constant\n    var max_: Double = max(r_, max(g_, b_))\n    ~~~ ^\n    let\n/tmp/tmpq62g7h69.swift:11:9: warning: variable 'min_' was never mutated; consider changing to 'let' constant\n    var min_: Double = min(r_, min(g_, b_))\n    ~~~ ^\n    let\n/tmp/tmpq62g7h69.swift:12:9: warning: variable 'diff' was never mutated; consider changing to 'let' constant\n    var diff: Double = max_ - min_\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((Int(g_ - b_) / Int(delta)) % 6)\n    } else if cmax == g_ {\n        h = 60 * ((Int(b_ - r_) / Int(delta)) + 2)\n    } else if cmax == b_ {\n        h = 60 * ((Int(r_ - g_) / Int(delta)) + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp3g5ve4tr.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3g5ve4tr.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3g5ve4tr.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (fmod((g - b) / (max - min), 6))\n    } else if max == g {\n        h = 60 * ((b - r) / (max - min) + 2)\n    } else if max == b {\n        h = 60 * ((r - g) / (max - min) + 4)\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "/tmp/tmpesi8xbsy.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpesi8xbsy.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpesi8xbsy.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpesi8xbsy.swift:18:19: error: cannot find 'fmod' in scope\n        h = 60 * (fmod((g - b) / (max - min), 6))\n                  ^~~~\n/tmp/tmpesi8xbsy.swift:20:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((b - r) / (max - min) + 2)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesi8xbsy.swift:22:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((r - g) / (max - min) + 4)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesi8xbsy.swift:28:15: error: cannot assign value of type 'Float' to type 'Double'\n        s = 1 - (min / max)\n            ~~^~~~~~~~~~~~~\n            Double(        )\n/tmp/tmpesi8xbsy.swift:31:9: error: cannot assign value of type 'Float' to type 'Double'\n    v = max\n        ^~~\n        Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((Int(g_ - b_) / Int(delta)) % 6)\n    } else if cmax == g_ {\n        h = 60 * (((b_ - r_) / delta) + 2)\n    } else if cmax == b_ {\n        h = 60 * (((r_ - g_) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmphv7v8qyg.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphv7v8qyg.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphv7v8qyg.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphv7v8qyg.swift:21:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * (((b_ - r_) / delta) + 2)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            Int(                          )\n/tmp/tmphv7v8qyg.swift:23:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * (((r_ - g_) / delta) + 4)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            Int(                          )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    \n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    \n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * (((g - b) / delta) % 6)\n    } else if max == g {\n        h = 60 * (((b - r) / delta) + 2)\n    } else if max == b {\n        h = 60 * (((r - g) / delta) + 4)\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmplq6jzkro.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplq6jzkro.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplq6jzkro.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmplq6jzkro.swift:19:37: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = 60 * (((g - b) / delta) % 6)\n                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphoe8vuur.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphoe8vuur.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphoe8vuur.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphoe8vuur.swift:13:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var rr_temp: Int = 0\n    var gg_temp: Int = 0\n    var bb_temp: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var hsv: AnyHashable = AnyHashable(0)\n    rr = r\n    gg = g\n    bb = b\n    rr_temp = rr\n    gg_temp = gg\n    bb_temp = bb\n    max = rr\n    if gg > max {\n        max = gg\n    }\n    if bb > max {\n        max = bb\n    }\n    min = rr\n    if gg < min {\n        min = gg\n    }\n    if bb < min {\n        min = bb\n    }\n    diff = max - min\n    v = max\n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n    }\n    if s == 0 {\n        h = 0\n    } else {\n        if rr == max {\n            h = (gg - bb) * 60 / diff\n        } else if gg == max {\n            h = 120 + (bb - rr) * 60 / diff\n        } else if bb == max {\n            h = 240 + (rr - gg) * 60 / diff\n        }\n        if h < 0 {\n            h += 360\n        }\n    }\n    hh = h\n    ss = s\n    vv = v\n    hsv = [hh, ss, vv]\n    return hsv\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmprks7xor7.swift:81:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmprks7xor7.swift:82:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmprks7xor7.swift:83:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmprks7xor7.swift:13:9: warning: variable 'rr_temp' was written to, but never read\n    var rr_temp: Int = 0\n        ^\n/tmp/tmprks7xor7.swift:14:9: warning: variable 'gg_temp' was written to, but never read\n    var gg_temp: Int = 0\n        ^\n/tmp/tmprks7xor7.swift:15:9: warning: variable 'bb_temp' was written to, but never read\n    var bb_temp: Int = 0\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let diff = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * (2 + (b - r) / diff)\n    } else {\n        h = 60 * (4 + (r - g) / diff)\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdzc4x8ta.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdzc4x8ta.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdzc4x8ta.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1: Float = Float(r) / 255\n    let g1: Float = Float(g) / 255\n    let b1: Float = Float(b) / 255\n    \n    let min: Float = min(r1, min(g1, b1))\n    let max: Float = max(r1, max(g1, b1))\n    let delta: Float = max - min\n    \n    v = Int(max * 100)\n    \n    if max != 0 {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r1 == max {\n        h = Int((g1 - b1) / delta)\n    } else if g1 == max {\n        h = Int(2 + (b1 - r1) / delta)\n    } else {\n        h = Int(4 + (r1 - g1) / delta)\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp_xnvyr44.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_xnvyr44.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_xnvyr44.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    h = h.truncatingRemainder(dividingBy: 360)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpk0kbafgj.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpk0kbafgj.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpk0kbafgj.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp06gzxu3z.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp06gzxu3z.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp06gzxu3z.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp06gzxu3z.swift:17:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmp06gzxu3z.swift:23:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n                Double(                          )\n/tmp/tmp06gzxu3z.swift:25:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmp06gzxu3z.swift:27:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmp06gzxu3z.swift:33:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var cmax: Int = 0\n    var cmin: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    cmax = max(max(rr, gg), bb)\n    cmin = min(min(rr, gg), bb)\n    diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff + 2)\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff * 100 / cmax\n    }\n    v = cmax * 100 / 255\n    hh = h\n    ss = s\n    vv = v\n    return [\"h\": hh, \"s\": ss, \"v\": vv]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpn7mmm1ec.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpn7mmm1ec.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpn7mmm1ec.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmpe00se3me.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpe00se3me.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpe00se3me.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpe00se3me.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpng5123a1.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpng5123a1.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpng5123a1.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpng5123a1.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgb_max: Int = max(r, max(g, b))\n    var rgb_min: Int = min(r, min(g, b))\n    v = rgb_max\n    if (rgb_max == 0) {\n        s = 0\n    } else {\n        s = 255 * (rgb_max - rgb_min) / rgb_max\n    }\n    if (s == 0) {\n        h = 0\n    } else {\n        if (rgb_max == r) {\n            h = 0 + 43 * (g - b) / (rgb_max - rgb_min)\n        } else if (rgb_max == g) {\n            h = 85 + 43 * (b - r) / (rgb_max - rgb_min)\n        } else {\n            h = 171 + 43 * (r - g) / (rgb_max - rgb_min)\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1gaefdr5.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1gaefdr5.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1gaefdr5.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp1gaefdr5.swift:7:9: warning: variable 'rgb_max' was never mutated; consider changing to 'let' constant\n    var rgb_max: Int = max(r, max(g, b))\n    ~~~ ^\n    let\n/tmp/tmp1gaefdr5.swift:8:9: warning: variable 'rgb_min' was never mutated; consider changing to 'let' constant\n    var rgb_min: Int = min(r, min(g, b))\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, g_prime, b_prime)\n    let cmin = min(r_prime, g_prime, b_prime)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = 60 * ((Int((g_prime - b_prime) / delta) % 6) + 6) % 6\n    } else if cmax == g_prime {\n        h = 60 * ((Int((b_prime - r_prime) / delta) + 2) % 6)\n    } else if cmax == b_prime {\n        h = 60 * ((Int((r_prime - g_prime) / delta) + 4) % 6)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpz5nt3oq8.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpz5nt3oq8.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpz5nt3oq8.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    var r_f: Float = Float(r)\n    var g_f: Float = Float(g)\n    var b_f: Float = Float(b)\n    max = max(r_f, max(g_f, b_f))\n    min = min(r_f, min(g_f, b_f))\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r_f {\n        h = 60 * (g_f - b_f) / diff\n    } else if max == g_f {\n        h = 60 * (b_f - r_f) / diff + 120\n    } else if max == b_f {\n        h = 60 * (r_f - g_f) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpl1crr92j.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpl1crr92j.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpl1crr92j.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpl1crr92j.swift:13:11: error: cannot call value of non-function type 'Float'\n    max = max(r_f, max(g_f, b_f))\n          ^\n/tmp/tmpl1crr92j.swift:13:20: error: cannot call value of non-function type 'Float'\n    max = max(r_f, max(g_f, b_f))\n                   ^\n/tmp/tmpl1crr92j.swift:14:11: error: cannot call value of non-function type 'Float'\n    min = min(r_f, min(g_f, b_f))\n          ^\n/tmp/tmpl1crr92j.swift:14:20: error: cannot call value of non-function type 'Float'\n    min = min(r_f, min(g_f, b_f))\n                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rr: Int = r / 255\n    let gg: Int = g / 255\n    let bb: Int = b / 255\n    \n    let cmax: Int = max(rr, gg, bb)\n    let cmin: Int = min(rr, gg, bb)\n    let diff: Int = cmax - cmin\n    \n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff) + 120\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff) + 240\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    \n    v = cmax\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpej_mtynh.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpej_mtynh.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpej_mtynh.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1 = Double(r) / 255\n    let g1 = Double(g) / 255\n    let b1 = Double(b) / 255\n    \n    let min = min(r1, g1, b1)\n    let max = max(r1, g1, b1)\n    let delta = max - min\n    \n    v = Int(max * 100)\n    \n    if (max != 0) {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r1 == max) {\n        h = Int((g1 - b1) / delta)\n    } else if (g1 == max) {\n        h = Int(2 + (b1 - r1) / delta)\n    } else {\n        h = Int(4 + (r1 - g1) / delta)\n    }\n    \n    h *= 60\n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpj6wo355x.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpj6wo355x.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpj6wo355x.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60) + 120\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg73n2rc4.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg73n2rc4.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg73n2rc4.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let delta = max - min\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmppsi1t8bj.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppsi1t8bj.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppsi1t8bj.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmppsi1t8bj.swift:18:19: error: cannot assign value of type 'Float' to type 'Double'\n        s = delta / max\n            ~~~~~~^~~~~\n            Double(    )\n/tmp/tmppsi1t8bj.swift:22:38: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n        return [\"h\": h, \"s\": s, \"v\": v]\n                                     ^\n/tmp/tmppsi1t8bj.swift:26:21: error: cannot assign value of type 'Float' to type 'Double'\n        h = (g - b) / delta\n            ~~~~~~~~^~~~~~~\n            Double(        )\n/tmp/tmppsi1t8bj.swift:28:15: error: cannot assign value of type 'Float' to type 'Double'\n        h = 2 + (b - r) / delta\n            ~~^~~~~~~~~~~~~~~~~\n            Double(            )\n/tmp/tmppsi1t8bj.swift:30:15: error: cannot assign value of type 'Float' to type 'Double'\n        h = 4 + (r - g) / delta\n            ~~^~~~~~~~~~~~~~~~~\n            Double(            )\n/tmp/tmppsi1t8bj.swift:39:34: error: cannot convert value of type 'Float' to ex",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(max(r, g), b)\n    min = min(min(r, g), b)\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg5gafykx.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg5gafykx.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg5gafykx.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpg5gafykx.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n          ^\n/tmp/tmpg5gafykx.swift:13:15: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n              ^\n/tmp/tmpg5gafykx.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n          ^\n/tmp/tmpg5gafykx.swift:14:15: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            h = 0\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpi5ytawty.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi5ytawty.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi5ytawty.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    h /= 6.0\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpv2vpkn4h.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpv2vpkn4h.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpv2vpkn4h.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpv2vpkn4h.swift:13:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmpv2vpkn4h.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n                Double(                          )\n/tmp/tmpv2vpkn4h.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmpv2vpkn4h.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmpv2vpkn4h.swift:26:19: error: cannot convert value of type 'Float' to expected element type 'Double'\n    return [h, s, v]\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp9zkbz3ji.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9zkbz3ji.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9zkbz3ji.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let rf = Float(r) / 255.0\n    let gf = Float(g) / 255.0\n    let bf = Float(b) / 255.0\n    \n    let cmax = max(rf, max(gf, bf))\n    let cmin = min(rf, min(gf, bf))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = 60 * ((gf - bf) / delta)\n    } else if cmax == gf {\n        h = 60 * ((bf - rf) / delta + 2)\n    } else if cmax == bf {\n        h = 60 * ((rf - gf) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbr9db9re.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpbr9db9re.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpbr9db9re.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max_ == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpji4w46ms.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpji4w46ms.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpji4w46ms.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(60 * ((g_ - b_) / delta) + 360) % 360\n    } else if cmax == g_ {\n        h = Int(60 * ((b_ - r_) / delta) + 120)\n    } else if cmax == b_ {\n        h = Int(60 * ((r_ - g_) / delta) + 240)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpf6u6zb47.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpf6u6zb47.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpf6u6zb47.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let r_f = Float(r) / 255.0\n    let g_f = Float(g) / 255.0\n    let b_f = Float(b) / 255.0\n    let max_ = max(r_f, max(g_f, b_f))\n    let min_ = min(r_f, min(g_f, b_f))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0.0\n    } else if max_ == r_f {\n        h = 60.0 * (g_f - b_f) / diff\n    } else if max_ == g_f {\n        h = 60.0 * (b_f - r_f) / diff + 120.0\n    } else if max_ == b_f {\n        h = 60.0 * (r_f - g_f) / diff + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    if max_ == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpl3ndrg1x.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpl3ndrg1x.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpl3ndrg1x.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r)\n    let g_ = Double(g)\n    let b_ = Double(b)\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(60 * ((g_ - b_) / delta) % 6)\n    } else if cmax == g_ {\n        h = Int(60 * ((b_ - r_) / delta) + 2)\n    } else if cmax == b_ {\n        h = Int(60 * ((r_ - g_) / delta) + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax / 255 * 100)\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpowh9334l.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpowh9334l.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpowh9334l.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpowh9334l.swift:16:42: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_ - b_) / delta) % 6)\n                                         ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpwfogz1zj.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwfogz1zj.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwfogz1zj.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    let diff: Float = max - min\n    v = max\n    if max != 0.0 {\n        s = diff / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rf == max {\n        h = (gf - bf) / diff\n    } else if gf == max {\n        h = 2.0 + (bf - rf) / diff\n    } else {\n        h = 4.0 + (rf - gf) / diff\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpnisefavg.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnisefavg.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnisefavg.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp6a5hsl5i.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6a5hsl5i.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6a5hsl5i.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var rgbMax: Double = 0\n    var rgbMin: Double = 0\n    var diff: Double = 0\n    var rr: Double = 0\n    var gg: Double = 0\n    var bb: Double = 0\n    rr = Double(r) / 255\n    gg = Double(g) / 255\n    bb = Double(b) / 255\n    rgbMax = max(rr, gg, bb)\n    rgbMin = min(rr, gg, bb)\n    diff = rgbMax - rgbMin\n    if rgbMax == rgbMin {\n        h = 0\n    } else if rgbMax == rr {\n        h = 60 * (gg - bb) / diff\n    } else if rgbMax == gg {\n        h = 60 * (bb - rr) / diff + 120\n    } else if rgbMax == bb {\n        h = 60 * (rr - gg) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if rgbMax == 0 {\n        s = 0\n    } else {\n        s = diff / rgbMax\n    }\n    v = rgbMax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpjwpdzfsu.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjwpdzfsu.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjwpdzfsu.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var min: Float = 0.0\n    var max: Float = 0.0\n    var delta: Float = 0.0\n    var r_f: Float = Float(r)\n    var g_f: Float = Float(g)\n    var b_f: Float = Float(b)\n    var h_i: Int = 0\n    var s_i: Int = 0\n    var v_i: Int = 0\n    var r_i: Int = 0\n    var g_i: Int = 0\n    var b_i: Int = 0\n    var rgb_i: [Int] = [r, g, b]\n    var hsv_i: [Int] = [0, 0, 0]\n    var rgb_f: [Float] = [r_f, g_f, b_f]\n    var hsv_f: [Float] = [0.0, 0.0, 0.0]\n    var rgb_max_i: Int = 0\n    var rgb_min_i: Int = 0\n    var rgb_max_f: Float = 0.0\n    var rgb_min_f: Float = 0.0\n    var rgb_max_index: Int = 0\n    var rgb_min_index: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r_1: Int = 0\n    var s_1: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v_1: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var aa: Int = 0\n    var ab: Int = 0\n    var ac: Int = 0\n    var ad: Int = 0\n    var ae: Int =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp3or6udb9.swift:51:18: error: expected initial value after '='\n    var ae: Int =\n                 ^\n/tmp/tmp3or6udb9.swift:67:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3or6udb9.swift:68:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3or6udb9.swift:69:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgb_max: Int = max(r, max(g, b))\n    var rgb_min: Int = min(r, min(g, b))\n    v = rgb_max\n    if (rgb_max == 0) {\n        s = 0\n    } else {\n        s = (255 * (rgb_max - rgb_min)) / rgb_max\n    }\n    if (s == 0) {\n        h = 0\n    } else {\n        if (rgb_max == r) {\n            h = 0 + (43 * (g - b)) / (rgb_max - rgb_min)\n        } else if (rgb_max == g) {\n            h = 85 + (43 * (b - r)) / (rgb_max - rgb_min)\n        } else {\n            h = 171 + (43 * (r - g)) / (rgb_max - rgb_min)\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp3ptjcdpf.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3ptjcdpf.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3ptjcdpf.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp3ptjcdpf.swift:7:9: warning: variable 'rgb_max' was never mutated; consider changing to 'let' constant\n    var rgb_max: Int = max(r, max(g, b))\n    ~~~ ^\n    let\n/tmp/tmp3ptjcdpf.swift:8:9: warning: variable 'rgb_min' was never mutated; consider changing to 'let' constant\n    var rgb_min: Int = min(r, min(g, b))\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r1: Int = r / 255\n    let g1: Int = g / 255\n    let b1: Int = b / 255\n    let cmax: Int = max(r1, g1, b1)\n    let cmin: Int = min(r1, g1, b1)\n    let diff: Int = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((g1 - b1) / diff % 6)\n    } else if cmax == g1 {\n        h = 60 * ((b1 - r1) / diff + 2)\n    } else if cmax == b1 {\n        h = 60 * ((r1 - g1) / diff + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax * 100\n    }\n    v = cmax * 100\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpcs3m75cd.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcs3m75cd.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcs3m75cd.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0\n    var s: Float = 0\n    var v: Float = 0\n    let rf: Float = Float(r) / 255\n    let gf: Float = Float(g) / 255\n    let bf: Float = Float(b) / 255\n    let cmax: Float = max(rf, max(gf, bf))\n    let cmin: Float = min(rf, min(gf, bf))\n    let delta: Float = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = 60 * ((gf - bf) / delta)\n    } else if cmax == gf {\n        h = 60 * ((bf - rf) / delta + 2)\n    } else if cmax == bf {\n        h = 60 * ((rf - gf) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpivmmbv0k.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpivmmbv0k.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpivmmbv0k.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            h = 0\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpekeal5qx.swift:45:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpekeal5qx.swift:46:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpekeal5qx.swift:47:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Float\n    let s: Float\n    let v: Float\n    \n    v = max\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = (max - min) / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpm9tmvxyu.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm9tmvxyu.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm9tmvxyu.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = (max - min) / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp1t8jm9_q.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1t8jm9_q.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1t8jm9_q.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = max\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp7ebwowj4.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp7ebwowj4.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp7ebwowj4.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var delta: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rr == max {\n        h = (gg - bb) * 60 / delta\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / delta\n    } else {\n        h = 240 + (rr - gg) * 60 / delta\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpghq_eqh3.swift:73:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpghq_eqh3.swift:74:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpghq_eqh3.swift:75:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0\n    var s = 0\n    var v = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = Int(max)\n    if (max != 0) {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if (r == max) {\n        h = Int((g - b) / delta)\n    } else if (g == max) {\n        h = Int(2 + (b - r) / delta)\n    } else {\n        h = Int(4 + (r - g) / delta)\n    }\n    h *= 60\n    if (h < 0) {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmplxhljph_.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplxhljph_.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplxhljph_.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let diff = max - min\n    s = max == 0.0 ? 0.0 : diff / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / diff + (g < b ? 6.0 : 0.0)\n        case g:\n            h = (b - r) / diff + 2.0\n        case b:\n            h = (r - g) / diff + 4.0\n        default:\n            h = 0.0\n        }\n        h /= 6.0\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp5wi2sa9p.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5wi2sa9p.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5wi2sa9p.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp5wi2sa9p.swift:15:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : diff / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n        Double(                      )\n/tmp/tmp5wi2sa9p.swift:22:32: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / diff + (g < b ? 6.0 : 0.0)\n                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n                Double(                             )\n/tmp/tmp5wi2sa9p.swift:24:32: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / diff + 2.0\n                ~~~~~~~~~~~~~~~^~~~~\n                Double(             )\n/tmp/tmp5wi2sa9p.swift:26:32: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / diff + 4.0\n                ~~~~~~~~~~~~~~~^~~~~\n                Double(             )\n/tmp/tmp5wi2sa9p.swift:33:19: error: cannot convert value of type 'Float' to expected element type 'Double'\n    return [h, s, v]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpob7_4tl2.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpob7_4tl2.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpob7_4tl2.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    let v = max\n    let s = max == 0.0 ? 0.0 : diff / max\n    var h = 0.0\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpb11n_6g2.swift:41:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpb11n_6g2.swift:42:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpb11n_6g2.swift:43:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rf: CGFloat = CGFloat(r) / 255.0\n    let gf: CGFloat = CGFloat(g) / 255.0\n    let bf: CGFloat = CGFloat(b) / 255.0\n    \n    let max: CGFloat = max(rf, max(gf, bf))\n    let min: CGFloat = min(rf, min(gf, bf))\n    \n    let diff: CGFloat = max - min\n    \n    v = Int(max * 100)\n    \n    if max != 0 {\n        s = Int(diff / max * 100)\n    } else {\n        s = 0\n    }\n    \n    if s == 0 {\n        h = 0\n    } else if rf == max {\n        h = Int((gf - bf) / diff * 60)\n    } else if gf == max {\n        h = Int((bf - rf) / diff * 60) + 120\n    } else if bf == max {\n        h = Int((rf - gf) / diff * 60) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpmtu02few.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmtu02few.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmtu02few.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpmtu02few.swift:8:13: error: cannot find type 'CGFloat' in scope\n    let rf: CGFloat = CGFloat(r) / 255.0\n            ^~~~~~~\n/tmp/tmpmtu02few.swift:9:13: error: cannot find type 'CGFloat' in scope\n    let gf: CGFloat = CGFloat(g) / 255.0\n            ^~~~~~~\n/tmp/tmpmtu02few.swift:10:13: error: cannot find type 'CGFloat' in scope\n    let bf: CGFloat = CGFloat(b) / 255.0\n            ^~~~~~~\n/tmp/tmpmtu02few.swift:12:14: error: cannot find type 'CGFloat' in scope\n    let max: CGFloat = max(rf, max(gf, bf))\n             ^~~~~~~\n/tmp/tmpmtu02few.swift:13:14: error: cannot find type 'CGFloat' in scope\n    let min: CGFloat = min(rf, min(gf, bf))\n             ^~~~~~~\n/tmp/tmpmtu02few.swift:15:15: error: cannot find type 'CGFloat' in scope\n    let diff: CGFloat = max - min\n              ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpkm95wwmn.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkm95wwmn.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkm95wwmn.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpkm95wwmn.swift:11:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * Int((g - b) / diff)\n    } else if max == g {\n        h = 60 * Int((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * Int((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max * 100)\n    }\n    v = Int(max / 255 * 100)\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpmikiqyd3.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmikiqyd3.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmikiqyd3.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, g_prime, b_prime)\n    let cmin = min(r_prime, g_prime, b_prime)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if cmax == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if cmax == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmp09d9oq8y.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp09d9oq8y.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp09d9oq8y.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp09d9oq8y.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h = 0.0\n    let s = 0.0\n    let v = 0.0\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else if max == b {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - min / max\n    }\n    \n    v = max\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp9y70giom.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9y70giom.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9y70giom.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9y70giom.swift:16:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 0\n        ^\n/tmp/tmp9y70giom.swift:11:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp9y70giom.swift:18:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (g - b) / (max - min)\n        ^\n/tmp/tmp9y70giom.swift:11:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp9y70giom.swift:20:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (b - r) / (max - min) + 120\n        ^\n/tmp/tmp9y70giom.swift:11:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp9y70giom.swift:22:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (r - g) / (max - min) + 240\n        ^\n/tmp/tmp9y70giom.swift:11:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp9y70giom.swift:26:9: error: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmpy5t9xs_7.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpy5t9xs_7.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpy5t9xs_7.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpy5t9xs_7.swift:13:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmpy5t9xs_7.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmpy5t9xs_7.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpy5t9xs_7.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpy5t9xs_7.swift:26:19: error: cannot convert value of type 'Float' to expected element type 'Double'\n    return [h, s, v]\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta).truncatingRemainder(dividingBy: 6))\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpuskfbaxp.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuskfbaxp.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuskfbaxp.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Float(r) / 255\n    let g_prime = Float(g) / 255\n    let b_prime = Float(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if c_max == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123485,
      "stdout": "",
      "stderr": "/tmp/tmpdhupenu_.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdhupenu_.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdhupenu_.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpdhupenu_.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    \n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    \n    v = max\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpjcu2zj6c.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjcu2zj6c.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjcu2zj6c.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123483,
      "stdout": "",
      "stderr": "/tmp/tmpjj24frui.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjj24frui.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjj24frui.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpjj24frui.swift:16:16: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((g - b) / diff)\n            ~~~^~~~~~~~~~~~~~~~~~\n            Double(              )\n/tmp/tmpjj24frui.swift:18:35: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((b - r) / diff) + 120\n            ~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Double(                    )\n/tmp/tmpjj24frui.swift:20:35: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((r - g) / diff) + 240\n            ~~~~~~~~~~~~~~~~~~~~~~^~~~~\n            Double(                    )\n/tmp/tmpjj24frui.swift:25:15: error: cannot assign value of type 'Float' to type 'Double'\n        s = 1 - (min / max)\n            ~~^~~~~~~~~~~~~\n            Double(        )\n/tmp/tmpjj24frui.swift:27:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n\n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n\n    let d = max - min\n\n    if max != 0 {\n        s = d / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n\n    if r == max {\n        h = (g - b) / d\n    } else if g == max {\n        h = 2 + (b - r) / d\n    } else {\n        h = 4 + (r - g) / d\n    }\n\n    h *= 60\n\n    if h < 0 {\n        h += 360\n    }\n\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpkx06o5f1.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkx06o5f1.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkx06o5f1.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var rd: Double = Double(r) / 255.0\n    var gd: Double = Double(g) / 255.0\n    var bd: Double = Double(b) / 255.0\n    var max: Double = max(rd, gd, bd)\n    var min: Double = min(rd, gd, bd)\n    var diff: Double = max - min\n    if max == min {\n        h = 0\n    } else if max == rd {\n        h = 60 * (gd - bd) / diff\n    } else if max == gd {\n        h = 60 * (bd - rd) / diff + 120\n    } else if max == bd {\n        h = 60 * (rd - gd) / diff + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpztcn550e.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpztcn550e.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpztcn550e.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpztcn550e.swift:7:9: warning: variable 'rd' was never mutated; consider changing to 'let' constant\n    var rd: Double = Double(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpztcn550e.swift:8:9: warning: variable 'gd' was never mutated; consider changing to 'let' constant\n    var gd: Double = Double(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpztcn550e.swift:9:9: warning: variable 'bd' was never mutated; consider changing to 'let' constant\n    var bd: Double = Double(b) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpztcn550e.swift:10:9: warning: variable 'max' was never mutated; consider changing to 'let' constant\n    var max: Double = max(rd, gd, bd)\n    ~~~ ^\n    let\n/tmp/tmpztcn550e.swift:11:9: warning: variable 'min' was never mutated; consider changing to 'let' constant\n    var min: Double = min(rd, gd, bd)\n    ~~~ ^\n    let\n/tmp/tmpztcn550e.swift:12:9: warning: variable 'diff' was never mutated; consider changing to 'let' constant\n    var diff: Double = max - min\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / max * 100)\n    }\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = Int((g - b) / delta)\n    } else if max == g {\n        h = Int(2 + (b - r) / delta)\n    } else if max == b {\n        h = Int(4 + (r - g) / delta)\n    }\n    h = h * 60\n    if h < 0 {\n        h = h + 360\n    }\n    v = Int(max / 255 * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpvgpz8z_z.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpvgpz8z_z.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpvgpz8z_z.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if c_max == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    v = Int(c_max * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmpx5nxznl_.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpx5nxznl_.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpx5nxznl_.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpx5nxznl_.swift:16:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //Calculate V\n    v = rgbMax\n    \n    if v == 0 {\n        return [\"h\": 0, \"s\": 0, \"v\": 0]\n    }\n    \n    //Calculate S\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if s == 0 {\n        return [\"h\": 0, \"s\": 0, \"v\": v]\n    }\n    \n    //Calculate H\n    if r == rgbMax {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if g == rgbMax {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp0bvmf6fj.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0bvmf6fj.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0bvmf6fj.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h = max - min\n    let s = max == 0 ? 0 : h / max\n    let v = max\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpagr694e_.swift:28:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpagr694e_.swift:29:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpagr694e_.swift:30:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rf = Float(r) / 255.0\n    let gf = Float(g) / 255.0\n    let bf = Float(b) / 255.0\n    let max = max(rf, max(gf, bf))\n    let min = min(rf, min(gf, bf))\n    let diff = max - min\n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = Int(60 * ((gf - bf) / diff) + 360) % 360\n    } else if max == gf {\n        h = Int(60 * ((bf - rf) / diff) + 120)\n    } else if max == bf {\n        h = Int(60 * ((rf - gf) / diff) + 240)\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max * 100)\n    }\n    v = Int(max * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpfdkk6n58.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfdkk6n58.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfdkk6n58.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r)\n    let g_ = Double(g)\n    let b_ = Double(b)\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = Int(60 * ((g_ - b_) / diff) + 360) % 360\n    } else if max_ == g_ {\n        h = Int(60 * ((b_ - r_) / diff) + 120)\n    } else if max_ == b_ {\n        h = Int(60 * ((r_ - g_) / diff) + 240)\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max_ * 100)\n    }\n    v = Int(max_ / 255 * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpnf0ac_rs.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnf0ac_rs.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnf0ac_rs.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r1: Int = r / 255\n    let g1: Int = g / 255\n    let b1: Int = b / 255\n    let cmax: Int = max(r1, g1, b1)\n    let cmin: Int = min(r1, g1, b1)\n    let diff: Int = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((g1 - b1) / diff)\n    } else if cmax == g1 {\n        h = 60 * ((b1 - r1) / diff) + 120\n    } else if cmax == b1 {\n        h = 60 * ((r1 - g1) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpmxj91j4p.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmxj91j4p.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmxj91j4p.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123488,
      "stdout": "",
      "stderr": "/tmp/tmpox2uhsx3.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpox2uhsx3.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpox2uhsx3.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpox2uhsx3.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var cmax: Int = 0\n    var cmin: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    \n    rr = r\n    gg = g\n    bb = b\n    \n    cmax = (rr > gg) ? rr : gg\n    cmax = (cmax > bb) ? cmax : bb\n    \n    cmin = (rr < gg) ? rr : gg\n    cmin = (cmin < bb) ? cmin : bb\n    \n    diff = cmax - cmin\n    v = cmax\n    \n    if (cmax != 0) {\n        s = 255 * diff / cmax\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    \n    if (rr == cmax) {\n        h = 0 + 43 * (gg - bb) / diff\n    } else if (gg == cmax) {\n        h = 85 + 43 * (bb - rr) / diff\n    } else {\n        h = 171 + 43 * (rr - gg) / diff\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpb274t7e0.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpb274t7e0.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpb274t7e0.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    let h: Float\n    let s: Float\n    let v: Float\n    \n    v = max\n    \n    let diff = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp52uxytxb.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp52uxytxb.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp52uxytxb.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((Int(g_) - Int(b_)) / Int(delta))\n    } else if cmax == g_ {\n        h = 60 * ((Int(b_) - Int(r_)) / Int(delta) + 2)\n    } else if cmax == b_ {\n        h = 60 * ((Int(r_) - Int(g_)) / Int(delta) + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpje2w5ux9.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpje2w5ux9.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpje2w5ux9.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var rr_: Int = 0\n    var gg_: Int = 0\n    var bb_: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var hh_: Int = 0\n    var ss_: Int = 0\n    var vv_: Int = 0\n    var hsv: AnyHashable = [:]\n    rr = r\n    gg = g\n    bb = b\n    if rr > gg {\n        max = rr\n    } else {\n        max = gg\n    }\n    if bb > max {\n        max = bb\n    }\n    if rr < gg {\n        min = rr\n    } else {\n        min = gg\n    }\n    if bb < min {\n        min = bb\n    }\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == rr {\n        h = 60 * (gg - bb) / diff\n    } else if max == gg {\n        h = 60 * (bb - rr) / diff + 120\n    } else if max == bb {\n        h = 60 * (rr - gg) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff * 100 / max\n    }\n    v = max * 100 / 255\n    hh = h\n    ss = s\n    vv = v\n    hh_ = hh / 60\n    ss_ = ss / 100\n    vv_ = vv / 100\n    rr_ = rr / 255\n    gg_ = gg / 255\n    bb_ = bb / 255\n    if h\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmplwomlzfa.swift:70:9: error: expected '{' after 'if' condition\n    if h\n        ^\n/tmp/tmplwomlzfa.swift:86:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplwomlzfa.swift:87:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplwomlzfa.swift:88:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmplwomlzfa.swift:22:28: error: type 'Any' cannot conform to 'Hashable'\n    var hsv: AnyHashable = [:]\n                           ^\n/tmp/tmplwomlzfa.swift:22:28: note: only concrete types such as structs, enums and classes can conform to protocols\n    var hsv: AnyHashable = [:]\n                           ^\n/tmp/tmplwomlzfa.swift:22:28: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n    var hsv: AnyHashable = [:]\n                           ^\n/tmp/tmplwomlzfa.swift:70:8: error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n    if h\n       ^\n       ( != 0)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, g, b)\n    let cmin = min(r, g, b)\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta) % 360\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax * 100\n    }\n    v = cmax * 100\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpzjcusbpa.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzjcusbpa.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzjcusbpa.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    if max_ == min_ {\n        h = 0.0\n    } else if max_ == r_ {\n        h = 60.0 * (g_ - b_) / (max_ - min_)\n    } else if max_ == g_ {\n        h = 60.0 * (b_ - r_) / (max_ - min_) + 120.0\n    } else if max_ == b_ {\n        h = 60.0 * (r_ - g_) / (max_ - min_) + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    if max_ == 0.0 {\n        s = 0.0\n    } else {\n        s = 1.0 - min_ / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpxoq398_3.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxoq398_3.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxoq398_3.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    v = rgbMax\n    \n    if (v == 0) {\n        s = 0\n        h = 0\n        return [h, s, v]\n    }\n    \n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        h = 0\n        return [h, s, v]\n    }\n    \n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp3w5jumfg.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3w5jumfg.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3w5jumfg.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    h /= 6\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmp3_vtrz56.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3_vtrz56.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3_vtrz56.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp3_vtrz56.swift:13:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmp3_vtrz56.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmp3_vtrz56.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp3_vtrz56.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp3_vtrz56.swift:26:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        case g:\n            h = (b - r) / d + 2.0\n        case b:\n            h = (r - g) / d + 4.0\n        default:\n            break\n        }\n        h /= 6.0\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmprj6tcfsk.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmprj6tcfsk.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmprj6tcfsk.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var delta: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    \n    v = max\n    delta = max - min\n    \n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmptd4kjqm4.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptd4kjqm4.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptd4kjqm4.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptd4kjqm4.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmptd4kjqm4.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmp2wolw5ar.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2wolw5ar.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2wolw5ar.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60.0 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60.0 * (b - r) / (max - min) + 120.0\n    } else if max == b {\n        h = 60.0 * (r - g) / (max - min) + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    if max == 0.0 {\n        s = 0.0\n    } else {\n        s = 1.0 - min / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmp5t19g0hi.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5t19g0hi.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5t19g0hi.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int((g_ - b_) / delta * 60)\n    } else if cmax == g_ {\n        h = Int((b_ - r_) / delta * 60 + 120)\n    } else if cmax == b_ {\n        h = Int((r_ - g_) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123480,
      "stdout": "",
      "stderr": "/tmp/tmptexrse8e.swift:58:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptexrse8e.swift:59:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptexrse8e.swift:60:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}