{
  "name": "mbpp_758_unique_sublists",
  "language": "swift",
  "prompt": "\n/// Write a function to count arrays within an array. The function should return a dictionary where every array is converted to a tuple and the value of such tuple is the number of its occurencies in the original array.\nfunc unique_sublists(list1: AnyHashable) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_sublists(list1: [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == [(1, 3) : 2, (5, 7) : 2, (13, 15, 17) : 1, (9, 11) : 1])\nassert(unique_sublists(list1: [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [(\"green\", \"orange\") : 2, (\"black\") : 1, (\"white\") : 1])\nassert(unique_sublists(list1: [[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]) == [(10, 20, 30, 40) : 1, (60, 70, 50, 50) : 1, (90, 100, 200) : 1])\nassert(unique_sublists(list1: [[\"john\"]]) == [(\"john\") : 1])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    return list1",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    var result: AnyHashable = [:]\n    for item in list1 {\n        let key = String(describing: item)\n        if result[key] == nil {\n            result[key] = 1\n        } else {\n            result[key] = result[key]! + 1\n        }\n    }\n    return result",
    "    var list = list1\n    var dict = [AnyHashable: AnyHashable]()\n    for i in 0..<list.count {\n        dict[list[i]] = dict[list[i]] ?? 0 + 1\n    }\n    return dict",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        dict[item] = (dict[item] ?? 0) + 1\n    }\n    return dict",
    "    var result = [AnyHashable: Int]()\n    for item in list1 {\n        if result[item] == nil {\n            result[item] = 1\n        } else {\n            result[item]! += 1\n        }\n    }\n    return result",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    var result = [AnyHashable: Int]()\n    for item in list1 {\n        if let item = item as? AnyHashable {\n            if let _ = result[item] {\n                result[item]! += 1\n            } else {\n                result[item] = 1\n            }\n        }\n    }\n    return result",
    "    var result = [AnyHashable: Int]()\n    for item in list1 {\n        if result[item] == nil {\n            result[item] = 1\n        } else {\n            result[item]! += 1\n        }\n    }\n    return result",
    "    var result = [AnyHashable: Int]()\n    var list = list1 as! [AnyHashable]\n    for i in list {\n        if result[i] == nil {\n            result[i] = 1\n        } else {\n            result[i]! += 1\n        }\n    }\n    return result",
    "    var result = [AnyHashable: Int]()\n    for item in list1 as! [AnyHashable] {\n        if result[item] == nil {\n            result[item] = 1\n        } else {\n            result[item] = result[item]! + 1\n        }\n    }\n    return result",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 as! [AnyHashable] {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item] = dict[item]! + 1\n        }\n    }\n    return dict",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict",
    "    var result = [AnyHashable: Int]()\n    for item in list1 as! [AnyHashable] {\n        let tuple = item as! AnyHashable\n        if result[tuple] == nil {\n            result[tuple] = 1\n        } else {\n            result[tuple] = result[tuple]! + 1\n        }\n    }\n    return result",
    "    var result = [AnyHashable: Int]()\n    for item in list1 {\n        if result[item] == nil {\n            result[item] = 1\n        } else {\n            result[item]! += 1\n        }\n    }\n    return result",
    "    var result = [AnyHashable: Int]()\n    for item in list1 {\n        if result[item] == nil {\n            result[item] = 1\n        } else {\n            result[item] = result[item]! + 1\n        }\n    }\n    return result",
    "    var dict = [AnyHashable: Int]()\n    for item in list1 {\n        if dict[item] == nil {\n            dict[item] = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    return dict"
  ]
}