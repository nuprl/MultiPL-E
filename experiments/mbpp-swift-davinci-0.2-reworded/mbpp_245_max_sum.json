{
  "name": "mbpp_245_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var max_sum = 0\n    var max_sum_left = Array(repeating: 0, count: arr.count)\n    var max_sum_right = Array(repeating: 0, count: arr.count)\n    \n    // find max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(arr[i], arr[i] + max_sum_left[i-1])\n        }\n    }\n    \n    // find max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(arr[i], arr[i] + max_sum_right[i+1])\n        }\n    }\n    \n    // find max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_",
    "    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    var left = [Int](repeating: 0, count: arr.count)\n    var right = [Int](repeating: 0, count: arr.count)\n    \n    left[0] = arr[0]\n    for i in 1..<arr.count {\n        left[i] = max(arr[i], left[i-1] + arr[i])\n    }\n    \n    right[arr.count-1] = arr[arr.count-1]\n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        right[i] = max(arr[i], right[i+1] + arr[i])\n    }\n    \n    var max_sum = Int.min\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, left[i] + right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j in (0..<i).reversed() {\n            if sum_arr.last! <= arr[j] {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum",
    "    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum += max(max_sum_left[i], max_sum_right[i]) - arr[i]\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            max_sum = max(max_sum, sum)\n            sum = 0\n            i += 1\n            j -= 1\n        }\n    }\n    max_sum = max(max_sum, sum)\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // find max sum from right to left\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        if i == arr.count-1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // find max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var maxSum = 0\n    var maxSumArr = [Int]()\n    \n    for i in 0..<arr.count {\n        var sum = 0\n        var sumArr = [Int]()\n        \n        for j in i..<arr.count {\n            sum += arr[j]\n            sumArr.append(arr[j])\n            \n            if sum > maxSum {\n                maxSum = sum\n                maxSumArr = sumArr\n            }\n        }\n    }\n    \n    print(maxSumArr)\n    \n    return maxSum",
    "    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_ending_here_so_far = max(max_sum_ending_here_so_far, max_sum_ending_here)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here_so_far)\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    max_sum_ending_here_so_far = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_ending_here_so_far = max(max_sum_ending_here_so_far, max_sum_ending_here)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here_so_far)\n    }\n    max_sum = max(max_sum, max_sum_so_far)\n    return max_sum",
    "    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(arr[i], inc[i - 1] + arr[i])\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(arr[i], dec[i + 1] + arr[i])\n    }\n    var max_sum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum",
    "    let n = arr.count\n    var inc = [Int](repeating: 0, count: n)\n    var dec = [Int](repeating: 0, count: n)\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    for i in 1..<n {\n        inc[i] = max(inc[i-1], arr[i])\n    }\n    for i in stride(from: n-2, through: 0, by: -1) {\n        dec[i] = max(dec[i+1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum = max(sum, inc[i] + dec[i] - arr[i])\n    }\n    return sum",
    "    var maxSum = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    return maxSum",
    "    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_",
    "    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum += maxSumSoFar\n    return maxSum"
  ]
}