{
  "name": "mbpp_563_extract_values",
  "language": "swift",
  "prompt": "\n/// Write a function to extract values between quotation marks from a string.\nfunc extract_values(text: String) -> [String] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_values(text: \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])\nassert(extract_values(text: \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])\nassert(extract_values(text: \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    \n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (index, character) in text.characters.enumerated() {\n        if character == \"\\\"\" {\n            if is_quoted {\n                end = index\n                values.append(text[start...end])\n                is_quoted = false\n            } else {\n                start = index\n                is_quoted = true\n            }\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(String(text[start..<end]))\n                inQuotes = false\n            } else {\n                start = text.index(after: end)\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                values.append(text.substring(with: (start+1)..<end))\n                start = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if is_quoted {\n                end = i\n                values.append(text[start..<end])\n                is_quoted = false\n            } else {\n                start = i + 1\n                is_quoted = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n        for result in results {\n            let range = result.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(error)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            if inQuotes {\n                let value = text[start..<end]\n                values.append(String(value))\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var index = 0\n    for char in text {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                values.append(text[start...end])\n                start = 0\n                end = 0\n            }\n        }\n        index += 1\n    }\n    return values",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var is_quoted = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if is_quoted {\n                result.append(text.substringWithRange(start..<end))\n            }\n            is_quoted = !is_quoted\n            start = end.successor()\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = text.index(after: end)\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var in_quotes = false\n    for (i, c) in text.characters.enumerate() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.startIndex.advancedBy(i)\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.startIndex.advancedBy(i + 1)\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(String(text[start..<end]))\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(before: text.characters.index(after: start))\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        }\n        start = text.characters.index(after: start)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if is_quoted {\n                end = index\n                result.append(text[start...end])\n                is_quoted = false\n            } else {\n                start = index\n                is_quoted = true\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                values.append(text[text.index(text.startIndex, offsetBy: start)..<text.index(text.startIndex, offsetBy: end)])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var inQuote = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if inQuote {\n                end = i\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = i + 1\n                inQuote = true\n            }\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var current_value = \"\"\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(current_value)\n                current_value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            current_value.append(c)\n        }\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if in_quotes {\n                end = index\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = index + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for character in text {\n        if character == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            inQuotes = !inQuotes\n            if inQuotes {\n                start = text.characters.index(after: end)\n            } else {\n                result.append(text.substring(with: start..<end))\n            }\n        }\n        end = text.characters.index(after: end)\n    }\n    \n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                result.append(text[start..<end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var start_index = text.startIndex\n    var end_index = text.startIndex\n    var in_quotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if in_quotes {\n                end_index = text.index(text.startIndex, offsetBy: index)\n                values.append(String(text[start_index..<end_index]))\n                in_quotes = false\n            } else {\n                start_index = text.index(text.startIndex, offsetBy: index + 1)\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    \n    return result",
    "    var result: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var inQuotes = false\n    for (index, char) in text.enumerate() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                endIndex = text.startIndex.advancedBy(index)\n                result.append(text.substringWithRange(startIndex..<endIndex))\n                inQuotes = false\n            } else {\n                startIndex = text.startIndex.advancedBy(index + 1)\n                inQuotes = true\n            }\n        }\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matchesInString(text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        let range = $0.rangeAtIndex(1)\n        return (text as NSString).substringWithRange(range)\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index + 1\n            } else {\n                end = index\n                values.append(text[start..<end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            in_quote = !in_quote\n            if in_quote {\n                start = text.characters.index(after: end)\n            } else {\n                values.append(text[start..<end])\n            }\n        }\n        end = text.characters.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                values.append(text[start..<end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var is_quotation = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if is_quotation {\n                end = index\n                values.append(text[start...end])\n                is_quotation = false\n            } else {\n                start = index\n                is_quotation = true\n            }\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = text.index(after: end)\n                in_quotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        result.append(value)\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if in_quotes {\n                end = index\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = index + 1\n                in_quotes = true\n            }\n        }\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    while let end = text.range(of: \"\\\"\", range: start..<text.endIndex)?.upperBound {\n        start = text.range(of: \"\\\"\", range: end..<text.endIndex)?.upperBound ?? text.endIndex\n        result.append(String(text[end..<start]))\n    }\n    return result",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            if let swiftRange = Range(range, in: text) {\n                values.append(String(text[swiftRange]))\n            }\n        }\n    } catch {\n        print(\"invalid regex: \\(error.localizedDescription)\")\n    }\n    return values",
    "    var values: [String] = []\n    var start = false\n    var value = \"\"\n    for char in text {\n        if char == \"\\\"\" {\n            if start {\n                values.append(value)\n                value = \"\"\n            }\n            start = !start\n        } else if start {\n            value.append(char)\n        }\n    }\n    return values",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        if let swiftRange = Range(range, in: text) {\n            values.append(String(text[swiftRange]))\n        }\n    }\n    return values",
    "    var result = [String]()\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var inQuotes = false\n    for (index, char) in text.enumerate() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                endIndex = text.startIndex.advancedBy(index)\n                result.append(text[startIndex..<endIndex])\n                inQuotes = false\n            } else {\n                startIndex = text.startIndex.advancedBy(index + 1)\n                inQuotes = true\n            }\n        }\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = end.successor()\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if in_quotes {\n                end = index\n                values.append(String(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)]))\n                in_quotes = false\n            } else {\n                start = index\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        let range = $0.rangeAt(1)\n        return (text as NSString).substring(with: range)\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                values.append(text[start+1..<end])\n                start = 0\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = text.index(after: end)\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var index = 0\n    while index < text.count {\n        let char = text[text.index(text.startIndex, offsetBy: index)]\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                values.append(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)])\n                start = 0\n            }\n        }\n        index += 1\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else { return [] }\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                inQuotes = true\n                start = end\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var index = text.startIndex\n    var inQuotes = false\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if inQuotes {\n                endIndex = index\n                values.append(text[startIndex..<endIndex])\n                inQuotes = false\n            } else {\n                startIndex = index\n                inQuotes = true\n            }\n        }\n        index = text.index(after: index)\n    }\n    return values",
    "    var values: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var result: [String] = []\n    var startIndex = text.startIndex\n    var endIndex = text.startIndex\n    var isInQuotes = false\n    \n    for index in text.indices {\n        if text[index] == \"\\\"\" {\n            if isInQuotes {\n                isInQuotes = false\n                endIndex = index\n                result.append(String(text[startIndex..<endIndex]))\n            } else {\n                isInQuotes = true\n                startIndex = index\n            }\n        }\n    }\n    \n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var result = [String]()\n    var start = 0\n    var end = 0\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                result.append(String(text[text.index(text.startIndex, offsetBy: start+1)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n            }\n        }\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerate() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = end\n                inQuote = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                in_quotes = false\n                values.append(text[start..<end])\n            } else {\n                in_quotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(after: start)\n                values.append(text.substring(with: start..<end))\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.characters.index(after: start)\n            }\n        } else if in_quotes {\n            end = text.characters.index(after: start)\n        } else {\n            start = text.characters.index(after: start)\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text.substringWithRange(Range(start: start, end: end)))\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range, in: text)!\n        return String(text[range])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    return result",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    for i in 0..<text.count {\n        let index = text.index(text.startIndex, offsetBy: i)\n        if text[index] == \"\\\"\" {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                values.append(String(text[text.index(text.startIndex, offsetBy: start)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n                end = 0\n            }\n        }\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matchesInString(text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        (text as NSString).substringWithRange($0.rangeAtIndex(1))\n    }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerate() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var index = text.startIndex\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if start == end {\n                start = index\n            } else {\n                end = index\n                result.append(text[start..<end])\n                start = text.endIndex\n                end = text.endIndex\n            }\n        }\n        index = index.successor()\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = index + 1\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.characters.count))\n    return results.map {\n        let range = $0.rangeAt(1)\n        return (text as NSString).substring(with: range)\n    }",
    "    var values: [String] = []\n    var current_value = \"\"\n    var inside_quotes = false\n    for char in text {\n        if char == \"\\\"\" {\n            inside_quotes = !inside_quotes\n        } else if inside_quotes {\n            current_value.append(char)\n        } else if char == \",\" {\n            values.append(current_value)\n            current_value = \"\"\n        }\n    }\n    values.append(current_value)\n    return values",
    "    var values: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    } catch {\n        print(error)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = end\n                in_quotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n            }\n            inQuote = !inQuote\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    return result",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var is_quoted = false\n    for (index, char) in text.enumerated() {\n        if char == \"\\\"\" {\n            if is_quoted {\n                end = index\n                values.append(text[start..<end])\n                is_quoted = false\n            } else {\n                start = index + 1\n                is_quoted = true\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.endIndex\n    var i = text.startIndex\n    while i < text.endIndex {\n        if text[i] == \"\\\"\" {\n            if start == text.startIndex {\n                start = text.index(after: i)\n            } else {\n                end = text.index(before: i)\n                result.append(String(text[start..<end]))\n                start = text.endIndex\n            }\n        }\n        i = text.index(after: i)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = end\n                inQuotes = true\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                values.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"(\\\"(.*?)\\\")\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 2), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.lowerBound)\n        let end = text.index(text.startIndex, offsetBy: rangeBounds.upperBound)\n        return String(text[start..<end])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return results.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values: [String] = []\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = index + 1\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    var result = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        result.append(String(text[range]))\n    }\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inside = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inside {\n                result.append(text[start..<end])\n                inside = false\n            } else {\n                start = end\n                inside = true\n            }\n        }\n        end = end.advancedBy(1)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var result: [String] = []\n    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        let value = (text as NSString).substring(with: range)\n        result.append(value)\n    }\n    return result",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    while start < text.endIndex {\n        if text[start] == \"\\\"\" {\n            start = text.index(after: start)\n            end = start\n            while end < text.endIndex && text[end] != \"\\\"\" {\n                end = text.index(after: end)\n            }\n            if end < text.endIndex {\n                values.append(String(text[start..<end]))\n                start = text.index(after: end)\n            }\n        } else {\n            start = text.index(after: start)\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var isInQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if isInQuotes {\n                result.append(String(text[start..<end]))\n                isInQuotes = false\n            } else {\n                start = end\n                isInQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return results.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                in_quotes = false\n                values.append(text[start..<end])\n            } else {\n                in_quotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return values",
    "    var result: [String] = []\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        result.append(String(text[range]))\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    do {\n        let regex = try NSRegularExpression(pattern: pattern, options: [])\n        let results = regex.matches(in: text,\n                                    range: NSRange(text.startIndex..., in: text))\n        return results.map {\n            String(text[Range($0.range, in: text)!])\n        }\n    } catch let error {\n        print(\"invalid regex: \\(error.localizedDescription)\")\n        return []\n    }",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inside = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inside {\n                result.append(text[start..<end])\n            }\n            inside = !inside\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                result.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var result: [String] = []\n    var in_quotes = false\n    var current_value = \"\"\n    for c in text {\n        if c == \"\\\"\" {\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            current_value.append(c)\n        } else if c == \",\" {\n            result.append(current_value)\n            current_value = \"\"\n        }\n    }\n    result.append(current_value)\n    return result",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for char in text.characters {\n        if char == \"\\\"\" {\n            if inQuote {\n                end = text.index(before: text.endIndex)\n                values.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = text.index(after: text.startIndex)\n                inQuote = true\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    let pattern = \"\\\"(.*?)\\\"\"\n    if let regex = try? NSRegularExpression(pattern: pattern, options: []) {\n        let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n        for match in matches {\n            let range = match.range(at: 1)\n            let value = (text as NSString).substring(with: range)\n            values.append(value)\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = text.characters.index(after: start)\n                result.append(text.substring(with: start..<end))\n                in_quotes = false\n            } else {\n                start = text.characters.index(after: start)\n                in_quotes = true\n            }\n        }\n        start = text.characters.index(after: start)\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var inQuotes = false\n    for (index, char) in text.characters.enumerated() {\n        if char == \"\\\"\" {\n            if inQuotes {\n                end = index\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = index + 1\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = text.index(after: end)\n                inQuotes = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values: [String] = []\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 1)\n        if let swiftRange = Range(range, in: text) {\n            values.append(String(text[swiftRange]))\n        }\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            inQuotes = !inQuotes\n            if inQuotes {\n                start = text.characters.index(after: end)\n            } else {\n                values.append(text.substring(with: start..<end))\n            }\n        }\n        end = text.characters.index(after: end)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let rangeBounds = $0.range(at: 1)\n        let start = text.index(text.startIndex, offsetBy: rangeBounds.location)\n        let end = text.index(start, offsetBy: rangeBounds.length)\n        return String(text[start..<end])\n    }",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = end\n            }\n        }\n        end = end.successor()\n    }\n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var index = text.startIndex\n    var inQuote = false\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if inQuote {\n                end = index\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = index.successor()\n                inQuote = true\n            }\n        }\n        index = index.successor()\n    }\n    return result",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text {\n        if c == \"\\\"\" {\n            in_quotes = !in_quotes\n            if !in_quotes {\n                values.append(text[start..<end])\n            }\n        } else if in_quotes {\n            end = text.index(after: end)\n        } else if c == \",\" {\n            start = text.index(after: end)\n        }\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        let range = Range($0.range(at: 1), in: text)!\n        return String(text[range])\n    }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map {\n        String(text[Range($0.range(at: 1), in: text)!])\n    }",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.count))\n    return results.map {\n        String(text[Range($0.range, in: text)!])\n    }",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.endIndex\n    var index = text.startIndex\n    var in_quotes = false\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if in_quotes {\n                end = index\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = index.advancedBy(1)\n                in_quotes = true\n            }\n        }\n        index = index.advancedBy(1)\n    }\n    return values",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = Range(match.range(at: 1), in: text)!\n        values.append(String(text[range]))\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    while start != text.endIndex {\n        if text[start] == \"\\\"\" {\n            in_quotes = !in_quotes\n            if in_quotes {\n                end = start\n            } else {\n                result.append(text[text.index(after: end)..<start])\n            }\n        }\n        start = text.index(after: start)\n    }\n    return result",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var index = 0\n    for character in text {\n        if character == \"\\\"\" {\n            if start == 0 {\n                start = index\n            } else {\n                end = index\n                values.append(String(text[text.index(text.startIndex, offsetBy: start + 1)..<text.index(text.startIndex, offsetBy: end)]))\n                start = 0\n                end = 0\n            }\n        }\n        index += 1\n    }\n    return values",
    "    var values: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var inQuotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if inQuotes {\n                end = text.index(text.startIndex, offsetBy: i)\n                values.append(text[start..<end])\n                inQuotes = false\n            } else {\n                start = text.index(text.startIndex, offsetBy: i + 1)\n                inQuotes = true\n            }\n        }\n    }\n    return values",
    "    var values = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if inQuotes {\n                values.append(text[start..<end])\n            }\n            inQuotes = !inQuotes\n            start = text.index(after: end)\n        }\n        end = text.index(after: end)\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.endIndex\n    var index = text.startIndex\n    while index < text.endIndex {\n        if text[index] == \"\\\"\" {\n            if start == text.startIndex {\n                start = index.successor()\n            } else {\n                end = index\n                result.append(text.substringWithRange(Range(start: start, end: end)))\n                start = text.endIndex\n            }\n        }\n        index = index.successor()\n    }\n    return result",
    "    var result = [String]()\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    \n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n            }\n            in_quotes = !in_quotes\n            start = end.advancedBy(1)\n        }\n        end = end.advancedBy(1)\n    }\n    \n    return result",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var inQuote = false\n    for c in text {\n        if c == \"\\\"\" {\n            if inQuote {\n                result.append(text[start..<end])\n                inQuote = false\n            } else {\n                start = text.index(after: end)\n                inQuote = true\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result",
    "    var values: [String] = []\n    let pattern = \"\\\"[^\\\"]+\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    for match in matches {\n        let range = match.range(at: 0)\n        let value = (text as NSString).substring(with: range)\n        values.append(value)\n    }\n    return values",
    "    let regex = try! NSRegularExpression(pattern: \"\\\"(.*?)\\\"\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    let pattern = \"\\\"(.*?)\\\"\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.map { String(text[Range($0.range, in: text)!]) }",
    "    var values = [String]()\n    var start = 0\n    var end = 0\n    var in_quotes = false\n    for (i, c) in text.characters.enumerated() {\n        if c == \"\\\"\" {\n            if in_quotes {\n                end = i\n                values.append(text[start..<end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n    return values",
    "    var result: [String] = []\n    var start = text.startIndex\n    var end = text.startIndex\n    var in_quotes = false\n    for c in text.characters {\n        if c == \"\\\"\" {\n            if in_quotes {\n                result.append(text[start..<end])\n                in_quotes = false\n            } else {\n                in_quotes = true\n                start = text.index(after: end)\n            }\n        }\n        end = text.index(after: end)\n    }\n    return result"
  ]
}