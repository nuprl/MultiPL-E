{
  "name": "mbpp_452_loss_amount",
  "language": "swift",
  "prompt": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    var loss = 0\n    if actual_cost > sale_amount {\n        loss = actual_cost - sale_amount\n    }\n    return loss\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmpiikjl6rr/tmpiikjl6rr.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad417cafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad4179a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad4179a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad4179a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiikjl6rr                        0x000055fb25a031ba <unavailable> + 4538\n5    libc.so.6                          0x00002ad417e9b460 __libc_start_main + 245\n6    tmpiikjl6rr                        0x000055fb25a02e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    let loss = actual_cost - sale_amount\n    if loss > 0 {\n        return loss\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp6kns8fxc/tmp6kns8fxc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b760860dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7608304b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7608304988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76083037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6kns8fxc                        0x000056161a89d1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b76087f9460 __libc_start_main + 245\n6    tmp6kns8fxc                        0x000056161a89ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    var loss = actual_cost - sale_amount\n    if loss < 0 {\n        return 0\n    }\n    return loss\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp4dcu5au6/tmp4dcu5au6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b292dd14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b292da0bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b292da0b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b292da0a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4dcu5au6                        0x0000557f024d71ba <unavailable> + 4538\n5    libc.so.6                          0x00002b292df00460 __libc_start_main + 245\n6    tmp4dcu5au6                        0x0000557f024d6e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if sale_amount < actual_cost {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp0fuwz3dl/tmp0fuwz3dl.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49a55f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49a52e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49a52e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49a52e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0fuwz3dl                        0x0000561e6b61c1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b49a57dd460 __libc_start_main + 245\n6    tmp0fuwz3dl                        0x0000561e6b61be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    return actual_cost - sale_amount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp6hanx9l0/tmp6hanx9l0.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6339899c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6339590b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6339590988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b633958f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6hanx9l0                        0x000055a983c211ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6339a85460 __libc_start_main + 245\n6    tmp6hanx9l0                        0x000055a983c20e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    var loss: Int = 0\n    if actual_cost > sale_amount {\n        loss = actual_cost - sale_amount\n    }\n    return loss\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp9dvto07q/tmp9dvto07q.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f5ccecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f5c9e3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f5c9e3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f5c9e27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9dvto07q                        0x000055818fec51ba <unavailable> + 4538\n5    libc.so.6                          0x00002b5f5ced8460 __libc_start_main + 245\n6    tmp9dvto07q                        0x000055818fec4e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    let loss = actual_cost - sale_amount\n    if loss > 0 {\n        return loss\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp6kns8fxc/tmp6kns8fxc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b760860dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7608304b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7608304988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76083037b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6kns8fxc                        0x000056161a89d1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b76087f9460 __libc_start_main + 245\n6    tmp6kns8fxc                        0x000056161a89ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    var loss = 0\n    if actual_cost > sale_amount {\n        loss = actual_cost - sale_amount\n    }\n    return loss\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmpiikjl6rr/tmpiikjl6rr.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad417cafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad4179a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad4179a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad4179a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiikjl6rr                        0x000055fb25a031ba <unavailable> + 4538\n5    libc.so.6                          0x00002ad417e9b460 __libc_start_main + 245\n6    tmpiikjl6rr                        0x000055fb25a02e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    var loss = actual_cost - sale_amount\n    if loss > 0 {\n        return loss\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp716tnfnh/tmp716tnfnh.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac7847dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac7844d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac7844d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac7844d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp716tnfnh                        0x000055b5816ee1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ac7849c7460 __libc_start_main + 245\n6    tmp716tnfnh                        0x000055b5816ede69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmpqxo00jqd/tmpqxo00jqd.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfe43fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfe40f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfe40f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfe40f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqxo00jqd                        0x00005643d90eb1ba <unavailable> + 4538\n5    libc.so.6                          0x00002adfe45e6460 __libc_start_main + 245\n6    tmpqxo00jqd                        0x00005643d90eae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    return actual_cost - sale_amount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "tmp6hanx9l0/tmp6hanx9l0.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6339899c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6339590b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6339590988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b633958f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6hanx9l0                        0x000055a983c211ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6339a85460 __libc_start_main + 245\n6    tmp6hanx9l0                        0x000055a983c20e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmptnj78m1h/tmptnj78m1h.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c3b05cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c3ad53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c3ad53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c3ad527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptnj78m1h                        0x00005605c837e1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b9c3b248460 __libc_start_main + 245\n6    tmptnj78m1h                        0x00005605c837de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n    if actual_cost > sale_amount {\n        return actual_cost - sale_amount\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)\nassert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)\nassert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)",
      "timestamp": 1665510178,
      "stdout": "",
      "stderr": "tmp44249lb2/tmp44249lb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d1f420c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d1f117b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d1f117988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d1f1167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44249lb2                        0x0000562c93a4f1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b6d1f60c460 __libc_start_main + 245\n6    tmp44249lb2                        0x0000562c93a4ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}