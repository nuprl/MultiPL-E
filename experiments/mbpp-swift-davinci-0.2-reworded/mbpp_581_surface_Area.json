{
  "name": "mbpp_581_surface_Area",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the surface area of a square swiftramid with a given base edge and height.\nfunc surface_Area(b: Int, s: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surface_Area(b: 3, s: 4) == 33)\nassert(surface_Area(b: 4, s: 5) == 56)\nassert(surface_Area(b: 1, s: 2) == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 4 * b * s",
    "    return b * s + b * b",
    "    return (b * b) + (b * s)",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (4 * b * s)",
    "    let area = (b * b) + (4 * b * s)\n    return area",
    "    return (b * b) + (2 * b * s)",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return b * s + b * b",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return b * s",
    "    return b * s + b * b",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * b) + (4 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return b * s * 4",
    "    return b * s",
    "    return b * s",
    "    return b * b + 4 * b * s",
    "    return b * b + b * s * 4",
    "    return b * s",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + b * s",
    "    return b * s",
    "    return b * s * 4",
    "    return (b * s) + (b * b)",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + b * s * 4",
    "    return (b * b) + (b * s)",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return 2 * (b * s) + (b * b)",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (b * s * 4)",
    "    return b * b + 2 * b * s",
    "    return b * b + b * s * 4",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 4 * b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return (b * b) + (4 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return (b * s) + (b * b)",
    "    return b*b + 2*b*s",
    "    return (b * s) + (b * b)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (b * s)",
    "    return (b * s) + (b * b)",
    "    return b * b + b * s * 4",
    "    return (b * b) + (b * s)",
    "    return b * b + b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 4 * b * s",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (b * s)",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return b * s * 4",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + b * s",
    "    return b * b + b * s",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return (b * s) + (b * b)",
    "    return b * b + 2 * b * s",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return b * s",
    "    return b * b + 4 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (b * s)",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (4 * b * s)",
    "    return (b * b) + (b * s)",
    "    return (b * b) + (b * s)",
    "    return b * s",
    "    return b * s * 4",
    "    return (b * b) + (2 * b * s)",
    "    return (b * s) + (b * b)",
    "    return b * s + b * b",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (4 * b * s)",
    "    return b * b + 4 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s + b * b",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 4 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (b * s * 4)",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    let area = (b * b) + (b * s)\n    return area",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return (b * s) + (b * b)",
    "    return b * b + 4 * b * s",
    "    return (b * s) + (b * b)",
    "    return (b * b) + (b * s)",
    "    return b * b + 2 * b * s",
    "    return b * b + b * s * 4",
    "    return (b * s) + (b * b)",
    "    return b * b + b * s",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * b + 2 * b * s",
    "    return b * b + 2 * b * s",
    "    return b * s + b * b",
    "    return (b * b) + (b * s)",
    "    return b * s",
    "    return (b * b) + (2 * b * s)",
    "    return b * s",
    "    return b * b + b * s",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (4 * b * s)",
    "    return (b * b) + (4 * (b * s))",
    "    return b * b + 2 * b * s",
    "    return b * s",
    "    return (b * s) + (b * b)",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (2 * b * s)",
    "    return (b * b) + (b * s)",
    "    return b * b + 2 * b * s",
    "    return b * b + b * s * 4",
    "    return b * b + 2 * b * s",
    "    return (b * b) + (2 * b * s)"
  ]
}