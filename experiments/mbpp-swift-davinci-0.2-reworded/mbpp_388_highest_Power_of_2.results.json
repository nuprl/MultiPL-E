{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var x = n\n    x |= (x >> 1)\n    x |= (x >> 2)\n    x |= (x >> 4)\n    x |= (x >> 8)\n    x |= (x >> 16)\n    return x - (x >> 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmp09qezr2k/tmp09qezr2k.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a7ff94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a7fc8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a7fc8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a7fc8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp09qezr2k                        0x0000563844ae8335 <unavailable> + 4917\n5    libc.so.6                          0x00002b3a80180460 __libc_start_main + 245\n6    tmp09qezr2k                        0x0000563844ae7fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        if i == 1 {\n            result = 1\n        } else if i == 2 {\n            result = 2\n        } else if i % 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpm8jamsee/tmpm8jamsee.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c0d3d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c0d0cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c0d0cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c0d0cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm8jamsee                        0x00005579a147e335 <unavailable> + 4917\n5    libc.so.6                          0x00002b2c0d5c2460 __libc_start_main + 245\n6    tmpm8jamsee                        0x00005579a147dfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result = result * 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpz8c743eo/tmpz8c743eo.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3cae758c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3cae44fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3cae44f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3cae44e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz8c743eo                        0x000055f7830d6343 <unavailable> + 4931\n5    libc.so.6                          0x00002b3cae944460 __libc_start_main + 245\n6    tmpz8c743eo                        0x000055f7830d5ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = n\n    var count = 0\n    while i > 1 {\n        i = i / 2\n        count += 1\n    }\n    return Int(pow(2.0, Double(count)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "/tmp/tmpa8xf7y41.swift:10:16: error: cannot find 'pow' in scope\n    return Int(pow(2.0, Double(count)))\n               ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 0\n    var result = 1\n    while result <= n {\n        result = result * 2\n        i += 1\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 0\n    while (1 << i) <= n {\n        i += 1\n    }\n    return 1 << (i - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var x = 1\n    while x <= n {\n        x *= 2\n    }\n    return x / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmp_sxwvxak/tmp_sxwvxak.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad3522c3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad351fbab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad351fba988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad351fb97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_sxwvxak                        0x00005570e3583343 <unavailable> + 4931\n5    libc.so.6                          0x00002ad3524af460 __libc_start_main + 245\n6    tmp_sxwvxak                        0x00005570e3582ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmpv0h2cu0m/tmpv0h2cu0m.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0924ca6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b092499db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b092499d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b092499c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv0h2cu0m                        0x000055f71d934343 <unavailable> + 4931\n5    libc.so.6                          0x00002b0924e92460 __libc_start_main + 245\n6    tmpv0h2cu0m                        0x000055f71d933ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var p = 1\n    while p <= n {\n        p *= 2\n    }\n    return p / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    while power <= n {\n        power *= 2\n    }\n    return power/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 0\n    var result = 1\n    while result <= n {\n        result = result * 2\n        power += 1\n    }\n    return power - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpr8lf65ki/tmpr8lf65ki.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4858938c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485862fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b485862f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b485862e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr8lf65ki                        0x000055fedac621b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b4858b24460 __libc_start_main + 245\n6    tmpr8lf65ki                        0x000055fedac61e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    while power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var p = 1\n    while p <= n {\n        p *= 2\n    }\n    return p/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    while power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = n\n    while i > 1 {\n        i = i / 2\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmp3h5rkaaq/tmp3h5rkaaq.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd9a39bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd9a092b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd9a092988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd9a0917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3h5rkaaq                        0x0000561aef839245 <unavailable> + 4677\n5    libc.so.6                          0x00002abd9a587460 __libc_start_main + 245\n6    tmp3h5rkaaq                        0x0000561aef838ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var x = 1\n    while x <= n {\n        x *= 2\n    }\n    return x/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while (i < n) {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmps_tetvx8/tmps_tetvx8.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b655eb23c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b655e81ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b655e81a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b655e8197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps_tetvx8                        0x00005644d7892343 <unavailable> + 4931\n5    libc.so.6                          0x00002b655ed0f460 __libc_start_main + 245\n6    tmps_tetvx8                        0x00005644d7891ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmp09qezr2k/tmp09qezr2k.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a7ff94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a7fc8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a7fc8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a7fc8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp09qezr2k                        0x0000563844ae8335 <unavailable> + 4917\n5    libc.so.6                          0x00002b3a80180460 __libc_start_main + 245\n6    tmp09qezr2k                        0x0000563844ae7fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 0\n    var power = 1\n    while power <= n {\n        i += 1\n        power *= 2\n    }\n    return power / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    var result = 1\n    while result <= n {\n        result = power * 2\n        power = result\n    }\n    return power / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 0\n    while (n > (1 << i)) {\n        i += 1\n    }\n    return (1 << (i - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmp1p1o37to/tmp1p1o37to.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1770a62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1770759b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1770759988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17707587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1p1o37to                        0x000055c58cc5a2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b1770c4e460 __libc_start_main + 245\n6    tmp1p1o37to                        0x000055c58cc59e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 0\n    while (1 << i) <= n {\n        i += 1\n    }\n    return (1 << (i - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 0\n    var result = 1\n    while result <= n {\n        result = result * 2\n        power += 1\n    }\n    return power - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "tmpr8lf65ki/tmpr8lf65ki.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4858938c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b485862fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b485862f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b485862e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr8lf65ki                        0x000055fedac621b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b4858b24460 __libc_start_main + 245\n6    tmpr8lf65ki                        0x000055fedac61e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpf360_hws/tmpf360_hws.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae32d220c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32cf17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32cf17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32cf167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf360_hws                        0x000055aa51463343 <unavailable> + 4931\n5    libc.so.6                          0x00002ae32d40c460 __libc_start_main + 245\n6    tmpf360_hws                        0x000055aa51462ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpuhwjwl78/tmpuhwjwl78.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6b703e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6b700dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6b700db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6b700da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuhwjwl78                        0x000055e7abab5343 <unavailable> + 4931\n5    libc.so.6                          0x00002b6b705d0460 __libc_start_main + 245\n6    tmpuhwjwl78                        0x000055e7abab4ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result = result * 2\n    }\n    return result/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        if i % 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmp09qezr2k/tmp09qezr2k.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a7ff94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a7fc8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a7fc8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a7fc8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp09qezr2k                        0x0000563844ae8335 <unavailable> + 4917\n5    libc.so.6                          0x00002b3a80180460 __libc_start_main + 245\n6    tmp09qezr2k                        0x0000563844ae7fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i < n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "tmpsot_rpth/tmpsot_rpth.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abc7c68fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abc7c386b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abc7c386988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abc7c3857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsot_rpth                        0x000055d98b30f343 <unavailable> + 4931\n5    libc.so.6                          0x00002abc7c87b460 __libc_start_main + 245\n6    tmpsot_rpth                        0x000055d98b30eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    while power <= n {\n        power *= 2\n    }\n    return power / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var power = 1\n    while power <= n {\n        power *= 2\n    }\n    return power/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123434,
      "stdout": "",
      "stderr": "tmpv0h2cu0m/tmpv0h2cu0m.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0924ca6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b092499db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b092499d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b092499c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv0h2cu0m                        0x000055f71d934343 <unavailable> + 4931\n5    libc.so.6                          0x00002b0924e92460 __libc_start_main + 245\n6    tmpv0h2cu0m                        0x000055f71d933ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var i = 1\n    while i <= n {\n        i = i * 2\n    }\n    return i / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n: Int) -> Int {\n    var result = 1\n    while result <= n {\n        result *= 2\n    }\n    return result/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(highest_Power_of_2(n: 10) == 8)\nassert(highest_Power_of_2(n: 19) == 16)\nassert(highest_Power_of_2(n: 32) == 32)",
      "timestamp": 1666123433,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}