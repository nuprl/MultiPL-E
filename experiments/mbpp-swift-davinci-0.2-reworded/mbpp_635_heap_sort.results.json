{
  "name": "mbpp_635_heap_sort",
  "language": "swift",
  "prompt": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpgs3kobi2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    var heap = Heap<Int>(array: array, sort: >)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpj7l6mtw3.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(array: array, sort: >)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpjreodhpu.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    for i in (0..<array.count).reversed() {\n        array.swapAt(0, i)\n        heapify(array: &array, n: i, i: 0)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmphazk2cgc.swift:7:9: error: cannot find 'heapify' in scope\n        heapify(array: &array, n: i, i: 0)\n        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    \n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    \n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpf1rd2e_c.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp99jkx8vc.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpx0a8gv9l.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpp0ntoql_.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    var heap = Heap(array: array, sort: <)\n    array.removeAll()\n    while !heap.isEmpty {\n        array.append(heap.remove()!)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpgqskwxsr.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: array, sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxm6xt095.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.extract_max()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp3vmlunrw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable, order: <)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7m8y2glw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable, order: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpas4vf1gq.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpfb9_rk4m.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp3u3h0alu.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpkorf0grk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxm6xt095.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "tmpxtm82h1_/tmpxtm82h1_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3984d30c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3984a27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3984a27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3984a267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxtm82h1_                        0x000055cd2be9e43c <unavailable> + 5180\n5    libc.so.6                          0x00002b3984f1c460 __libc_start_main + 245\n6    tmpxtm82h1_                        0x000055cd2be9dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var iterable = iterable\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    for i in 0..<iterable.count {\n        iterable[i] = heap.remove()!\n    }\n    return iterable\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpv8t_3p74.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    build_max_heap(&array)\n    for i in (1...array.count).reversed() {\n        array.swapAt(0, i)\n        max_heapify(&array, i, 0)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpmrsw9i0c.swift:5:5: error: cannot find 'build_max_heap' in scope\n    build_max_heap(&array)\n    ^~~~~~~~~~~~~~\n/tmp/tmpmrsw9i0c.swift:8:9: error: cannot find 'max_heapify' in scope\n        max_heapify(&array, i, 0)\n        ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpas4vf1gq.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp0utmque5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpkorf0grk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    \n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    \n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpf1rd2e_c.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpkorf0grk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var iterable = iterable\n    for i in (0..<iterable.count).reversed() {\n        iterable.swapAt(0, i)\n        heapify(iterable: &iterable, n: i, i: 0)\n    }\n    return iterable\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpclmvnog9.swift:7:9: error: cannot find 'heapify' in scope\n        heapify(iterable: &iterable, n: i, i: 0)\n        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpuahu8ypl.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxm6xt095.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted: [Int] = []\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpse84c58g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var array = [Int]()\n    while !heap.isEmpty {\n        array.append(heap.pop()!)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpi_ce8hfk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp0l1jjkd3.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpkorf0grk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    var heap = Heap(array: array)\n    heap.sort()\n    return heap.array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpq4q5m4ov.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: array)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpgs3kobi2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result: [Int] = []\n    \n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpjiab1s_u.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(sort: <, elements: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpghagy3gl.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp3u3h0alu.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    build_max_heap(&array)\n    for i in (1...array.count-1).reversed() {\n        array.swapAt(0, i)\n        max_heapify(&array, i, 0)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp27ond5ls.swift:5:5: error: cannot find 'build_max_heap' in scope\n    build_max_heap(&array)\n    ^~~~~~~~~~~~~~\n/tmp/tmp27ond5ls.swift:8:9: error: cannot find 'max_heapify' in scope\n        max_heapify(&array, i, 0)\n        ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for element in iterable {\n        heap.insert(element)\n    }\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp1e90m0_t.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var iterable = iterable\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmptfug8pge.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpobmg4l6u.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpzqiqa_gs.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result: [Int] = []\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpy8hd_w_h.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    heap.sort()\n    return heap.array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxrwd38xt.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp3u3h0alu.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var array = iterable\n    var heap = Heap(array: array)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpzqrk1wg3.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: array)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7orlqgaw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpaq_p4gr7.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpas4vf1gq.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "tmpxtm82h1_/tmpxtm82h1_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3984d30c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3984a27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3984a27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3984a267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxtm82h1_                        0x000055cd2be9e43c <unavailable> + 5180\n5    libc.so.6                          0x00002b3984f1c460 __libc_start_main + 245\n6    tmpxtm82h1_                        0x000055cd2be9dfc9 <unavailable> + 4041\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxm6xt095.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpzqiqa_gs.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpnyifmm5g.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while heap.count > 0 {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp7rcapg43.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var arr = iterable\n    var n = arr.count\n    for i in stride(from: n / 2 - 1, through: 0, by: -1) {\n        heapify(arr: &arr, n: n, i: i)\n    }\n    \n    for i in stride(from: n - 1, through: 0, by: -1) {\n        arr.swapAt(0, i)\n        heapify(arr: &arr, n: i, i: 0)\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpyjcdkch_.swift:7:9: error: cannot find 'heapify' in scope\n        heapify(arr: &arr, n: n, i: i)\n        ^~~~~~~\n/tmp/tmpyjcdkch_.swift:12:9: error: cannot find 'heapify' in scope\n        heapify(arr: &arr, n: i, i: 0)\n        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    return heap.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp_lzrb_q5.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmp30mprw9i.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(array: iterable, sort: >)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpep8r37hu.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(array: iterable, sort: >)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while let max = heap.pop() {\n        sorted.append(max)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpr4znuon2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.remove())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpxm6xt095.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.extractMax())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpadm_7esw.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.remove())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmponlolo73.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpbyc027an.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpuahu8ypl.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmp7wirdftp.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpo_lrfv80.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap<Int>(sort: <)\n    for value in iterable {\n        heap.insert(value)\n    }\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpr08z3931.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap<Int>(sort: <)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var iterable = iterable\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while !heap.isEmpty {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpdqnq9avw.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while let max = heap.pop() {\n        sorted.append(max)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpr4znuon2.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(sort: <, elements: iterable)\n    return heap.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpn6r85j0o.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(sort: <, elements: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var sorted = [Int]()\n    while heap.count > 0 {\n        sorted.append(heap.pop()!)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpy2ktixlk.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var heap = Heap(iterable: iterable)\n    var result = [Int]()\n    while !heap.isEmpty {\n        result.append(heap.pop()!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1665517251,
      "stdout": "",
      "stderr": "/tmp/tmpag06vu2q.swift:4:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable: iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort the given array.\nfunc heap_sort(iterable: [Int]) -> [Int] {\n    var iterable = iterable\n    var heap = Heap(iterable)\n    for i in (0..<iterable.count).reversed() {\n        iterable[i] = heap.remove()!\n    }\n    return iterable\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\nassert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "/tmp/tmpokouvjud.swift:5:16: error: cannot find 'Heap' in scope\n    var heap = Heap(iterable)\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}