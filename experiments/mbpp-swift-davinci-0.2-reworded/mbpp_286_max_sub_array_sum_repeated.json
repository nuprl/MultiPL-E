{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "swift",
  "prompt": "\n/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunc max_sub_array_sum_repeated(a: [Int], n: Int, k: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sub_array_sum_repeated(a: [10, 20, -30, -1], n: 4, k: 3) == 30)\nassert(max_sub_array_sum_repeated(a: [-1, 10, 20], n: 3, k: 2) == 59)\nassert(max_sub_array_sum_repeated(a: [-1, -2, -3], n: 3, k: 3) == -1)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element <= 0 {\n        return max_element * k\n    }\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    let max_sub_array_sum = max_so_far\n    let max_wrap_sum = sum * k - max_so_far\n    return max(max_sub_array_sum, max_wrap_sum)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 1 {\n        return max_so_far\n    }\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    if min_element > 0 {\n        return sum * k\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_wrap = max_wrap + max_sub_array_sum(a: a, n: n)\n    \n    if k == 2 {\n        return max(max_wrap, max_so_far)\n    }\n    \n    return max(max_wrap, max_so_far + (sum * (k - 2)))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_so_far = max(max_so_far, sum * k)\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = a[0]\n    var max_ending_here = a[0]\n    for i in 1..<n {\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    var max_wrap = 0\n    var min_wrap = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_wrap = max(max_wrap, sum)\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        min_wrap = min(min_wrap, sum)\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    var res = max(max_so_far, max_wrap + min_wrap * (k - 2))\n    if res == 0 {\n        res = a.max()!\n    }\n    return res",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    for i in 1..<k {\n        max_so_far = max(max_so_far, max_so_far + sum)\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    \n    while i < n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        \n        i += 1\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    var result = max_so_far\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i] - a[i - n]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    result = max(result, max_so_far)\n    result = result * k - (max_so_far - result)\n    return result",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_element < a[i] {\n            max_element = a[i]\n        }\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    max_so_far = max_ending_here\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here - a[i] + a[j]\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n        j += 1\n        if j == n {\n            j = 0\n        }\n    }\n    return max_so_far * k",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var max_index = 0\n    var min_index = 0\n    var min_sum = 0\n    var min_so_far = 0\n    var min_ending_here = 0\n    var max_sum_repeated = 0\n    var max_sum_non_repeated = 0\n    var max_sum_non_repeated_index = 0\n    var max_sum_non_repeated_index_end = 0\n    var max_sum_non_repeated_index_start = 0\n    var max_sum_repeated_index = 0\n    var max_sum_repeated_index_end = 0\n    var max_sum_repeated_index_start = 0\n    var max_sum_repeated_index_start_end = 0\n    var max_sum_repeated_index_end_start = 0\n    var max_sum_repeated_index_start_start = 0\n    var max_sum_repeated_index_end_end = 0\n    var max_sum_repeated_index_start_end_end = 0\n    var max_sum_repeated_index_end_start_start = 0\n    var max_sum_repeated_index_start_start_start = 0\n    var max_sum_repeated_index_end_end_end = 0\n    var max_sum_repeated_index_start_end_end_end = 0\n    var max_sum_repeated_index_end_start_start_start = 0\n    var max_sum_repeated_index_start_start_start_start = 0\n    var max_sum_repeated_index_end_end_end_end = 0\n    var max_sum_repeated_index_start_end_end_end_end = 0\n    var max_sum_repeated_index_end_start_start_start_start = 0\n    var max_sum_repeated_index_start_start_start_start_start = 0\n    var max_sum_repeated",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    return max_element",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start) end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    var j = 0\n    while j < k {\n        i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    max_wrap = max_wrap * k\n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    max_so_far = max(max_so_far, max_wrap)\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_so_far\n    \n    return max(max_wrap, max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = a.max()!\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far == 0 {\n        max_so_far = max_element * k\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"The maximum sum is \\(max_so_far)\")\n    print(\"The starting index is \\(start)\")\n    print(\"The ending index is \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    var curr_max = max_so_far\n    var curr_min = 0\n    var curr_sum = 0\n    \n    for i in 0..<n {\n        curr_sum += a[i]\n        curr_max = max(curr_max, curr_sum - curr_min)\n        curr_min = min(curr_min, curr_sum)\n    }\n    \n    var total_sum = curr_sum * k\n    max_so_far = max(max_so_far, total_sum)\n    \n    for i in 0..<n {\n        total_sum -= a[i]\n        max_so_far = max(max_so_far, total_sum)\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var curr_max = max_so_far\n    var curr_min = 0\n    var curr_sum = 0\n    \n    for i in 0..<n {\n        curr_sum += a[i]\n        \n        if curr_sum > curr_max {\n            curr_max = curr_sum\n        }\n        \n        if curr_sum < curr_min {\n            curr_min = curr_sum\n        }\n    }\n    \n    var total_sum = curr_sum\n    var min_sum = curr_min * (k - 2)\n    var result = curr_max + min_sum\n    \n    for i in 0..<n {\n        total_sum += a[i]\n        curr_sum = total_sum - min_sum\n        \n        if curr_sum > result {\n            result = curr_sum\n        }\n        \n        if total_sum < min_sum {\n            min_sum = total_sum\n        }\n    }\n    \n    return result",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * 2 {\n        max_ending_here += a[i % n]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    var j = 0\n    while j < k {\n        i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var t = 0\n    while t < 2 {\n        while i < n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n            i += 1\n        }\n        t += 1\n        if t < 2 {\n            if max_so_far < 0 {\n                return max_so_far\n            }\n            if end == n - 1 {\n                return max_so_far\n            }\n            max_ending_here = 0\n            s = 0\n            i = end + 1\n            max_so_far = 0\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far * k",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    if sum > 0 {\n        max_so_far = max(max_so_far, sum * k)\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        else if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * k\n    max_wrap = max_wrap + max_so_far\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_sum = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    if max_so_far == 0 {\n        max_sum = max_element\n    } else {\n        max_sum = max_so_far\n    }\n    var curr_sum = max_sum\n    for i in (end + 1)..<n {\n        curr_sum = curr_sum + a[i] + a[i - n]\n        max_sum = max(max_sum, curr_sum)\n    }\n    for i in 0..<start {\n        curr_sum = curr_sum + a[i] + a[i + n]\n        max_sum = max(max_sum, curr_sum)\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max_sum + max_so_far\n        max_so_far = 0\n        max_ending_here = 0\n        for j in 0..<n {\n            max_ending_here = max_ending_here + a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n        }\n        if max_so_far == 0 {\n            max_so_far = max_element\n        }\n        max_sum = max(max_sum, max_so_far)\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_so_far_k = Int.min\n    var max_ending_here_k = 0\n    \n    for i in 0..<n*k {\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        \n        max_ending_here_k = max_ending_here_k + a[i % n]\n        if i == k - 1 {\n            max_so_far_k = max_ending_here_k\n        }\n        max_ending_here_k = max(max_ending_here_k, 0)\n    }\n    \n    if max_so_far_k < 0 {\n        return max_so_far_k\n    }\n    return max(max_so_far, max_so_far_k)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_so_far, max_wrap + max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_wrap = 0\n    i = 0\n    while i < n {\n        max_wrap += a[i]\n        i += 1\n    }\n    max_wrap = max_wrap * k\n    var result = max(max_so_far, max_wrap)\n    return result",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here += a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if sum < 0 {\n        return max_element\n    }\n    return max(max_so_far, sum * k - max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    var count = 0\n    var start = 0\n    var end = 0\n    \n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if sum > 0 {\n        max_so_far = sum * k\n    } else if sum == 0 {\n        max_so_far = max_element\n    } else {\n        max_so_far = max_element\n    }\n    \n    while j < n {\n        max_ending_here += a[j]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            count = 0\n        } else {\n            count += 1\n        }\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here\n            end = j\n            start = end - count + 1\n        }\n        j += 1\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    max_so_far = sum\n    for i in 1..<k {\n        for j in 0..<n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            max_so_far = max(max_so_far, max_ending_here)\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    max_so_far = max(max_so_far, sum * k)\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i+1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 2 {\n        return max(max_wrap, max_so_far)\n    }\n    return max(max_wrap, max_so_far * (k - 2))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var curr_val = 0\n    for i in 0..<n {\n        curr_val += a[i]\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        curr_val -= a[i]\n        if max_wrap + curr_val > max_so_far {\n            max_so_far = max_wrap + curr_val\n        }\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = Int.min\n    var max_index = 0\n    var min_index = 0\n    \n    for i in 0..<n {\n        sum += a[i]\n        if max_sum < sum {\n            max_sum = sum\n            max_index = i\n        }\n        if sum < 0 {\n            sum = 0\n            min_index = i + 1\n        }\n    }\n    \n    var circular_sum = sum\n    for i in 0..<min_index {\n        circular_sum += a[i]\n    }\n    \n    max_sum = max(max_sum, circular_sum)\n    \n    if k == 1 {\n        return max_sum\n    }\n    \n    var min_sum = Int.max\n    sum = 0\n    min_index = 0\n    for i in 0..<n {\n        sum += a[i]\n        if min_sum > sum {\n            min_sum = sum\n            min_index = i\n        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    \n    circular_sum = sum\n    for i in 0..<min_index {\n        circular_sum += a[i]\n    }\n    \n    min_sum = min(min_sum, circular_sum)\n    \n    var ans = max_sum + (k - 2) * sum\n    ans = max(ans, max_sum)\n    if sum > 0 {\n        ans = max(ans, min_sum + max_sum)\n    }\n    \n    return ans",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n        }\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start) end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_sum = max_so_far\n    var j = 2\n    while j <= k {\n        i = 0\n        max_ending_here = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        max_sum += max_so_far\n        j += 1\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var max_sum_index = 0\n    var max_sum_index_end = 0\n    var max_sum_index_start = 0\n    var max_sum_index_end_temp = 0\n    var max_sum_index_start_temp = 0\n    var max_sum_temp = 0\n    var max_sum_temp_index = 0\n    var max_sum_temp_index_end = 0\n    var max_sum_temp_index_start = 0\n    var max_sum_temp_index_end_temp = 0\n    var max_sum_temp_index_start_temp = 0\n    var max_sum_temp_index_start_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_start_temp_temp_temp_temp_temp_temp_temp_temp = 0\n    var max_sum_temp_index_end_temp_temp",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_wrap = max_wrap + max_wrap_sum(a: a, n: n)\n    \n    if max_wrap > max_so_far {\n        return max_wrap\n    } else {\n        return max_so_far\n    }",
    "    var sum = 0\n    var max_sum = 0\n    var max_so_far = 0\n    \n    for i in 0..<n {\n        sum += a[i]\n    }\n    \n    max_sum = sum\n    \n    for i in 0..<n {\n        sum = sum - a[i] + a[(i + n) % n]\n        max_sum = max(max_sum, sum)\n    }\n    \n    max_so_far = max_sum\n    \n    for _ in 1..<k {\n        max_sum = max_sum + sum\n        max_so_far = max(max_so_far, max_sum)\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var neg = 0\n    var neg_count = 0\n    var max_neg = Int.min\n    var max_index = 0\n    var max_index_end = 0\n    var max_index_start = 0\n    var max_index_sum = 0\n    var max_index_sum_end = 0\n    var max_index_sum_start = 0\n    var max_index_sum_neg = 0\n    var max_index_sum_neg_end = 0\n    var max_index_sum_neg_start = 0\n    var max_index_sum_neg_count = 0\n    var max_index_sum_neg_count_end = 0\n    var max_index_sum_neg_count_start = 0\n    var max_index_sum_neg_count_neg = 0\n    var max_index_sum_neg_count_neg_end = 0\n    var max_index_sum_neg_count_neg_start = 0\n    var max_index_sum_neg_count_neg_neg = 0\n    var max_index_sum_neg_count_neg_neg_end = 0\n    var max_index_sum_neg_count_neg_neg_start = 0\n    var max_index_sum_neg_count_neg_neg_neg = 0\n    var max_index_sum_neg_count_neg_neg_neg_end = 0\n    var max_index_sum_neg_count_neg_neg_neg_start = 0\n    var max_index_sum_neg_count_neg_neg_neg_neg = 0\n    var max_index_sum_neg_count_neg_neg_neg_neg_end = 0\n    var max_index_sum_neg_count_neg_neg_neg_neg_start = 0\n    var max_index_sum_neg_count_neg_neg_neg_neg_neg = 0\n    var max_index_sum_neg_count_neg_neg_neg_neg_neg_end = 0\n   ",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    var j = 0\n    var sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    max_ending_here = sum\n    for i in 1..<k {\n        max_ending_here = max(max_ending_here + sum, sum)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_sum = 0\n    var sum = 0\n    var max_sum_k = 0\n    var sum_k = 0\n    var max_sum_k_index = 0\n    var max_sum_k_index_start = 0\n    var max_sum_k_index_end = 0\n    var max_sum_k_index_start_temp = 0\n    var max_sum_k_index_end_temp = 0\n    var max_sum_k_index_start_temp_2 = 0\n    var max_sum_k_index_end_temp_2 = 0\n    var max_sum_k_index_start_temp_3 = 0\n    var max_sum_k_index_end_temp_3 = 0\n    var max_sum_k_index_start_temp_4 = 0\n    var max_sum_k_index_end_temp_4 = 0\n    var max_sum_k_index_start_temp_5 = 0\n    var max_sum_k_index_end_temp_5 = 0\n    var max_sum_k_index_start_temp_6 = 0\n    var max_sum_k_index_end_temp_6 = 0\n    var max_sum_k_index_start_temp_7 = 0\n    var max_sum_k_index_end_temp_7 = 0\n    var max_sum_k_index_start_temp_8 = 0\n    var max_sum_k_index_end_temp_8 = 0\n    var max_sum_k_index_start_temp_9 = 0\n    var max_sum_k_index_end_temp_9 = 0\n    var max_sum_k_index_start_temp_10 = 0\n    var max_sum_k_index_end_temp_10 = 0\n    var max_sum_k_index_start_temp_11 = 0\n    var max_sum_k_index_end_temp_11 = 0\n    var max_sum_k_index_start_temp_12",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    return max(max_so_far, sum * (k - 2) + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k)\n    max_so_far = max(max_so_far, sum * (k - 2) + max_element)\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k)\n    \n    sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here + sum * (k - 2))\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = 0\n    var min_element = 0\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var min_sum = 0\n    var flag = 0\n    var prev_max_sum = 0\n    var prev_min_sum = 0\n    var prev_max_element = 0\n    var prev_min_element = 0\n    var max_wrap_sum = 0\n    var min_wrap_sum = 0\n    var wrap_sum = 0\n    \n    // Find the maximum sum subarray in forward direction\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    // Find the maximum sum subarray in backward direction\n    max_so_far = 0\n    max_ending_here = 0\n    for i in stride(from: n-1, through: 0, by: -1) {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    // Find the maximum sum subarray in the array which is formed by repeating the given array k times\n    if k == 1 {\n        max_sum = max_so_far\n    } else {\n        max_wrap_sum = sum - min_element\n        min_wrap_sum = sum - max_element\n        if max_wrap_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * 2 {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var start_index = start\n    var end_index = end\n    \n    if end_index < n {\n        start_index = 0\n        end_index = n - 1\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n        }\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    max_wrap = max_wrap + max_sub_array_sum(a: a, n: n)\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    if min_element > 0 {\n        return sum * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far + (sum * (k - 2))",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var count = 0\n    while count < k {\n        while j < n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                i = j + 1\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            j += 1\n        }\n        count += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_ending_here = sum\n    for i in 0..<n {\n        max_ending_here = max_ending_here + sum - n * a[n - i - 1]\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var max_sum = Int.min\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max(max_sum, max_so_far + sum)\n        max_so_far = max_so_far + sum\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    let max_wrap = sum - max_ending_here\n    return max(max_so_far, max_wrap * (k - 2) + max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        return max_element\n    }\n    var curr_val = max_so_far\n    for i in 1..<k {\n        curr_val = curr_val + max_so_far\n        start = start + n\n        end = end + n\n        max_so_far = max(max_so_far, curr_val)\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var min_element = a[0]\n    var i = 0\n    var j = 0\n    var sum = 0\n    var min_sum = 0\n    var max_sum = 0\n    var flag = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_element = max(max_element, a[i])\n        if a[i] > 0 {\n            flag = 1\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n            min_sum = sum\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        if sum < min_sum {\n            min_sum = sum\n        }\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if flag == 0 {\n        return max_element\n    }\n    var x = max_sum * (k - 2)\n    x += sum\n    var y = min_sum * (k - 2)\n    y += sum\n    var res1 = max(x, y)\n    var res2 = max(max_sum, sum + max_sum)\n    return max(res1, res2)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var circular_sum = sum * k\n    var result = max(max_so_far, circular_sum)\n    return result",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n    }\n    \n    max_wrap = max_wrap * k\n    \n    for i in 0...start {\n        max_wrap -= a[i]\n    }\n    \n    for i in end+1..<n {\n        max_wrap -= a[i]\n    }\n    \n    return max(max_so_far, max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var i = 0\n    var j = 0\n    var sum = 0\n    var max_sum = 0\n    var min_sum = 0\n    var max_sum_ending_here = 0\n    var min_sum_ending_here = 0\n    \n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        max_sum_ending_here += a[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_ending_here > max_sum {\n            max_sum = max_sum_ending_here\n        }\n        min_sum_ending_here += a[i]\n        if min_sum_ending_here > 0 {\n            min_sum_ending_here = 0\n        }\n        if min_sum_ending_here < min_sum {\n            min_sum = min_sum_ending_here\n        }\n        i += 1\n    }\n    \n    if k == 1 {\n        return max_sum\n    }\n    \n    var circular_sum = 0\n    for i in 0..<n {\n        circular_sum += a[i]\n    }\n    \n    if circular_sum > 0 {\n        return max(max_sum, circular_sum * (k - 2) + max_sum)\n    }\n    \n    return max(max_sum, circular_sum * (k - 2) + max_sum)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    \n    return max_element",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 2 {\n        return max(max_wrap, max_so_far)\n    }\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    for i in 1..<k {\n        max_ending_here = max(max_ending_here + sum, max_so_far)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    let max_sum = max_so_far\n    let max_wrap = sum - min_element\n    \n    return max(max_sum, max_wrap * (k - 2) + max_sum)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i+1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var sum = a.reduce(0, +)\n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    max_so_far = max(max_so_far, sum * (k - 2) + max_so_far)\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    var sum = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum > 0 {\n        max_so_far = sum * k\n    } else {\n        max_so_far = max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var curr_val = 0\n    for i in 0..<start {\n        curr_val = curr_val + a[i]\n    }\n    var curr_max = curr_val\n    for i in start..<n {\n        curr_val = curr_val + a[i] - a[i - start]\n        curr_max = max(curr_max, curr_val)\n    }\n    var total_sum = curr_max\n    for i in 0..<k - 2 {\n        total_sum = total_sum + curr_max\n    }\n    curr_val = 0\n    for i in end + 1..<n {\n        curr_val = curr_val + a[i]\n    }\n    curr_max = curr_val\n    for i in 0..<n - (end + 1) {\n        curr_val = curr_val + a[i] - a[(i + end + 1) % n]\n        curr_max = max(curr_max, curr_val)\n    }\n    total_sum = total_sum + curr_max\n    return max(total_sum, max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var j = 0\n    while j < k {\n        i = 0\n        while i < n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    while i < k {\n        var j = 0\n        while j < n {\n            max_ending_here = max_ending_here + a[j]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    if sum == min_element {\n        return max_element\n    }\n    return max(max_so_far, sum * k - (sum - max_so_far))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here += a[i]\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    if sum == min_element {\n        return max_element\n    }\n    \n    return max(max_so_far, sum * k - (sum - max_so_far))",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i+1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    if min_element > 0 {\n        return sum * k\n    }\n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_wrap + max_so_far, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_wrap = max_wrap + max_so_far\n    \n    if k == 2 {\n        return max(max_so_far, max_wrap)\n    }\n    \n    return max(max_so_far, max_wrap) / (k - 2)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"The sum of contiguous subarray with the largest sum is \\(max_so_far)\")\n    print(\"The start index is \\(start)\")\n    print(\"The end index is \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var i = 0\n    var flag = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    var max_sum = max_so_far\n    for i in 1..<k {\n        max_sum = max_sum + max_so_far\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        return max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_wrap + max_so_far, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_sum = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var j = 0\n    var count = 0\n    var sum = 0\n    var max_sum_index = 0\n    \n    for i in 0..<n {\n        max_sum += a[i]\n    }\n    \n    max_sum *= k\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    \n    var max_wrap = 0\n    var temp = 0\n    \n    for i in 0..<n {\n        temp += a[i]\n        if temp < 0 {\n            temp = 0\n        }\n        if max_wrap < temp {\n            max_wrap = temp\n        }\n    }\n    \n    var max_wrap_sum = max_wrap * (k - 2)\n    \n    for i in 0..<n {\n        sum = 0\n        count = 0\n        for j in i..<n {\n            sum += a[j]\n            count += 1\n            if sum == max_so_far && count > max_sum_index {\n                max_sum_index = count\n            }\n        }\n    }\n    \n    max_sum_index = max_sum_index * k\n    \n    if max_sum_index > max_wrap_sum {\n        return max_sum_index\n    }\n    \n    return max_wrap_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var t = 0\n    while t < 2 {\n        max_so_far = 0\n        max_ending_here = 0\n        start = 0\n        end = 0\n        s = 0\n        i = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = i + 1\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            i += 1\n        }\n        t += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if max_so_far == 0 {\n        return max_element\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here += a[i]\n        max_ending_here = max(max_ending_here, max_ending_here + sum)\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum * k - min_element\n    \n    return max(max_sum_without_wrap, max_sum_with_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    \n    var max_wrap_sum = 0\n    for i in 0..<n {\n        max_wrap_sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n    }\n    \n    if max_wrap_sum > 0 {\n        return max(max_so_far, max_wrap_sum * (k - 2))\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var i = 0\n    var j = 0\n    for _ in 0..<k {\n        for i in 0..<n {\n            max_ending_here = max_ending_here + a[i]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_element < a[i] {\n                max_element = a[i]\n            }\n        }\n    }\n    if max_so_far == 0 {\n        return max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    while i < n * k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var max_sum = max_so_far\n    var min_sum = min_element * n\n    var total_sum = sum\n    var i = 2\n    while i <= k {\n        if max_sum > 0 {\n            max_sum += total_sum\n        }\n        if min_sum < 0 {\n            min_sum += total_sum\n        }\n        max_so_far = max(max_so_far, max_sum)\n        min_element = min(min_element, min_sum)\n        i += 1\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var max_kadane = kadane(a: a, n: n)\n    if max_kadane < 0 {\n        return max_kadane\n    }\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n    }\n    max_so_far = sum\n    for i in 1..<k {\n        max_ending_here = max_ending_here + sum\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n    }\n    return max_so_far",
    "    var max_so_far: Int = 0\n    var max_ending_here: Int = 0\n    var max_element: Int = Int.min\n    var i: Int = 0\n    var j: Int = 0\n    var sum: Int = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_sum: Int = max_so_far\n    \n    for i in 1..<k {\n        for j in 0..<n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n        }\n        max_sum += max_so_far\n    }\n    \n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var count = 0\n    while count < 2 * k {\n        max_ending_here = max_ending_here + a[j]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            i = j + 1\n        }\n        j = (j + 1) % n\n        if j == 0 {\n            count = count + 1\n        }\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    \n    var circular_sum = 0\n    for i in 0..<n {\n        circular_sum += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_ending_here = 0\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    max_so_far = max(max_so_far, circular_sum + max_so_far)\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if k == 1 {\n        return max_so_far\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = max(max_so_far, sum * k)\n    \n    if sum > 0 {\n        max_so_far = max(max_so_far, (sum * (k - 2)) + max_element)\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_so_far > 0 {\n        return max_so_far * k\n    }\n    \n    return max_element",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_so_far\n    if k == 1 {\n        return max_so_far\n    }\n    return max(max_so_far, max_wrap)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if sum > 0 {\n        return max(max_so_far, sum * (k - 2) + max_so_far)\n    }\n    return max(max_so_far, max_element)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap * (k - 2)\n    return max(max_so_far, max_wrap + max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    var max_sum = max_so_far\n    var max_sum_util = max_so_far\n    for _ in 1..<k {\n        max_sum_util = max_sum_util + sum\n        max_sum = max(max_sum, max_sum_util)\n        max_sum_util = max(max_sum_util, max_sum)\n    }\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    if min_element > 0 {\n        return min_element * k\n    }\n    \n    var max_sum = max_so_far\n    for i in 0..<n {\n        max_ending_here = max(0, max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    max_sum = max(max_sum, max_so_far)\n    max_sum = max(max_sum, sum * k)\n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum < 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    var max_sum = max_so_far\n    var j = 2\n    while j <= k {\n        i = 0\n        max_ending_here = 0\n        while i < n {\n            max_ending_here += a[i]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            i += 1\n        }\n        max_sum += max_so_far\n        j += 1\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = Int.min\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    var i = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        i += 1\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    var result = max_so_far\n    i = 0\n    while i < n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        max_so_far = max(max_so_far, max_ending_here)\n        i += 1\n    }\n    result = max(result, max_so_far)\n    result = max(result, max_so_far * (k - 2))\n    return result",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    max_ending_here = sum\n    \n    for i in 1..<k {\n        for j in 0..<n {\n            max_ending_here = max_ending_here + a[j]\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n                start = s\n                end = j\n            }\n            if max_ending_here < 0 {\n                max_ending_here = 0\n                s = j + 1\n            }\n        }\n    }\n    print(\"start: \\(start) end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    var i = 0\n    while i < n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        sum += a[i]\n        i += 1\n    }\n    if sum == 0 {\n        return max_element\n    }\n    i = 0\n    while i < n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n        i += 1\n    }\n    return max_so_far * k",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_so_far_k = 0\n    \n    while i < n {\n        max_so_far_k += a[i]\n        i += 1\n    }\n    \n    max_so_far = max_so_far_k\n    i = 0\n    while i < k {\n        max_ending_here = 0\n        j = 0\n        while j < n {\n            max_ending_here += a[j]\n            if max_ending_here < 0 {\n                max_ending_here = 0\n            }\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var sum = 0\n    \n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        sum += a[i]\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    max_so_far = sum\n    for i in 0..<n {\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_sum = max_so_far\n    for i in 0..<n {\n        max_ending_here += a[i]\n        max_ending_here = max(max_ending_here, a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    \n    max_sum = max(max_sum, max_so_far)\n    \n    return max_sum",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_element = a[0]\n    var min_element = a[0]\n    var sum = 0\n    var max_sum = 0\n    var min_sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if all_negative(a: a, n: n) {\n        return max_element\n    }\n    \n    max_sum = max_sub_array_sum(a: a, n: n)\n    min_sum = min_sub_array_sum(a: a, n: n)\n    \n    max_so_far = max_sum\n    max_ending_here = max_sum\n    \n    for _ in 1..<k {\n        if max_ending_here < 0 {\n            max_ending_here = max_sum\n        } else {\n            max_ending_here += sum\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    max_ending_here = min_sum\n    \n    for _ in 1..<k {\n        if max_ending_here > 0 {\n            max_ending_here = min_sum\n        } else {\n            max_ending_here += sum\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i%n]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    print(\"\\(start) \\(end)\")\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var max_element = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    var i = 0\n    var j = 0\n    while i < n {\n        max_element = max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n        i += 1\n    }\n    if max_so_far < 0 {\n        max_so_far = max_element\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n    }\n    max_wrap = max_wrap * k\n    max_wrap = max_wrap - max_sub_array_sum(a: a, n: n, start: start, end: end)\n    return max(max_so_far, max_wrap)",
    "    var max_sum = 0\n    var max_ending_here = 0\n    var min_ending_here = 0\n    var max_so_far = Int.min\n    var min_so_far = Int.max\n    for i in 0..<n {\n        max_ending_here += a[i]\n        min_ending_here += a[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0\n        }\n    }\n    max_sum = max_so_far\n    if k > 1 {\n        max_sum = max(max_sum, max_so_far * k)\n        max_sum = max(max_sum, min_so_far * k)\n        max_sum = max(max_sum, (max_so_far - min_so_far) * k)\n    }\n    return max_sum",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n        min_element = min(min_element, a[i])\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    if min_element > 0 {\n        return sum * k\n    }\n    return max(max_so_far, sum * (k - 2) + max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    \n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n    }\n    \n    if k == 1 {\n        return max_sub_array_sum(a: a, n: n)\n    }\n    \n    if max_element < 0 {\n        return max_element\n    }\n    \n    if min_element > 0 {\n        return min_element * k\n    }\n    \n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    \n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    \n    max_wrap = max_wrap + max_sub_array_sum(a: a, n: n)\n    \n    return max(max_wrap, max_so_far)",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0, end = 0, s = 0\n    var max_element = a.max()!\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    if max_so_far == 0 {\n        max_so_far = max_element\n    }\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    max_wrap = max_wrap + max_wrap\n    if max_wrap > max_so_far {\n        return max_wrap\n    }\n    return max_so_far",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n*k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"start: \\(start), end: \\(end)\")\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var i = 0\n    var j = 0\n    var max_k_times = 0\n    var max_k_times_index = 0\n    var max_k_times_index_end = 0\n    var max_k_times_index_start = 0\n    var max_k_times_index_end_temp = 0\n    var max_k_times_index_start_temp = 0\n    var max_k_times_temp = 0\n    var max_k_times_index_temp = 0\n    var max_k_times_index_end_temp_temp = 0\n    var max_k_times_index_start_temp_temp = 0\n    var max_k_times_temp_temp = 0\n    var max_k_times_index_temp_temp = 0\n    var max_k_times_index_end_temp_temp_temp = 0\n    var max_k_times_index_start_temp_temp_temp = 0\n    var max_k_times_temp_temp_temp = 0\n    var max_k_times_index_temp_temp_temp = 0\n    var max_k_times_index_end_temp_temp_temp_temp = 0\n    var max_k_times_index_start_temp_temp_temp_temp = 0\n    var max_k_times_temp_temp_temp_temp = 0\n    var max_k_times_index_temp_temp_temp_temp = 0\n    var max_k_times_index_end_temp_temp_temp_temp_temp = 0\n    var max_k_times_index_start_temp_temp_temp_temp_temp = 0\n    var max_k_times_temp_temp_temp_temp_temp = 0\n    var max_k_times_index_temp_temp_temp_temp_temp = 0\n    var max_k_times_index_end_temp_temp_temp_temp_temp_temp = 0\n    var max_k_times_index_start_temp_temp_temp_temp_temp_temp = 0\n    var max_k_times",
    "    var max_sum = 0\n    var curr_sum = 0\n    var max_so_far = Int.min\n    var start = 0\n    var end = 0\n    var s = 0\n    for i in 0..<n*k {\n        curr_sum += a[i%n]\n        if curr_sum > max_sum {\n            max_sum = curr_sum\n            start = s\n            end = i\n        }\n        if curr_sum < 0 {\n            curr_sum = 0\n            s = i + 1\n        }\n    }\n    for i in 0..<k {\n        max_so_far += max_sum\n    }\n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a[0]\n    for i in 0..<n {\n        max_element = max(max_element, a[i])\n    }\n    if max_element < 0 {\n        return max_element\n    }\n    for i in 0..<n {\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    var max_wrap = 0\n    for i in 0..<n {\n        max_wrap += a[i]\n        a[i] = -a[i]\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a: a, n: n, k: k)\n    return max(max_wrap, max_so_far)",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = Int.min\n    var min_element = Int.max\n    var sum = 0\n    for i in 0..<n {\n        if a[i] > max_element {\n            max_element = a[i]\n        }\n        if a[i] < min_element {\n            min_element = a[i]\n        }\n        sum += a[i]\n        max_ending_here += a[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if sum > 0 {\n        return max(max_so_far, sum * (k - 2) + max_element)\n    } else {\n        return max(max_so_far, max_element)\n    }",
    "    var max_so_far = Int.min\n    var max_ending_here = 0\n    var start = 0\n    var end = 0\n    var s = 0\n    \n    for i in 0..<n * k {\n        max_ending_here += a[i % n]\n        \n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        }\n        \n        if max_ending_here < 0 {\n            max_ending_here = 0\n            s = i + 1\n        }\n    }\n    \n    print(\"Maximum contiguous sum is \\(max_so_far)\")\n    print(\"Starting index \\(start)\")\n    print(\"Ending index \\(end)\")\n    \n    return max_so_far",
    "    var max_so_far = 0\n    var max_ending_here = 0\n    var max_element = a.max()!\n    var sum = 0\n    for i in 0..<n {\n        sum += a[i]\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    }\n    if k == 1 {\n        return max_so_far\n    }\n    if max_element < 0 {\n        return max_element * k\n    }\n    let max_sum_without_wrap = max_so_far\n    let max_sum_with_wrap = sum * (k - 2) + max_so_far\n    return max(max_sum_without_wrap, max_sum_with_wrap)"
  ]
}