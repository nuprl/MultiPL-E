{
  "name": "mbpp_557_toggle_string",
  "language": "swift",
  "prompt": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_lbxaid4.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else if char.isLowercase {\n            newString.append(char.uppercased())\n        } else {\n            newString.append(char)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for character in string {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n        } else {\n            newString.append(character.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw4anr8_.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map {\n           ~~~~~~~^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggled = string.characters.map { (char) -> Character in\n        if char.isLowercase {\n            return char.uppercase()\n        } else {\n            return char.lowercase()\n        }\n    }\n    return String(toggled)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmp589s4ets.swift:6:25: error: value of type 'String.Element' (aka 'Character') has no member 'uppercase'\n            return char.uppercase()\n                   ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercaseString)\n        } else {\n            newString.append(char.uppercaseString)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpnw8ajdto.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnw8ajdto.swift:7:35: error: value of type 'Character' has no member 'lowercaseString'\n            newString.append(char.lowercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnw8ajdto.swift:9:35: error: value of type 'Character' has no member 'uppercaseString'\n            newString.append(char.uppercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let char = string[string.index(string.startIndex, offsetBy: i)]\n        if char.isLowercase {\n            string.replaceSubrange(string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex, offsetBy: i+1), with: char.uppercased())\n        } else {\n            string.replaceSubrange(string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex, offsetBy: i+1), with: char.lowercased())\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmppzyofpnr.swift:4:19: error: 'characters' is unavailable: Please use String directly\n    return string.characters.map {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUpperCase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpwcjo6bhl.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwcjo6bhl.swift:6:17: error: value of type 'Character' has no member 'isUpperCase'\n        if char.isUpperCase {\n           ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { char in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpodtbnf5t.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map { char in\n           ~~~~~~~^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex, offsetBy: i)\n        let char = string[index]\n        if char.isUppercase {\n            string.replaceSubrange(index...index, with: String(char).lowercased())\n        } else {\n            string.replaceSubrange(index...index, with: String(char).uppercased())\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += \"\\(char.lowercased())\"\n        } else {\n            result += \"\\(char.uppercased())\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex, offsetBy: i)\n        let char = string[index]\n        if char.isUppercase {\n            string.replaceSubrange(index...index, with: String(char).lowercased())\n        } else {\n            string.replaceSubrange(index...index, with: String(char).uppercased())\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result += char.lowercaseString\n        } else {\n            result += char.uppercaseString\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmp_vd1jh61.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_vd1jh61.swift:7:28: error: value of type 'Character' has no member 'lowercaseString'\n            result += char.lowercaseString\n                      ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp_vd1jh61.swift:9:28: error: value of type 'Character' has no member 'uppercaseString'\n            result += char.uppercaseString\n                      ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmp2wd7y50u.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2wd7y50u.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2wd7y50u.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for character in string.characters {\n        if character.isUppercase {\n            toggledString.append(character.lowercased())\n        } else {\n            toggledString.append(character.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmp__gc72hw.swift:5:29: error: 'characters' is unavailable: Please use String directly\n    for character in string.characters {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle_char: (Character) -> Character = { char in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n    return String(string.map(toggle_char))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpranwluvl.swift:6:25: error: cannot convert return expression of type 'String' to return type 'Character'\n            return char.lowercased()\n                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let characters = string.characters.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n    return String(characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpphnrnpw6.swift:4:29: error: 'characters' is unavailable: Please use String directly\n    let characters = string.characters.map {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpphnrnpw6.swift:11:12: error: no exact matches in call to initializer \n    return String(characters)\n           ^\nSwift.String:4:12: note: candidate requires that the types 'String' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n                      ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for character in string {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n        } else {\n            newString.append(character.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let string_array = Array(string)\n    var new_string = \"\"\n    for char in string_array {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercaseString)\n        } else {\n            newString.append(char.uppercaseString)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpnw8ajdto.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnw8ajdto.swift:7:35: error: value of type 'Character' has no member 'lowercaseString'\n            newString.append(char.lowercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpnw8ajdto.swift:9:35: error: value of type 'Character' has no member 'uppercaseString'\n            newString.append(char.uppercaseString)\n                             ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercaseString)\n        } else {\n            result.append(char.uppercaseString)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmp2wd7y50u.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2wd7y50u.swift:7:32: error: value of type 'Character' has no member 'lowercaseString'\n            result.append(char.lowercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2wd7y50u.swift:9:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercase)\n        } else {\n            newString.append(char.uppercase)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmps9iu5coj.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps9iu5coj.swift:7:35: error: value of type 'Character' has no member 'lowercase'\n            newString.append(char.lowercase)\n                             ~~~~ ^~~~~~~~~\n/tmp/tmps9iu5coj.swift:9:35: error: value of type 'Character' has no member 'uppercase'\n            newString.append(char.uppercase)\n                             ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map { (char: Character) -> Character in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpsae8kldb.swift:6:25: error: cannot convert return expression of type 'String' to return type 'Character'\n            return char.lowercased()\n                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isLowercase {\n            result += String(char).uppercased()\n        } else {\n            result += String(char).lowercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        let str = String(char)\n        if str.lowercased() == str {\n            newString += str.uppercased()\n        } else {\n            newString += str.lowercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_lbxaid4.swift:4:19: error: cannot convert return expression of type '[String]' to return type 'String'\n    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw6i5ic6.swift:11:12: error: no exact matches in call to initializer \n    return String(toggle)\n           ^\nSwift.String:4:12: note: candidate requires that the types 'String' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n                      ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var string = string\n    for i in 0..<string.count {\n        let index = string.index(string.startIndex, offsetBy: i)\n        let char = string[index]\n        if char.isUppercase {\n            string.replaceSubrange(index...index, with: String(char.lowercased()))\n        } else {\n            string.replaceSubrange(index...index, with: String(char.uppercased()))\n        }\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpgi8u_k1a.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for character in string.characters {\n        if character.isUppercase {\n            result.append(character.lowercase)\n        } else {\n            result.append(character.uppercase)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpv1xhcedt.swift:5:29: error: 'characters' is unavailable: Please use String directly\n    for character in string.characters {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv1xhcedt.swift:7:37: error: value of type 'Character' has no member 'lowercase'\n            result.append(character.lowercase)\n                          ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpv1xhcedt.swift:9:37: error: value of type 'Character' has no member 'uppercase'\n            result.append(character.uppercase)\n                          ~~~~~~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map { (char: Character) -> Character in\n        if char.isUppercase {\n            return char.lowercased()\n        } else {\n            return char.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpsae8kldb.swift:6:25: error: cannot convert return expression of type 'String' to return type 'Character'\n            return char.lowercased()\n                   ~~~~~^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var toggledString = \"\"\n    for char in string {\n        if char.isUppercase {\n            toggledString.append(char.lowercased())\n        } else {\n            toggledString.append(char.uppercased())\n        }\n    }\n    return toggledString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n        } else {\n            new_string.append(char.uppercased())\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpceasc86g.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggle = string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n    return String(toggle)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmptw6i5ic6.swift:11:12: error: no exact matches in call to initializer \n    return String(toggle)\n           ^\nSwift.String:4:12: note: candidate requires that the types 'String' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n                      ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string.characters {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpxt1gixck.swift:5:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if char.isUppercase {\n            new_string += char.lowercased()\n        } else {\n            new_string += char.uppercased()\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    let toggled = string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n        }\n    }\n    return String(toggled)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123855,
      "stdout": "",
      "stderr": "/tmp/tmpfkcehfub.swift:11:12: error: no exact matches in call to initializer \n    return String(toggled)\n           ^\nSwift.String:4:12: note: candidate requires that the types 'String' and 'Character' be equivalent (requirement specified as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate requires that the types 'String.Element' (aka 'Character') and 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n                      ^\nSwift.String:6:12: note: incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting subject: Subject)\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString += String(char).lowercased()\n        } else {\n            newString += String(char).uppercased()\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += String(char).lowercased()\n        } else {\n            result += String(char).uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(string: String) -> String {\n    var newString = \"\"\n    for char in string {\n        if char.isUppercase {\n            newString.append(char.lowercased())\n        } else {\n            newString.append(char.uppercased())\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(toggle_string(string: \"Python\") == \"pYTHON\")\nassert(toggle_string(string: \"Pangram\") == \"pANGRAM\")\nassert(toggle_string(string: \"LIttLE\") == \"liTTle\")",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}