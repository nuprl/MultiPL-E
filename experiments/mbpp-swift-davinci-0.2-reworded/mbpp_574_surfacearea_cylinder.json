{
  "name": "mbpp_574_surfacearea_cylinder",
  "language": "swift",
  "prompt": "\n/// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r: Int, h: Int) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(surfacearea_cylinder(r: 10, h: 5) == 942.45)\nassert(surfacearea_cylinder(r: 4, h: 5) == 226.18800000000002)\nassert(surfacearea_cylinder(r: 4, h: 10) == 351.848)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h) + 2 * Double.pi * Double(r) * Double(r)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h) + 2 * Double.pi * Double(r) * Double(r)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    let pi = 3.14159265359\n    return 2 * pi * Double(r) * Double(h) + 2 * pi * Double(r) * Double(r)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h) + 2 * Double.pi * Double(r) * Double(r)",
    "    return 2 * Double.pi * Double(r) * Double(h)",
    "    return 2 * Double.pi * Double(r) * Double(h) + 2 * Double.pi * Double(r * r)"
  ]
}