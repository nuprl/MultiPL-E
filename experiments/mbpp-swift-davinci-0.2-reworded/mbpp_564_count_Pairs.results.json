{
  "name": "mbpp_564_count_Pairs",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count: Int = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    \n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    \n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp42m78b9w/tmp42m78b9w.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b677c072c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b677bd69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b677bd69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b677bd687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42m78b9w                        0x00005654b2b434e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b677c25e460 __libc_start_main + 245\n6    tmp42m78b9w                        0x00005654b2b43149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (i < j && arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count: Int = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i < j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] && i != j {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmphx9aehrg/tmphx9aehrg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b561069bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5610392b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5610392988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56103917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphx9aehrg                        0x0000559189b274e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b5610887460 __libc_start_main + 245\n6    tmphx9aehrg                        0x0000559189b27149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j] && i != j) {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if (arr[i] != arr[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpvi4_flvs/tmpvi4_flvs.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50be269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50bdf60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50bdf60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50bdf5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvi4_flvs                        0x0000557ff011b4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b50be455460 __libc_start_main + 245\n6    tmpvi4_flvs                        0x0000557ff011b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n-1 {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] && i != j {\n                count += 1\n            }\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmp46t_2__7/tmp46t_2__7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b460529fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4604f96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4604f96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4604f957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp46t_2__7                        0x000055ee965ae4e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b460548b460 __libc_start_main + 245\n6    tmp46t_2__7                        0x000055ee965ae149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if i != j && arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "tmpnh59hyqt/tmpnh59hyqt.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff9b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff98897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnh59hyqt                        0x000055acf70e44e7 <unavailable> + 5351\n5    libc.so.6                          0x00002b7ff9d7f460 __libc_start_main + 245\n6    tmpnh59hyqt                        0x000055acf70e4149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)\nassert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)\nassert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)",
      "timestamp": 1665517312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}