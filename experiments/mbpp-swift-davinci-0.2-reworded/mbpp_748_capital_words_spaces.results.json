{
  "name": "mbpp_748_capital_words_spaces",
  "language": "swift",
  "prompt": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var previous_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if previous_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            previous_char_is_capital = true\n        } else {\n            str2.append(char)\n            previous_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpooqyxdnt/tmpooqyxdnt.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2008f3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2008c32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2008c32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2008c317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpooqyxdnt                        0x00005641a66217c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b2009127460 __libc_start_main + 245\n6    tmpooqyxdnt                        0x00005641a6621409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            result.append(str[i])\n            i += 1\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n            result.append(\" \")\n            result.append(str[i])\n            i += 1\n        } else {\n            result.append(str[i])\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmpn7vxrlfq.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn7vxrlfq.swift:11:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn7vxrlfq.swift:11:36: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n                                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn7vxrlfq.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn7vxrlfq.swift:16:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn7vxrlfq.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            str.insert(\" \", at: str.startIndex)\n            i += 1\n        }\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmp5zqytl0e/tmp5zqytl0e.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19dd5d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19dd2cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19dd2cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19dd2ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5zqytl0e                        0x00005614587b2617 <unavailable> + 5655\n5    libc.so.6                          0x00002b19dd7c4460 __libc_start_main + 245\n6    tmp5zqytl0e                        0x00005614587b2259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \")\n                result.append(char)\n            }\n            last_char_is_capital = true\n        } else {\n            result.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpcveg3qls/tmpcveg3qls.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5259a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5259745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5259745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52597447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcveg3qls                        0x000055a812b634b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b5259c3a460 __libc_start_main + 245\n6    tmpcveg3qls                        0x000055a812b630f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev = \"\"\n    for char in str1 {\n        if char.isUppercase && prev != \" \" {\n            str2 += \" \"\n        }\n        str2 += String(char)\n        prev = String(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpgz8_msfv/tmpgz8_msfv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4faee57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4faeb4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4faeb4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4faeb4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgz8_msfv                        0x0000564a929f14b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b4faf043460 __libc_start_main + 245\n6    tmpgz8_msfv                        0x0000564a929f10f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n    return str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmpibtnxlnd.swift:4:21: error: value of type 'String' has no member 'replacingOccurrences'\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpibtnxlnd.swift:4:80: error: cannot infer contextual base in reference to member 'regularExpression'\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                              ~^~~~~~~~~~~~~~~~~\n/tmp/tmpibtnxlnd.swift:4:106: error: 'nil' requires a contextual type\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                                                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for (index, char) in str1.characters.enumerated() {\n        if index > 0 && char.isUppercase && str1[str1.index(str1.startIndex, offsetBy: index - 1)].isLowercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmp6yrs0hao.swift:5:31: error: 'characters' is unavailable: Please use String directly\n    for (index, char) in str1.characters.enumerated() {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char == \" \" && char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmp5bgnz5sh/tmp5bgnz5sh.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d3a3fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d3a0f5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d3a0f5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d3a0f47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5bgnz5sh                        0x000055f1abd18857 <unavailable> + 6231\n5    libc.so.6                          0x00002b2d3a5ea460 __libc_start_main + 245\n6    tmp5bgnz5sh                        0x000055f1abd18499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    var prev = \"\"\n    for char in str1 {\n        if char.isUppercase && prev != \" \" {\n            str += \" \"\n        }\n        str += String(char)\n        prev = String(char)\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmp11z2ltt2/tmp11z2ltt2.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ad4905c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ad45fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ad45fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ad45fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp11z2ltt2                        0x0000561d3f3a34b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b9ad4af1460 __libc_start_main + 245\n6    tmp11z2ltt2                        0x0000561d3f3a30f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpgpm_dwj2/tmpgpm_dwj2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e38802c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e384f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e384f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e384f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgpm_dwj2                        0x0000563f3cd55857 <unavailable> + 6231\n5    libc.so.6                          0x00002b5e389ee460 __libc_start_main + 245\n6    tmpgpm_dwj2                        0x0000563f3cd55499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for (index, char) in str1.enumerated() {\n        if index != 0 && char.isUppercase {\n            str += \" \"\n        }\n        str += String(char)\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmprowes_m0.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(c)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpz8nuxyb1/tmpz8nuxyb1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5254733c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b525442ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b525442a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52544297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz8nuxyb1                        0x0000560da57614b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b525491f460 __libc_start_main + 245\n6    tmpz8nuxyb1                        0x0000560da57610f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (i, char) in str1.enumerated() {\n        if i == 0 {\n            str2.append(char)\n        } else {\n            if str1[i-1] == \" \" && char.isUppercase {\n                str2.append(\" \")\n            }\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmpke1ll07j.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i-1] == \" \" && char.isUppercase {\n               ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpedam4nzd/tmpedam4nzd.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6b23bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6b20b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6b20b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6b20b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpedam4nzd                        0x0000557d136e75b7 <unavailable> + 5559\n5    libc.so.6                          0x00002ad6b25a7460 __libc_start_main + 245\n6    tmpedam4nzd                        0x0000557d136e71f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpgpm_dwj2/tmpgpm_dwj2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e38802c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e384f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e384f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e384f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgpm_dwj2                        0x0000563f3cd55857 <unavailable> + 6231\n5    libc.so.6                          0x00002b5e389ee460 __libc_start_main + 245\n6    tmpgpm_dwj2                        0x0000563f3cd55499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (index, char) in str1.enumerated() {\n        if index > 0 && char.isUppercase && str1[str1.index(str1.startIndex, offsetBy: index - 1)].isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (i, char) in str1.characters.enumerated() {\n        if i > 0 && char.isUppercase && str1[str1.index(str1.startIndex, offsetBy: i - 1)].isLowercase {\n            str2 += \" \"\n        }\n        str2 += String(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpouz2wcc5.swift:5:27: error: 'characters' is unavailable: Please use String directly\n    for (i, char) in str1.characters.enumerated() {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        let index = str1.index(str1.startIndex, offsetBy: i)\n        let index2 = str1.index(str1.startIndex, offsetBy: i+1)\n        if str1[index].isUppercase && str1[index2].isLowercase {\n            str2.append(str1[index])\n            str2.append(\" \")\n        } else {\n            str2.append(str1[index])\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpdcev2aq6/tmpdcev2aq6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b306ea4cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b306e743b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b306e743988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b306e7427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdcev2aq6                        0x0000564a0ce04747 <unavailable> + 5959\n5    libc.so.6                          0x00002b306ec38460 __libc_start_main + 245\n6    tmpdcev2aq6                        0x0000564a0ce04389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.characters.map { String($0) }\n    var result = \"\"\n    for i in 0..<str.count {\n        if i == 0 {\n            result += str[i]\n        } else {\n            if str[i] == str[i].uppercased() && str[i-1] != \" \" {\n                result += \" \" + str[i]\n            } else {\n                result += str[i]\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpp9xkvgqo.swift:4:20: error: 'characters' is unavailable: Please use String directly\n    let str = str1.characters.map { String($0) }\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \\(i)\"\n        } else {\n            str2 += \"\\(i)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpskm1ij2u/tmpskm1ij2u.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af77f3f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af77f0e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af77f0e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af77f0e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpskm1ij2u                        0x000055cca2616767 <unavailable> + 5991\n5    libc.so.6                          0x00002af77f5dd460 __libc_start_main + 245\n6    tmpskm1ij2u                        0x000055cca26163a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if !last_char_is_capital {\n                result.append(\" \")\n            }\n            last_char_is_capital = true\n        } else {\n            last_char_is_capital = false\n        }\n        result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmp05rkqft1/tmp05rkqft1.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acd693f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acd690efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acd690ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acd690ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp05rkqft1                        0x0000561de9bf74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002acd695e4460 __libc_start_main + 245\n6    tmp05rkqft1                        0x0000561de9bf70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase && i != 0 {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpslz4wx6n.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && i != 0 {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase && str.last != \" \" {\n            str.append(\" \")\n        }\n        str.append(char)\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmps4zgoiqn/tmps4zgoiqn.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e6069cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e60393b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e60393988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e603927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps4zgoiqn                        0x00005602a7a02677 <unavailable> + 5751\n5    libc.so.6                          0x00002b5e60888460 __libc_start_main + 245\n6    tmps4zgoiqn                        0x00005602a7a022b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp2xeg118m.swift:7:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xeg118m.swift:7:38: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for (index, char) in str1.enumerated() {\n        if index == 0 {\n            str += String(char)\n        } else {\n            if str1[str1.index(str1.startIndex, offsetBy: index - 1)] == \" \" {\n                str += String(char)\n            } else {\n                if char.isUppercase {\n                    str += \" \" + String(char)\n                } else {\n                    str += String(char)\n                }\n            }\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if i != str1.startIndex {\n            if str1[str1.index(before: i)] == \" \" {\n                str2.append(str1[i])\n            } else if str1[i].isUppercase {\n                str2.append(\" \")\n                str2.append(str1[i])\n            } else {\n                str2.append(str1[i])\n            }\n        } else {\n            str2.append(str1[i])\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpponts9ry/tmpponts9ry.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c03040c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c02d37b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c02d37988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c02d367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpponts9ry                        0x000055b8a1c38697 <unavailable> + 5783\n5    libc.so.6                          0x00002b6c0322c460 __libc_start_main + 245\n6    tmpponts9ry                        0x000055b8a1c382d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    for i in 1..<str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpkxot36zt/tmpkxot36zt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ec0bf9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1ec08f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1ec08f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1ec08ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkxot36zt                        0x0000561ff2af34b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b1ec0de5460 __libc_start_main + 245\n6    tmpkxot36zt                        0x0000561ff2af30f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \")\n                result.append(char)\n            }\n            last_char_is_capital = true\n        } else {\n            result.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpcveg3qls/tmpcveg3qls.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5259a4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5259745b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5259745988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52597447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcveg3qls                        0x000055a812b634b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b5259c3a460 __libc_start_main + 245\n6    tmpcveg3qls                        0x000055a812b630f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            if str[str.index(str.startIndex, offsetBy: i)] >= \"A\" && str[str.index(str.startIndex, offsetBy: i)] <= \"Z\" {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        } else {\n            if str[str.index(str.startIndex, offsetBy: i)] >= \"A\" && str[str.index(str.startIndex, offsetBy: i)] <= \"Z\" && str[str.index(str.startIndex, offsetBy: i-1)] != \" \" {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmppmpf3gp6/tmppmpf3gp6.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab7f5d34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab7f5a2bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab7f5a2b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab7f5a2a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppmpf3gp6                        0x0000561bae1626d7 <unavailable> + 5847\n5    libc.so.6                          0x00002ab7f5f20460 __libc_start_main + 245\n6    tmppmpf3gp6                        0x0000561bae162319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if i != str1.startIndex && str1[str1.index(before: i)] != \" \" && str1[i] == str1[i].uppercased() {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmplgi3a6ez.swift:6:78: error: subscript 'subscript(_:)' requires that 'DefaultIndices<String>.Element' (aka 'String.Index') conform to 'RangeExpression'\n        if i != str1.startIndex && str1[str1.index(before: i)] != \" \" && str1[i] == str1[i].uppercased() {\n                                                                             ^\nSwift.Collection:2:23: note: where 'R' = 'DefaultIndices<String>.Element' (aka 'String.Index')\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for char in str {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpfvltvaqn/tmpfvltvaqn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc1d804c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc1d4fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc1d4fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc1d4fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfvltvaqn                        0x0000560f56d6b767 <unavailable> + 5991\n5    libc.so.6                          0x00002adc1d9f0460 __libc_start_main + 245\n6    tmpfvltvaqn                        0x0000560f56d6b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in str.characters {\n        if i.isUppercase {\n            result.append(\" \")\n        }\n        result.append(i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp1yayur9x.swift:6:18: error: 'characters' is unavailable: Please use String directly\n    for i in str.characters {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1yayur9x.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.components(separatedBy: \" \")\n    var result = \"\"\n    for i in 0..<str.count {\n        if str[i].first?.isUppercase ?? false {\n            result += \" \" + str[i]\n        } else {\n            result += str[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp9_ywysjw.swift:4:20: error: value of type 'String' has no member 'components'\n    let str = str1.components(separatedBy: \" \")\n              ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev_char.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev_char = char\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for char in str {\n        if char.isUppercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpro91osya/tmpro91osya.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba55026fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba54ff66b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba54ff66988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba54ff657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpro91osya                        0x0000559cdcbbe4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ba55045b460 __libc_start_main + 245\n6    tmpro91osya                        0x0000559cdcbbe0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpguox0qzb/tmpguox0qzb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c0d998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c0d68fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c0d68f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c0d68e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguox0qzb                        0x00005611270777c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b7c0db84460 __libc_start_main + 245\n6    tmpguox0qzb                        0x0000561127077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    var result = \"\"\n    for word in words {\n        if word.count > 1 {\n            let firstChar = word.prefix(1)\n            let rest = word.dropFirst()\n            if firstChar.uppercased() == firstChar {\n                result += \" \\(firstChar)\\(rest)\"\n            } else {\n                result += \" \\(word)\"\n            }\n        } else {\n            result += \" \\(word)\"\n        }\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpb68sdb2j.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = str1.components(separatedBy: \" \")\n                ~~~~ ^~~~~~~~~~\n/tmp/tmpb68sdb2j.swift:19:19: error: value of type 'String' has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpb68sdb2j.swift:19:43: error: cannot infer contextual base in reference to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n                                         ~^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            result += \" \" + String(str[i])\n        } else {\n            result += String(str[i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpo6iz6gk4.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6iz6gk4.swift:9:36: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result += \" \" + String(str[i])\n                                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6iz6gk4.swift:11:30: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result += String(str[i])\n                             ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6iz6gk4.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpxs3xdh2b.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpguox0qzb/tmpguox0qzb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c0d998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c0d68fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c0d68f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c0d68e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguox0qzb                        0x00005611270777c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b7c0db84460 __libc_start_main + 245\n6    tmpguox0qzb                        0x0000561127077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str += \" \\(i)\"\n        } else {\n            str += \"\\(i)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpsdzvae6m/tmpsdzvae6m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf467a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf4649ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf4649a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf464997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsdzvae6m                        0x000055cb6557a767 <unavailable> + 5991\n5    libc.so.6                          0x00002acf4698f460 __libc_start_main + 245\n6    tmpsdzvae6m                        0x000055cb6557a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2 += \"\\(i)\"\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpyk9iamrh/tmpyk9iamrh.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6153889c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6153580b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6153580988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b615357f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyk9iamrh                        0x0000558f96a05767 <unavailable> + 5991\n5    libc.so.6                          0x00002b6153a75460 __libc_start_main + 245\n6    tmpyk9iamrh                        0x0000558f96a053a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if i != str1.startIndex {\n            if str1[i] >= \"A\" && str1[i] <= \"Z\" {\n                str2.append(\" \")\n            }\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str += \" \" + String(i)\n        } else {\n            str += String(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmp6w6nzn9m/tmp6w6nzn9m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd603b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd600b0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd600b0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd600af7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6w6nzn9m                        0x000055670c7c7507 <unavailable> + 5383\n5    libc.so.6                          0x00002abd605a5460 __libc_start_main + 245\n6    tmp6w6nzn9m                        0x000055670c7c7149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase && str2.last != \" \" {\n            str2 += \" \"\n        }\n        str2 += String(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmptged9b1b/tmptged9b1b.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67328a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67325a0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67325a0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b673259f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptged9b1b                        0x000055c80f9fa677 <unavailable> + 5751\n5    libc.so.6                          0x00002b6732a95460 __libc_start_main + 245\n6    tmptged9b1b                        0x000055c80f9fa2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpxs3xdh2b.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpe8wcrqht/tmpe8wcrqht.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9104a90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9104787b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9104787988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91047867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8wcrqht                        0x0000555ff93127c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b9104c7c460 __libc_start_main + 245\n6    tmpe8wcrqht                        0x0000555ff9312409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmprowes_m0.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase && i != 0 {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpslz4wx6n.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && i != 0 {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpe8wcrqht/tmpe8wcrqht.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9104a90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9104787b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9104787988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91047867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8wcrqht                        0x0000555ff93127c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b9104c7c460 __libc_start_main + 245\n6    tmpe8wcrqht                        0x0000555ff9312409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpxs3xdh2b.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpvtf3k8bq.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvtf3k8bq.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if i == 0 {\n            str2.append(str1[i])\n        } else {\n            if str1[i].isUppercase && str1[i - 1].isLowercase {\n                str2.append(\" \")\n            }\n            str2.append(str1[i])\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpachzjzgx.swift:7:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str2.append(str1[i])\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpachzjzgx.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i].isUppercase && str1[i - 1].isLowercase {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpachzjzgx.swift:9:39: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i].isUppercase && str1[i - 1].isLowercase {\n                                      ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpachzjzgx.swift:12:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str2.append(str1[i])\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(char)\n    }\n    for char in str2 {\n        if char == \" \" && str3.last == \" \" {\n            continue\n        }\n        str3 += String(char)\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmp5is4ma9f/tmp5is4ma9f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0f0154bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0f01242b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0f01242988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0f012417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5is4ma9f                        0x00005575b6aef677 <unavailable> + 5751\n5    libc.so.6                          0x00002b0f01737460 __libc_start_main + 245\n6    tmp5is4ma9f                        0x00005575b6aef2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmprowes_m0.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \\(char)\")\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpa7y_pzm6/tmpa7y_pzm6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1496dfac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1496af1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1496af1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1496af07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa7y_pzm6                        0x0000560afa4a37c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b1496fe6460 __libc_start_main + 245\n6    tmpa7y_pzm6                        0x0000560afa4a3409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpe8wcrqht/tmpe8wcrqht.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9104a90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9104787b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9104787988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91047867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8wcrqht                        0x0000555ff93127c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b9104c7c460 __libc_start_main + 245\n6    tmpe8wcrqht                        0x0000555ff9312409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str += \" \\(i)\"\n        } else {\n            str += \"\\(i)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpsdzvae6m/tmpsdzvae6m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf467a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf4649ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf4649a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf464997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsdzvae6m                        0x000055cb6557a767 <unavailable> + 5991\n5    libc.so.6                          0x00002acf4698f460 __libc_start_main + 245\n6    tmpsdzvae6m                        0x000055cb6557a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \\(char)\")\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpa7y_pzm6/tmpa7y_pzm6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1496dfac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1496af1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1496af1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1496af07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa7y_pzm6                        0x0000560afa4a37c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b1496fe6460 __libc_start_main + 245\n6    tmpa7y_pzm6                        0x0000560afa4a3409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpxs3xdh2b.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    var new_str = \"\"\n    for word in words {\n        if word.first?.isUppercase ?? false {\n            new_str += \" \" + word\n        } else {\n            new_str += word\n        }\n    }\n    return new_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp5sc44az7.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = str1.components(separatedBy: \" \")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str += \" \"\n        }\n        str += String(str1[i])\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpcfpkrdp9/tmpcfpkrdp9.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1eb766cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1eb7363b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1eb7363988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1eb73627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfpkrdp9                        0x000055d5d9820697 <unavailable> + 5783\n5    libc.so.6                          0x00002b1eb7858460 __libc_start_main + 245\n6    tmpcfpkrdp9                        0x000055d5d98202d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(after: str.index(str.startIndex, offsetBy: i)))\n            i += 2\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp4s6f9sc7.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var newStr = \"\"\n    var lastChar = Character(\" \")\n    for char in str1 {\n        if lastChar.isUppercase && char.isLowercase {\n            newStr.append(\" \")\n        }\n        newStr.append(char)\n        lastChar = char\n    }\n    return newStr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpxi6qdgk5/tmpxi6qdgk5.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba67f0dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba67edd3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba67edd3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba67edd27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxi6qdgk5                        0x000055d45378a5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ba67f2c8460 __libc_start_main + 245\n6    tmpxi6qdgk5                        0x000055d45378a1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str += \" \\(i)\"\n        } else {\n            str += \"\\(i)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpsdzvae6m/tmpsdzvae6m.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf467a3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf4649ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf4649a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf464997b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsdzvae6m                        0x000055cb6557a767 <unavailable> + 5991\n5    libc.so.6                          0x00002acf4698f460 __libc_start_main + 245\n6    tmpsdzvae6m                        0x000055cb6557a3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if i != str1.startIndex && str1[str1.index(before: i)] != \" \" && str1[i] == str1[i].uppercased() {\n            str2 += \" \"\n        }\n        str2 += String(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpd3l04xop.swift:6:78: error: subscript 'subscript(_:)' requires that 'DefaultIndices<String>.Element' (aka 'String.Index') conform to 'RangeExpression'\n        if i != str1.startIndex && str1[str1.index(before: i)] != \" \" && str1[i] == str1[i].uppercased() {\n                                                                             ^\nSwift.Collection:2:23: note: where 'R' = 'DefaultIndices<String>.Element' (aka 'String.Index')\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpgpm_dwj2/tmpgpm_dwj2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e38802c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e384f9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e384f9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e384f87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgpm_dwj2                        0x0000563f3cd55857 <unavailable> + 6231\n5    libc.so.6                          0x00002b5e389ee460 __libc_start_main + 245\n6    tmpgpm_dwj2                        0x0000563f3cd55499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp2xeg118m.swift:7:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xeg118m.swift:7:38: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp410puf67/tmp410puf67.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acec3100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acec2df7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acec2df7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acec2df67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp410puf67                        0x0000557b1a81b4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002acec32ec460 __libc_start_main + 245\n6    tmp410puf67                        0x0000557b1a81b0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str += \" \"\n        }\n        str += String(str1[i])\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpcfpkrdp9/tmpcfpkrdp9.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1eb766cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1eb7363b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1eb7363988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1eb73627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfpkrdp9                        0x000055d5d9820697 <unavailable> + 5783\n5    libc.so.6                          0x00002b1eb7858460 __libc_start_main + 245\n6    tmpcfpkrdp9                        0x000055d5d98202d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev = Character(\" \")\n    for c in str1 {\n        if c.isUppercase && prev.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(c)\n        prev = c\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \\(char)\")\n            }\n            last_char_is_capital = true\n        } else {\n            result.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp2cuturfh/tmp2cuturfh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fac2ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fabfe2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fabfe2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fabfe17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2cuturfh                        0x000055e5d3f3b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b8fac4d7460 __libc_start_main + 245\n6    tmp2cuturfh                        0x000055e5d3f3b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var last_char_was_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_was_capital {\n                str2.append(\" \")\n            }\n            last_char_was_capital = true\n        } else {\n            last_char_was_capital = false\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp6qgczrc_/tmp6qgczrc_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6ff528c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6ff21fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6ff21f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6ff21e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6qgczrc_                        0x000055fcefcc95a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab6ff714460 __libc_start_main + 245\n6    tmp6qgczrc_                        0x000055fcefcc90f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUpper {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpchb3tb7z.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpchb3tb7z.swift:6:14: error: value of type 'Character' has no member 'isUpper'\n        if i.isUpper {\n           ~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i < str.count - 1 && str[i] >= \"A\" && str[i] <= \"Z\" && str[i + 1] >= \"A\" && str[i + 1] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpii9lvxg8.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i < str.count - 1 && str[i] >= \"A\" && str[i] <= \"Z\" && str[i + 1] >= \"A\" && str[i + 1] <= \"Z\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpii9lvxg8.swift:7:50: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i < str.count - 1 && str[i] >= \"A\" && str[i] <= \"Z\" && str[i + 1] >= \"A\" && str[i + 1] <= \"Z\" {\n                                                 ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpii9lvxg8.swift:7:67: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i < str.count - 1 && str[i] >= \"A\" && str[i] <= \"Z\" && str[i + 1] >= \"A\" && str[i + 1] <= \"Z\" {\n                                                                  ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpii9lvxg8.swift:7:88: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i < str.count - 1 && str[i] >= \"A\" && str[i] <= \"Z\" && str[i + 1] >= \"A\" && str[i + 1] <= \"Z\" {\n                                                                                       ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var newString = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            newString.append(\" \\(char)\")\n        } else {\n            newString.append(char)\n        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp_oct8m0e/tmp_oct8m0e.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f91a63c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f9175ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f9175a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f917597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_oct8m0e                        0x0000563f260d37c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b6f91c4f460 __libc_start_main + 245\n6    tmp_oct8m0e                        0x0000563f260d3409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpcd28ntjb.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count - 1 {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i + 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmpyqlinw0j/tmpyqlinw0j.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ace5a0d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ace59dceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ace59dce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ace59dcd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyqlinw0j                        0x0000561ba8cea617 <unavailable> + 5655\n5    libc.so.6                          0x00002ace5a2c3460 __libc_start_main + 245\n6    tmpyqlinw0j                        0x0000561ba8cea259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    var new_str = \"\"\n    for word in words {\n        if word.first?.isUppercase == true {\n            new_str += \" \\(word)\"\n        } else {\n            new_str += \" \\(word)\"\n        }\n    }\n    return new_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp9d783o4j.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = str1.components(separatedBy: \" \")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpvtf3k8bq.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvtf3k8bq.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.insert(\" \", at: index)\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp6kq928ns/tmp6kq928ns.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab39b5a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab39b29fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab39b29f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab39b29e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6kq928ns                        0x0000560c2d1165b7 <unavailable> + 5559\n5    libc.so.6                          0x00002ab39b794460 __libc_start_main + 245\n6    tmp6kq928ns                        0x0000560c2d1161f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char != \" \" {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp51t1rgia/tmp51t1rgia.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef540f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef53decb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef53dec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef53deb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp51t1rgia                        0x0000564a8e41f947 <unavailable> + 6471\n5    libc.so.6                          0x00002aef542e1460 __libc_start_main + 245\n6    tmp51t1rgia                        0x0000564a8e41f499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0g3d8t0d.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var previous_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if previous_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            previous_char_is_capital = true\n        } else {\n            str2.append(char)\n            previous_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpooqyxdnt/tmpooqyxdnt.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2008f3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2008c32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2008c32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2008c317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpooqyxdnt                        0x00005641a66217c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b2009127460 __libc_start_main + 245\n6    tmpooqyxdnt                        0x00005641a6621409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmph8mi06wc/tmph8mi06wc.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba929063c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba928d5ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba928d5a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba928d597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph8mi06wc                        0x000055c1207847c7 <unavailable> + 6087\n5    libc.so.6                          0x00002ba92924f460 __libc_start_main + 245\n6    tmph8mi06wc                        0x000055c120784409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var lastChar = \"\"\n    for char in str1 {\n        if char.isUppercase && lastChar != \" \" {\n            result += \" \"\n        }\n        result += String(char)\n        lastChar = String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmpihvfas7x/tmpihvfas7x.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2da723c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2da41ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2da41a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2da4197b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpihvfas7x                        0x0000560046af54b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad2da90f460 __libc_start_main + 245\n6    tmpihvfas7x                        0x0000560046af50f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        let index = str1.index(str1.startIndex, offsetBy: i)\n        if i == 0 {\n            str2.append(str1[index])\n        }\n        else {\n            let index2 = str1.index(str1.startIndex, offsetBy: i-1)\n            if str1[index].isUppercase && str1[index2].isLowercase {\n                str2.append(\" \")\n                str2.append(str1[index])\n            }\n            else {\n                str2.append(str1[index])\n            }\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            last_char_is_capital = true\n        } else {\n            str2.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmpv_tk02nd/tmpv_tk02nd.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b108d910c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b108d607b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b108d607988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b108d6067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv_tk02nd                        0x00005624483587c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b108dafc460 __libc_start_main + 245\n6    tmpv_tk02nd                        0x0000562448358409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        } else {\n            if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)] != \" \" {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp5cnf24n6/tmp5cnf24n6.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8679ccec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86799c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86799c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86799c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5cnf24n6                        0x000055bcccbb2617 <unavailable> + 5655\n5    libc.so.6                          0x00002b8679eba460 __libc_start_main + 245\n6    tmp5cnf24n6                        0x000055bcccbb2259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for (index, char) in str1.characters.enumerated() {\n        if index == 0 {\n            result.append(char)\n        } else {\n            if str1[str1.index(str1.startIndex, offsetBy: index - 1)] == \" \" {\n                result.append(char)\n            } else {\n                if char.isUppercase {\n                    result.append(\" \\(char)\")\n                } else {\n                    result.append(char)\n                }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpjh5m46ye.swift:5:31: error: 'characters' is unavailable: Please use String directly\n    for (index, char) in str1.characters.enumerated() {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var index = 0\n    while index < str.count {\n        if str[str.index(str.startIndex, offsetBy: index)].isUppercase {\n            if index > 0 {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: index))\n                index += 1\n            }\n        }\n        index += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp2xeg118m.swift:7:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xeg118m.swift:7:38: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        if i == 0 {\n            result.append(str[i])\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n            result.append(\" \")\n            result.append(str[i])\n        } else {\n            result.append(str[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpcuziodhj.swift:8:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcuziodhj.swift:9:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcuziodhj.swift:9:36: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n                                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcuziodhj.swift:11:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcuziodhj.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcuziodhj.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (index, char) in str1.characters.enumerated() {\n        if index == 0 {\n            str2.append(char)\n        } else {\n            if str1[str1.index(str1.startIndex, offsetBy: index - 1)] == \" \" && char.isUppercase {\n                str2.append(\" \")\n            }\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpsobirahr.swift:5:31: error: 'characters' is unavailable: Please use String directly\n    for (index, char) in str1.characters.enumerated() {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count - 1 {\n        if str[i].isUppercase && str[i + 1].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0snqumax.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0snqumax.swift:7:34: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \")\n        }\n        result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp788r6_6a/tmp788r6_6a.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b153eab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b153e7a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b153e7a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b153e7a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp788r6_6a                        0x00005643bcbbc4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b153ec9c460 __libc_start_main + 245\n6    tmp788r6_6a                        0x00005643bcbbc0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    var result = \"\"\n    for word in words {\n        if word.characters.first == word.uppercased().characters.first {\n            result += \" \\(word)\"\n        } else {\n            result += word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp4xqbbfun.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = str1.components(separatedBy: \" \")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}