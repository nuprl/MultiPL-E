{
  "name": "mbpp_755_second_smallest",
  "language": "swift",
  "prompt": "\n/// Write a function to find the second smallest number in an array.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    var second_smallest: Double?\n    var smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    let array = numbers as! [Double]\n    var smallest = array[0]\n    var second_smallest = array[0]\n    for number in array {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    if numbers.count > 1 {\n        return numbers[1]\n    }\n    return nil",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]",
    "    var numbers = numbers\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                second_smallest = number\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted(by: <)\n    return sorted[1]",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers.count > 1 ? numbers[1] : nil",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    var array = numbers as! [Double]\n    array.sort()\n    return array[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    return nil",
    "    let numbers = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if smallest > secondSmallest {\n        swap(&smallest, &secondSmallest)\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    let array = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var secondSmallest = Double.greatestFiniteMagnitude\n    for number in array {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    return nil",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    return nil",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = Double.infinity\n    var secondSmallest = Double.infinity\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    return nil",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                second_smallest = number\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var min = numbers[0]\n    var secondMin = numbers[0]\n    for number in numbers {\n        if number < min {\n            secondMin = min\n            min = number\n        } else if number < secondMin {\n            secondMin = number\n        }\n    }\n    return secondMin",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    if let numbers = numbers as? [Double] {\n        let sortedNumbers = numbers.sorted()\n        if sortedNumbers.count > 1 {\n            return sortedNumbers[1]\n        }\n    }\n    return nil",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var secondSmallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    return numbers.sorted()[1]",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var first = numbers[0]\n    var second = numbers[1]\n    if first > second {\n        first = numbers[1]\n        second = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < first {\n            second = first\n            first = numbers[i]\n        } else if numbers[i] < second {\n            second = numbers[i]\n        }\n    }\n    return second",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if secondSmallest < smallest {\n        smallest = secondSmallest\n        secondSmallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if smallest > secondSmallest {\n        smallest = numbers[1]\n        secondSmallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest && number != smallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    \n    if smallest > second_smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    if let numbers = numbers as? [Double] {\n        let sorted = numbers.sorted()\n        if sorted.count > 1 {\n            return sorted[1]\n        }\n    }\n    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    guard sorted.count > 1 else { return nil }\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var secondSmallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest",
    "    if numbers.count < 2 {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    \n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    \n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        let temp = smallest\n        smallest = second_smallest\n        second_smallest = temp\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var first = numbers[0]\n    var second = numbers[1]\n    if first > second {\n        first = numbers[1]\n        second = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < first {\n            second = first\n            first = numbers[i]\n        } else if numbers[i] < second {\n            second = numbers[i]\n        }\n    }\n    return second",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let array = numbers as! [Double]\n    var smallest = array[0]\n    var second_smallest = array[0]\n    for number in array {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    if numbers.count > 1 {\n        return numbers[1]\n    } else {\n        return nil\n    }",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    guard numbers.count > 1 else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    \n    if smallest > second_smallest {\n        let temp = smallest\n        smallest = second_smallest\n        second_smallest = temp\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    \n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var secondSmallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if smallest > secondSmallest {\n        smallest = numbers[1]\n        secondSmallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    if let numbers = numbers as? [Double] {\n        if numbers.count < 2 {\n            return nil\n        }\n        var smallest = numbers[0]\n        var second_smallest = numbers[1]\n        for number in numbers {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n        return second_smallest\n    }\n    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let array = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in array {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers.count > 1 ? numbers[1] : nil",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers.count > 1 ? numbers[1] : nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    let nums = numbers as! [Double]\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for num in nums {\n        if num < smallest {\n            second_smallest = smallest\n            smallest = num\n        } else if num < second_smallest {\n            second_smallest = num\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var first = numbers[0]\n    var second = numbers[1]\n    if first > second {\n        first = numbers[1]\n        second = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < first {\n            second = first\n            first = numbers[i]\n        } else if numbers[i] < second {\n            second = numbers[i]\n        }\n    }\n    return second",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    if numbers.count < 2 {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if smallest > secondSmallest {\n        smallest = numbers[1]\n        secondSmallest = numbers[0]\n    }\n    \n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            secondSmallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < secondSmallest {\n            secondSmallest = numbers[i]\n        }\n    }\n    \n    return secondSmallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    if numbers.count < 2 {\n        return nil\n    }\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var second_smallest: Double?\n    var smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers.dropFirst(2) {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let numbers = numbers as! [Double]\n    let sorted = numbers.sorted()\n    return sorted[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest"
  ]
}