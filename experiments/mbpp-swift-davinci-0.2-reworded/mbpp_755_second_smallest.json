{
  "name": "mbpp_755_second_smallest",
  "language": "swift",
  "prompt": "\n/// Write a function to find the second smallest number in an array.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    var second_smallest: Double?\n    var smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    let array = numbers as! [Double]\n    var smallest = array[0]\n    var second_smallest = array[0]\n    for number in array {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    if numbers.count > 1 {\n        return numbers[1]\n    }\n    return nil",
    "    let sorted = numbers.sorted()\n    return sorted[1]",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest",
    "    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest",
    "    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]",
    "    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest"
  ]
}