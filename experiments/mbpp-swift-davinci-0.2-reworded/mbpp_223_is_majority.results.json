{
  "name": "mbpp_223_is_majority",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac6c87efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac6c84e6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac6c84e6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac6c84e613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac6c84e5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac6c82e6e83 <unavailable> + 188035\n6    tmpz4rgs98r                        0x000055957a752973 <unavailable> + 6515\n7    tmpz4rgs98r                        0x000055957a752754 <unavailable> + 5972\n8    libc.so.6                          0x00002ac6c89db460 __libc_start_main + 245\n9    tmpz4rgs98r                        0x000055957a752149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter({$0 == x}).count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    if n == 0 {\n        return false\n    }\n    let mid = n / 2\n    if arr[mid] == x {\n        if (mid == 0 || x != arr[mid - 1]) && (mid == n - 1 || x != arr[mid + 1]) {\n            return true\n        }\n    }\n    if arr[mid] > x {\n        return is_majority(arr: arr, n: mid, x: x)\n    }\n    return is_majority(arr: Array(arr[mid + 1..<n]), n: n - mid - 1, x: x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "tmp8onxa2ka/tmp8onxa2ka.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adf15f1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adf15c15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adf15c15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adf15c147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8onxa2ka                        0x000055b7e0db8577 <unavailable> + 5495\n5    libc.so.6                          0x00002adf1610a460 __libc_start_main + 245\n6    tmp8onxa2ka                        0x000055b7e0db81b9 <unavailable> + 4537\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    \n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92aeaadc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92ae7a4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b92ae7a4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b92ae7a413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b92ae7a3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b92ae5a4e83 <unavailable> + 188035\n6    tmpv3sa26av                        0x000055ab90773973 <unavailable> + 6515\n7    tmpv3sa26av                        0x000055ab90773754 <unavailable> + 5972\n8    libc.so.6                          0x00002b92aec99460 __libc_start_main + 245\n9    tmpv3sa26av                        0x000055ab90773149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid > n - 1 {\n        return true\n    }\n    return arr[index + mid] == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmp4mcw9_kf.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n/2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e769a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e76698561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9e76698286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9e7669813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9e76697bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9e7649ae83 <unavailable> + 188035\n6    tmppuj9u2f3                        0x0000557541b3ba3d <unavailable> + 6717\n7    tmppuj9u2f3                        0x0000557541b3b754 <unavailable> + 5972\n8    libc.so.6                          0x00002b9e76b8d460 __libc_start_main + 245\n9    tmppuj9u2f3                        0x0000557541b3b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5e53b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5e50b0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba5e50b0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba5e50b013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba5e50afbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba5e4eb0e83 <unavailable> + 188035\n6    tmpc6umce1b                        0x0000560e64e84973 <unavailable> + 6515\n7    tmpc6umce1b                        0x0000560e64e84754 <unavailable> + 5972\n8    libc.so.6                          0x00002ba5e55a5460 __libc_start_main + 245\n9    tmpc6umce1b                        0x0000560e64e84149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid > n - 1 {\n        return true\n    }\n    return arr[index + mid] == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmp4mcw9_kf.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    if left > right {\n        return false\n    }\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n / 2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2831b0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2831805561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2831805286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b283180513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2831804bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b2831605e83 <unavailable> + 188035\n6    tmpsha5cq89                        0x00005640eb19bb91 <unavailable> + 7057\n7    tmpsha5cq89                        0x00005640eb19b754 <unavailable> + 5972\n8    libc.so.6                          0x00002b2831cfa460 __libc_start_main + 245\n9    tmpsha5cq89                        0x00005640eb19b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in arr {\n        if i == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    if left > right {\n        return false\n    }\n    var count = 1\n    var i = mid - 1\n    while i >= 0 && arr[i] == x {\n        count += 1\n        i -= 1\n    }\n    i = mid + 1\n    while i < n && arr[i] == x {\n        count += 1\n        i += 1\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n        if count > half {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3d265ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3d262e2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3d262e2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3d262e213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3d262e1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3d260e2e83 <unavailable> + 188035\n6    tmpwqs9dypv                        0x000055fd7635ea3d <unavailable> + 6717\n7    tmpwqs9dypv                        0x000055fd7635e754 <unavailable> + 5972\n8    libc.so.6                          0x00002b3d267d7460 __libc_start_main + 245\n9    tmpwqs9dypv                        0x000055fd7635e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, n: n, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid <= n - 1 && arr[index + mid] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmpg183hlpp.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, n: n, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    let count = arr.filter { $0 == x }.count\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n            if count > half {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1a94295c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1a93f8c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1a93f8c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1a93f8c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1a93f8bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1a93d8ce83 <unavailable> + 188035\n6    tmphu17cpb1                        0x00005556fb740a3d <unavailable> + 6717\n7    tmphu17cpb1                        0x00005556fb740754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1a94481460 __libc_start_main + 245\n9    tmphu17cpb1                        0x00005556fb740149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if left > right {\n        return false\n    }\n    if mid == 0 || arr[mid - 1] != x {\n        if mid + n / 2 < n && arr[mid + n / 2] == x {\n            return true\n        } else {\n            return false\n        }\n    } else {\n        var i = mid - 1\n        while i >= 0 && arr[i] == x {\n            i -= 1\n        }\n        if i + n / 2 < n && arr[i + n / 2] == x {\n            return true\n        } else {\n            return false\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid > n - 1 {\n        return true\n    }\n    return arr[index + mid] == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmp4mcw9_kf.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var low = 0\n    var high = n - 1\n    var mid = (low + high) / 2\n    \n    while low <= high {\n        if arr[mid] == x {\n            if (mid + 1) < n && arr[mid + 1] == x {\n                mid += 1\n            } else {\n                break\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n        mid = (low + high) / 2\n    }\n    \n    if (mid + n / 2) < n && arr[mid + n / 2] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123071,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if left > right {\n        return false\n    }\n    if mid == 0 || arr[mid - 1] != x {\n        if mid + n / 2 < n && arr[mid + n / 2] == x {\n            return true\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var low = 0\n    var high = n - 1\n    var mid = (low + high) / 2\n    \n    while low <= high {\n        if arr[mid] == x {\n            if mid + 1 < n && arr[mid + 1] == x {\n                low = mid + 1\n            } else if mid - 1 >= 0 && arr[mid - 1] == x {\n                high = mid - 1\n            } else {\n                break\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n        mid = (low + high) / 2\n    }\n    \n    if mid == 0 {\n        return arr[mid] == x\n    } else if mid == n - 1 {\n        return arr[mid] == x\n    } else {\n        return arr[mid] == x && arr[mid - 1] != x && arr[mid + 1] != x\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "tmpxwuuyixh/tmpxwuuyixh.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b261be53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b261bb4ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b261bb4a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b261bb497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwuuyixh                        0x0000556f66693417 <unavailable> + 5143\n5    libc.so.6                          0x00002b261c03f460 __libc_start_main + 245\n6    tmpxwuuyixh                        0x0000556f66693059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n        if count > half {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3d265ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3d262e2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3d262e2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3d262e213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3d262e1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3d260e2e83 <unavailable> + 188035\n6    tmpwqs9dypv                        0x000055fd7635ea3d <unavailable> + 6717\n7    tmpwqs9dypv                        0x000055fd7635e754 <unavailable> + 5972\n8    libc.so.6                          0x00002b3d267d7460 __libc_start_main + 245\n9    tmpwqs9dypv                        0x000055fd7635e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    \n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    \n    if left > right {\n        return false\n    }\n    \n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    \n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b918a616c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b918a30d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b918a30d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b918a30d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b918a30cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b918a10de83 <unavailable> + 188035\n6    tmpc4mdjcke                        0x000055a864799b8e <unavailable> + 7054\n7    tmpc4mdjcke                        0x000055a864799754 <unavailable> + 5972\n8    libc.so.6                          0x00002b918a802460 __libc_start_main + 245\n9    tmpc4mdjcke                        0x000055a864799149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid > n - 1 {\n        return true\n    }\n    return arr[index + mid] == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmp4mcw9_kf.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if (index + mid) <= (n - 1) && arr[index + mid] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmpo5a0lv7x.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let majority = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > majority\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9716f76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9716c6d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9716c6d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9716c6d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9716c6cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9716a6de83 <unavailable> + 188035\n6    tmp3v0368_p                        0x00005560cec0ba3d <unavailable> + 6717\n7    tmp3v0368_p                        0x00005560cec0b754 <unavailable> + 5972\n8    libc.so.6                          0x00002b9717162460 __libc_start_main + 245\n9    tmp3v0368_p                        0x00005560cec0b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var low = 0\n    var high = n - 1\n    var mid = (low + high) / 2\n    while low <= high {\n        if arr[mid] == x {\n            if (mid + n / 2) < n && arr[mid + n / 2] == x {\n                return true\n            } else {\n                return false\n            }\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n        mid = (low + high) / 2\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "tmpgwq4ruq8/tmpgwq4ruq8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60063f6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60060edb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60060ed988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60060ec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgwq4ruq8                        0x000055c12dfc2417 <unavailable> + 5143\n5    libc.so.6                          0x00002b60065e2460 __libc_start_main + 245\n6    tmpgwq4ruq8                        0x000055c12dfc2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5e53b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5e50b0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba5e50b0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba5e50b013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba5e50afbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba5e4eb0e83 <unavailable> + 188035\n6    tmpc6umce1b                        0x0000560e64e84973 <unavailable> + 6515\n7    tmpc6umce1b                        0x0000560e64e84754 <unavailable> + 5972\n8    libc.so.6                          0x00002ba5e55a5460 __libc_start_main + 245\n9    tmpc6umce1b                        0x0000560e64e84149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b2c877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b2c56e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1b2c56e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1b2c56e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1b2c56dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b1b2c36ee83 <unavailable> + 188035\n6    tmpbrif6cit                        0x000056255f64da3d <unavailable> + 6717\n7    tmpbrif6cit                        0x000056255f64d754 <unavailable> + 5972\n8    libc.so.6                          0x00002b1b2ca63460 __libc_start_main + 245\n9    tmpbrif6cit                        0x000056255f64d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5e53b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5e50b0561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba5e50b0286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba5e50b013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba5e50afbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba5e4eb0e83 <unavailable> + 188035\n6    tmpc6umce1b                        0x0000560e64e84973 <unavailable> + 6515\n7    tmpc6umce1b                        0x0000560e64e84754 <unavailable> + 5972\n8    libc.so.6                          0x00002ba5e55a5460 __libc_start_main + 245\n9    tmpc6umce1b                        0x0000560e64e84149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n / 2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba6f4e54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba6f4b4b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba6f4b4b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba6f4b4b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba6f4b4abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba6f494be83 <unavailable> + 188035\n6    tmp64nrzxrj                        0x000055a66f13c973 <unavailable> + 6515\n7    tmp64nrzxrj                        0x000055a66f13c754 <unavailable> + 5972\n8    libc.so.6                          0x00002ba6f5040460 __libc_start_main + 245\n9    tmp64nrzxrj                        0x000055a66f13c149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}