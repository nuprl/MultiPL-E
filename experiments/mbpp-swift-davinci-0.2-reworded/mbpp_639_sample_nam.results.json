{
  "name": "mbpp_639_sample_nam",
  "language": "swift",
  "prompt": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first == name.first?.uppercased() {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "/tmp/tmpdhig08qs.swift:6:23: error: type '((String.Element) throws -> Bool) throws -> String.Element?' (aka '((Character) throws -> Bool) throws -> Optional<Character>') cannot conform to 'StringProtocol'\n        if name.first == name.first?.uppercased() {\n                      ^\n/tmp/tmpdhig08qs.swift:6:23: note: only concrete types such as structs, enums and classes can conform to protocols\n        if name.first == name.first?.uppercased() {\n                      ^\n/tmp/tmpdhig08qs.swift:6:23: note: required by referencing operator function '==' on 'StringProtocol' where 'Self' = '((String.Element) throws -> Bool) throws -> String.Element?' (aka '((Character) throws -> Bool) throws -> Optional<Character>')\n        if name.first == name.first?.uppercased() {\n                      ^\n/tmp/tmpdhig08qs.swift:6:38: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n        if name.first == name.first?.uppercased() {\n                                     ^\n/tmp/tmpdhig08qs.swift:6:38: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n        if name.first == name.first?.uppercased() {\n                                     ^\n                                                  ?? <#default value#>\n/tmp/tmpdhig08qs.swift:6:38: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n        if name.first == name.first?.uppercased() {\n                                     ^\n                         (                       )!\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() == name {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() == name {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.characters.first?.isUppercase == true {\n            sum += name.characters.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "/tmp/tmp0x1blbej.swift:6:17: error: 'characters' is unavailable: Please use String directly\n        if name.characters.first?.isUppercase == true {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0x1blbej.swift:7:25: error: 'characters' is unavailable: Please use String directly\n            sum += name.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var total_length = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            total_length += name.count\n        }\n    }\n    return total_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.characters.first! >= \"a\" && name.characters.first! <= \"z\" {\n            continue\n        }\n        sum += name.characters.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "/tmp/tmp7aoa9qwn.swift:6:17: error: 'characters' is unavailable: Please use String directly\n        if name.characters.first! >= \"a\" && name.characters.first! <= \"z\" {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7aoa9qwn.swift:6:50: error: 'characters' is unavailable: Please use String directly\n        if name.characters.first! >= \"a\" && name.characters.first! <= \"z\" {\n                                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7aoa9qwn.swift:9:21: error: 'characters' is unavailable: Please use String directly\n        sum += name.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.prefix(1) == name.prefix(1).lowercased() {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() == name {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name[name.startIndex] >= \"A\" && name[name.startIndex] <= \"Z\" {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name[name.startIndex] >= \"A\" && name[name.startIndex] <= \"Z\" {\n            sum += name.characters.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "/tmp/tmpfhbro_9k.swift:7:25: error: 'characters' is unavailable: Please use String directly\n            sum += name.characters.count\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name[name.startIndex] >= \"A\" && name[name.startIndex] <= \"Z\" {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first!.isUppercase {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter({$0.first! >= \"A\" && $0.first! <= \"Z\"}).reduce(0, {$0 + $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var total = 0\n    for name in sample_names {\n        if name.uppercased() == name {\n            total += name.count\n        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "tmpb3zub7pd/tmpb3zub7pd.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62b3005c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62b2cfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62b2cfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62b2cfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb3zub7pd                        0x0000562aa29c9713 <unavailable> + 5907\n5    libc.so.6                          0x00002b62b31f1460 __libc_start_main + 245\n6    tmpb3zub7pd                        0x0000562aa29c9299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() == name {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    return sample_names.filter{$0.first! < \"a\"}.reduce(0){$0 + $1.count}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.lowercased() != name {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isLowercase == true {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase == true {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names: [String]) -> Int {\n    var sum = 0\n    for name in sample_names {\n        if name.first?.isUppercase ?? false {\n            sum += name.count\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)\nassert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)\nassert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)",
      "timestamp": 1665517408,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}