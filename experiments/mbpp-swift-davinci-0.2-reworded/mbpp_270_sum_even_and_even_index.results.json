{
  "name": "mbpp_270_sum_even_and_even_index",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in arr.enumerated() {\n        if index % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in arr.enumerated() {\n        if index % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, e) in arr.enumerated() {\n        if i % 2 == 0 && e % 2 == 0 {\n            sum += e\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in arr.enumerated() {\n        if index % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({ $0.offset % 2 == 0 && $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({$0.offset % 2 == 0 && $0.element % 2 == 0}).map({$0.element}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter { $0.offset % 2 == 0 && $0.element % 2 == 0 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({ $0.offset % 2 == 0 && $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in arr.enumerated() {\n        if i % 2 == 0 && n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({$0.offset % 2 == 0 && $0.element % 2 == 0}).map({$0.element}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "tmpheev0_7r/tmpheev0_7r.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae25cce4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae25c9dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae25c9db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae25c9da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpheev0_7r                        0x000055f9e3b0231a <unavailable> + 4890\n5    libc.so.6                          0x00002ae25ced0460 __libc_start_main + 245\n6    tmpheev0_7r                        0x000055f9e3b01f69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in arr.enumerated() {\n        if index % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in arr.enumerated() {\n        if i % 2 == 0 && n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in arr.enumerated() {\n        if i % 2 == 0 && n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({$0.offset % 2 == 0 && $0.element % 2 == 0}).map({$0.element}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().filter({$0.offset % 2 == 0 && $0.element % 2 == 0}).map({$0.element}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in arr.enumerated() {\n        if index % 2 == 0 && element % 2 == 0 {\n            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in arr.enumerated() {\n        if i % 2 == 0 && n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n        if i % 2 == 0 && num % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, item) in arr.enumerated() {\n        if index % 2 == 0 && item % 2 == 0 {\n            sum += item\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if (index % 2 == 0 && value % 2 == 0) {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in arr.enumerated() {\n        if i % 2 == 0 && n % 2 == 0 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        if i % 2 == 0 && arr[i] % 2 == 0 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    return arr.enumerated().reduce(0) { (result, element) in\n        return element.offset % 2 == 0 && element.element % 2 == 0 ? result + element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of even numbers at even positions of an array.\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in arr.enumerated() {\n        if index % 2 == 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)\nassert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)\nassert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}