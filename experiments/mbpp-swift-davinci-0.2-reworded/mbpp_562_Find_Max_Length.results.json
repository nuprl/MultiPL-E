{
  "name": "mbpp_562_Find_Max_Length",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var start_index = 0\n    var end_index = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in i..<lst.count {\n            sum += lst[j]\n            if sum == 0 {\n                if max_len < j - i + 1 {\n                    max_len = j - i + 1\n                    start_index = i\n                    end_index = j\n                }\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509685,
      "stdout": "",
      "stderr": "/tmp/tmpfr_8723d.swift:10:23: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n            sum += lst[j]\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_array = lst[i]\n        var length = 0\n        for j in 0..<sub_array.count {\n            if sub_array[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpww1qmqka/tmpww1qmqka.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c42875c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c4256cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c4256c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c4256b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpww1qmqka                        0x000055aad0ad9629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0c42a61460 __libc_start_main + 245\n6    tmpww1qmqka                        0x000055aad0ad91e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n        }\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp9fswk5ks/tmp9fswk5ks.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b444b09cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b444ad93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b444ad93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b444ad927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9fswk5ks                        0x000055daad571629 <unavailable> + 5673\n5    libc.so.6                          0x00002b444b288460 __libc_start_main + 245\n6    tmp9fswk5ks                        0x000055daad5711e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var curr_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_length += 1\n            } else {\n                curr_length = 0\n            }\n            if curr_length > max_length {\n                max_length = curr_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp1grw31ir/tmp1grw31ir.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b763f332c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b763f029b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b763f029988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b763f0287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1grw31ir                        0x00005558d5699629 <unavailable> + 5673\n5    libc.so.6                          0x00002b763f51e460 __libc_start_main + 245\n6    tmp1grw31ir                        0x00005558d56991e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmptd8zwgw4/tmptd8zwgw4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20cfae2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20cf7d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20cf7d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20cf7d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd8zwgw4                        0x000055f8e4900629 <unavailable> + 5673\n5    libc.so.6                          0x00002b20cfcce460 __libc_start_main + 245\n6    tmptd8zwgw4                        0x000055f8e49001e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        max_length = max(max_length, subarray.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_array in lst {\n        if sub_array.count > max_length {\n            max_length = sub_array.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int:Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        sum += lst[i][0]\n        if let j = dict[sum] {\n            max_len = max(max_len, i - j)\n        } else {\n            dict[sum] = i\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpv5x89wpw/tmpv5x89wpw.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac945301c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac944ff8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac944ff8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac944ff77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv5x89wpw                        0x0000560dd7ae3799 <unavailable> + 6041\n5    libc.so.6                          0x00002ac9454ed460 __libc_start_main + 245\n6    tmpv5x89wpw                        0x0000560dd7ae3359 <unavailable> + 4953\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            }\n            else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpbsz4nwzk/tmpbsz4nwzk.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cf0aa6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cf079db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cf079d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cf079c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbsz4nwzk                        0x0000556524232629 <unavailable> + 5673\n5    libc.so.6                          0x00002b6cf0c92460 __libc_start_main + 245\n6    tmpbsz4nwzk                        0x00005565242321e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var current_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                current_length += 1\n            } else {\n                current_length = 0\n            }\n            if current_length > max_length {\n                max_length = current_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpn8fsn3gn/tmpn8fsn3gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b771a8aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b771a5a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b771a5a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b771a5a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn8fsn3gn                        0x0000561d51da1629 <unavailable> + 5673\n5    libc.so.6                          0x00002b771aa96460 __libc_start_main + 245\n6    tmpn8fsn3gn                        0x0000561d51da11e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var current_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                current_length += 1\n            } else {\n                current_length = 0\n            }\n            if current_length > max_length {\n                max_length = current_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpn8fsn3gn/tmpn8fsn3gn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b771a8aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b771a5a1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b771a5a1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b771a5a07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn8fsn3gn                        0x0000561d51da1629 <unavailable> + 5673\n5    libc.so.6                          0x00002b771aa96460 __libc_start_main + 245\n6    tmpn8fsn3gn                        0x0000561d51da11e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_array in lst {\n        max_length = max(max_length, sub_array.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var len = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                len += 1\n            } else {\n                len = 0\n            }\n            if len > max_len {\n                max_len = len\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpalqsx9h6/tmpalqsx9h6.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2491068c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2490d5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2490d5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2490d5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpalqsx9h6                        0x000055ea57f31629 <unavailable> + 5673\n5    libc.so.6                          0x00002b2491254460 __libc_start_main + 245\n6    tmpalqsx9h6                        0x000055ea57f311e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var cur_len = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                cur_len += 1\n            } else {\n                cur_len = 0\n            }\n            max_len = max(max_len, cur_len)\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmplvi78uyz/tmplvi78uyz.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b309e19fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b309de96b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b309de96988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b309de957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplvi78uyz                        0x00005561a490c6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b309e38b460 __libc_start_main + 245\n6    tmplvi78uyz                        0x00005561a490c289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if max_length < length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmprum7w8sf/tmprum7w8sf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6842437c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b684212eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b684212e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b684212d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprum7w8sf                        0x00005626e3950629 <unavailable> + 5673\n5    libc.so.6                          0x00002b6842623460 __libc_start_main + 245\n6    tmprum7w8sf                        0x00005626e39501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var j = 0\n        while j < lst[i].count {\n            var k = j\n            while k < lst[i].count && lst[i][j] == lst[i][k] {\n                k += 1\n            }\n            max_length = max(max_length, k - j)\n            j = k\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkr514its/tmpkr514its.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7087fbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7087cb1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7087cb1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7087cb07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkr514its                        0x000055a1f596b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b70881a6460 __libc_start_main + 245\n6    tmpkr514its                        0x000055a1f596b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        let sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp64fdde4x/tmp64fdde4x.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b421e77dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b421e474b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b421e474988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b421e4737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp64fdde4x                        0x000055f8aa2d2629 <unavailable> + 5673\n5    libc.so.6                          0x00002b421e969460 __libc_start_main + 245\n6    tmp64fdde4x                        0x000055f8aa2d21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            max_length = max(max_length, length)\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpq7i5vly0/tmpq7i5vly0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7dabc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7da8bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7da8bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7da8bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq7i5vly0                        0x00005597074016c9 <unavailable> + 5833\n5    libc.so.6                          0x00002ad7dadb1460 __libc_start_main + 245\n6    tmpq7i5vly0                        0x0000559707401289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var current_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                current_length += 1\n            } else {\n                current_length = 0\n            }\n            max_length = max(max_length, current_length)\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp6by9kfzr/tmp6by9kfzr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abec2a2fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abec2726b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abec2726988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abec27257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6by9kfzr                        0x000055f734d4a6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002abec2c1b460 __libc_start_main + 245\n6    tmp6by9kfzr                        0x000055f734d4a289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 0 {\n                length += 1\n            } else {\n                length -= 1\n            }\n            if length == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpts6ckjgy/tmpts6ckjgy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b319971ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3199411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3199411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b31994107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpts6ckjgy                        0x00005558a6ec76c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b3199906460 __libc_start_main + 245\n6    tmpts6ckjgy                        0x00005558a6ec7289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var max_sum = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n            if lst.count > j + 1 {\n                max_sum += lst[j + 1][i]\n            }\n            if max_sum == 0 {\n                max_len = max(max_len, i + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abbb302ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abbb2d25561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abbb2d25286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abbb2d2513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abbb2d24bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002abbb2b25e83 <unavailable> + 188035\n6    tmpvmirzfgg                        0x000055f44e555ead <unavailable> + 7853\n7    tmpvmirzfgg                        0x000055f44e55564b <unavailable> + 5707\n8    libc.so.6                          0x00002abbb321a460 __libc_start_main + 245\n9    tmpvmirzfgg                        0x000055f44e555289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len: Int = 0\n    for i in 0..<lst.count {\n        var sum: Int = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpbev6b_zg/tmpbev6b_zg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae83a66ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae83a361b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae83a361988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae83a3607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbev6b_zg                        0x000055cfe81746c9 <unavailable> + 5833\n5    libc.so.6                          0x00002ae83a856460 __libc_start_main + 245\n6    tmpbev6b_zg                        0x000055cfe8174289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j+1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkk4ncwga/tmpkk4ncwga.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92c7f13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92c7c0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92c7c0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92c7c097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkk4ncwga                        0x0000555f7ce036c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b92c80ff460 __libc_start_main + 245\n6    tmpkk4ncwga                        0x0000555f7ce03289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    var length = 0\n    for i in 0..<lst.count {\n        length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpvkel0wmp/tmpvkel0wmp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5111694c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b511138bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b511138b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b511138a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvkel0wmp                        0x000055fc52ccf629 <unavailable> + 5673\n5    libc.so.6                          0x00002b5111880460 __libc_start_main + 245\n6    tmpvkel0wmp                        0x000055fc52ccf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            } else if let index = dict[sum] {\n                max_len = max(max_len, j - index)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpdzxs8ug3/tmpdzxs8ug3.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e1b490c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e1b187b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e1b187988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e1b1867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdzxs8ug3                        0x000055e1eb2107e9 <unavailable> + 6121\n5    libc.so.6                          0x00002b2e1b67c460 __libc_start_main + 245\n6    tmpdzxs8ug3                        0x000055e1eb2103a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_lst in lst {\n        if sub_lst.count > max_length {\n            max_length = sub_lst.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub in lst {\n        if sub.count > max_length {\n            max_length = sub.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for arr in lst {\n        max_length = max(max_length, arr.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var j = i\n        var length = 0\n        while j < lst.count {\n            if lst[j].count == 0 {\n                break\n            }\n            length += lst[j].count\n            j += 1\n        }\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpz7onj4i4/tmpz7onj4i4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad95a161c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad959e58b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad959e58988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad959e577b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz7onj4i4                        0x0000561925b6e5d9 <unavailable> + 5593\n5    libc.so.6                          0x00002ad95a34d460 __libc_start_main + 245\n6    tmpz7onj4i4                        0x0000561925b6e199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_array in lst {\n        if sub_array.count > max_length {\n            max_length = sub_array.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var curr_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_length += 1\n            } else {\n                curr_length = 0\n            }\n            max_length = max(max_length, curr_length)\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp9r9mj7ik/tmp9r9mj7ik.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ba92b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ba8fadb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ba8fad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ba8fac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r9mj7ik                        0x0000561450e206c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b4ba94a2460 __libc_start_main + 245\n6    tmp9r9mj7ik                        0x0000561450e20289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j+1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkk4ncwga/tmpkk4ncwga.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92c7f13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92c7c0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92c7c0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92c7c097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkk4ncwga                        0x0000555f7ce036c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b92c80ff460 __libc_start_main + 245\n6    tmpkk4ncwga                        0x0000555f7ce03289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        sum += lst[i][0]\n        if let j = dict[sum] {\n            max_len = max(max_len, i - j)\n        } else {\n            dict[sum] = i\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpdi8wpsdd/tmpdi8wpsdd.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba47420ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba473f01b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba473f01988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba473f007b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdi8wpsdd                        0x00005626a17bd799 <unavailable> + 6041\n5    libc.so.6                          0x00002ba4743f6460 __libc_start_main + 245\n6    tmpdi8wpsdd                        0x00005626a17bd359 <unavailable> + 4953\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var curr_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_length += 1\n            } else {\n                curr_length = 0\n            }\n            if curr_length > max_length {\n                max_length = curr_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp1grw31ir/tmp1grw31ir.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b763f332c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b763f029b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b763f029988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b763f0287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1grw31ir                        0x00005558d5699629 <unavailable> + 5673\n5    libc.so.6                          0x00002b763f51e460 __libc_start_main + 245\n6    tmp1grw31ir                        0x00005558d56991e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if max_length < count {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpdxvf54pa/tmpdxvf54pa.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9231511c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9231208b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9231208988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92312077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdxvf54pa                        0x00005642306bd629 <unavailable> + 5673\n5    libc.so.6                          0x00002b92316fd460 __libc_start_main + 245\n6    tmpdxvf54pa                        0x00005642306bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            } else if let index = dict[sum] {\n                max_len = max(max_len, j-index)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp6d1pj_5f/tmp6d1pj_5f.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b099fb4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b099f846b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b099f846988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b099f8457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6d1pj_5f                        0x000056123ccc87e9 <unavailable> + 6121\n5    libc.so.6                          0x00002b099fd3b460 __libc_start_main + 245\n6    tmp6d1pj_5f                        0x000056123ccc83a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_arr in lst {\n        if sub_arr.count > max_length {\n            max_length = sub_arr.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j+1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkk4ncwga/tmpkk4ncwga.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92c7f13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92c7c0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92c7c0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92c7c097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkk4ncwga                        0x0000555f7ce036c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b92c80ff460 __libc_start_main + 245\n6    tmpkk4ncwga                        0x0000555f7ce03289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var cur_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                cur_length += 1\n            } else {\n                cur_length = 0\n            }\n            if cur_length > max_length {\n                max_length = cur_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpv_ny3w26/tmpv_ny3w26.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99c907dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99c8d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99c8d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99c8d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv_ny3w26                        0x000056205d04c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b99c9269460 __libc_start_main + 245\n6    tmpv_ny3w26                        0x000056205d04c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmptd8zwgw4/tmptd8zwgw4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20cfae2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20cf7d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20cf7d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20cf7d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd8zwgw4                        0x000055f8e4900629 <unavailable> + 5673\n5    libc.so.6                          0x00002b20cfcce460 __libc_start_main + 245\n6    tmptd8zwgw4                        0x000055f8e49001e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n            if let val = dict[sum] {\n                max_len = max(max_len, j-val)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpx8hna5k4/tmpx8hna5k4.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af93f4f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af93f1efb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af93f1ef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af93f1ee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8hna5k4                        0x0000563fe6d7e7e9 <unavailable> + 6121\n5    libc.so.6                          0x00002af93f6e4460 __libc_start_main + 245\n6    tmpx8hna5k4                        0x0000563fe6d7e3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n            if let index = dict[sum] {\n                max_len = max(max_len, j-index)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpsyr51gpv/tmpsyr51gpv.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f98058c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f97d4fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6f97d4f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6f97d4e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsyr51gpv                        0x000055b8733697e9 <unavailable> + 6121\n5    libc.so.6                          0x00002b6f98244460 __libc_start_main + 245\n6    tmpsyr51gpv                        0x000055b8733693a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict: [Int: Int] = [:]\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n            if let index = dict[sum] {\n                max_len = max(max_len, j - index)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpfzis_fkh/tmpfzis_fkh.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acba42c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acba3fbdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acba3fbd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acba3fbc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfzis_fkh                        0x0000555c4bf06809 <unavailable> + 6153\n5    libc.so.6                          0x00002acba44b2460 __libc_start_main + 245\n6    tmpfzis_fkh                        0x0000555c4bf063c9 <unavailable> + 5065\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    for i in 0..<lst.count {\n        sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n            if let index = dict[sum] {\n                max_len = max(max_len, j - index)\n            } else {\n                dict[sum] = j\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpghgk6fqj/tmpghgk6fqj.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34014d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34011ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b34011cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b34011cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpghgk6fqj                        0x0000555eb99be7e9 <unavailable> + 6121\n5    libc.so.6                          0x00002b34016c1460 __libc_start_main + 245\n6    tmpghgk6fqj                        0x0000555eb99be3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_array = lst[i]\n        var length = 0\n        for j in 0..<sub_array.count {\n            if sub_array[j] == 1 {\n                length += 1\n            } else {\n                length -= 1\n            }\n            if length == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpoe2xg3_c/tmpoe2xg3_c.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcf949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcf9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcf9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcf91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoe2xg3_c                        0x000055684e69b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002abcf9688460 __libc_start_main + 245\n6    tmpoe2xg3_c                        0x000055684e69b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n        }\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp9fswk5ks/tmp9fswk5ks.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b444b09cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b444ad93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b444ad93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b444ad927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9fswk5ks                        0x000055daad571629 <unavailable> + 5673\n5    libc.so.6                          0x00002b444b288460 __libc_start_main + 245\n6    tmp9fswk5ks                        0x000055daad5711e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sub in lst {\n        if sub.count > max_len {\n            max_len = sub.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var sum = 0\n    var dict = [Int: Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        sum += lst[i]\n        if let j = dict[sum] {\n            max_len = max(max_len, i - j)\n        } else {\n            dict[sum] = i\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "/tmp/tmpqvjx6lli.swift:9:19: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n        sum += lst[i]\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var curr_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_length += 1\n            }\n            else {\n                curr_length = 0\n            }\n            if curr_length > max_length {\n                max_length = curr_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpgwczf7a4/tmpgwczf7a4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c18e73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c18b6ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c18b6a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c18b697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgwczf7a4                        0x0000559ed7da8629 <unavailable> + 5673\n5    libc.so.6                          0x00002b2c1905f460 __libc_start_main + 245\n6    tmpgwczf7a4                        0x0000559ed7da81e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmptd8zwgw4/tmptd8zwgw4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20cfae2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20cf7d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20cf7d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20cf7d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd8zwgw4                        0x000055f8e4900629 <unavailable> + 5673\n5    libc.so.6                          0x00002b20cfcce460 __libc_start_main + 245\n6    tmptd8zwgw4                        0x000055f8e49001e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max = max > j + 1 ? max : j + 1\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkbtyxhfi/tmpkbtyxhfi.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1829b90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1829887b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1829887988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b18298867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkbtyxhfi                        0x00005608609cb629 <unavailable> + 5673\n5    libc.so.6                          0x00002b1829d7c460 __libc_start_main + 245\n6    tmpkbtyxhfi                        0x00005608609cb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for arr in lst {\n        if arr.count > max_length {\n            max_length = arr.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var cur_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                cur_length += 1\n            } else {\n                cur_length = 0\n            }\n            if cur_length > max_length {\n                max_length = cur_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpv_ny3w26/tmpv_ny3w26.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99c907dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99c8d74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99c8d74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99c8d737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv_ny3w26                        0x000056205d04c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b99c9269460 __libc_start_main + 245\n6    tmpv_ny3w26                        0x000056205d04c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var len = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                len += 1\n            } else {\n                len = 0\n            }\n            max_len = max(max_len, len)\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmprwsvu9i3/tmprwsvu9i3.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d1e44ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d1e145b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d1e145988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d1e1447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprwsvu9i3                        0x000055df2c7f46c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b0d1e63a460 __libc_start_main + 245\n6    tmprwsvu9i3                        0x000055df2c7f4289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_array = lst[i]\n        var length = 0\n        for j in 0..<sub_array.count {\n            if sub_array[j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpxybyr5_0/tmpxybyr5_0.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b321c17dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b321be74b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b321be74988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b321be737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxybyr5_0                        0x000055ae59338629 <unavailable> + 5673\n5    libc.so.6                          0x00002b321c369460 __libc_start_main + 245\n6    tmpxybyr5_0                        0x000055ae593381e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        let sub_array = lst[i]\n        if sub_array.count > max_length {\n            max_length = sub_array.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    var length = 0\n    for i in 0..<lst.count {\n        length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n        }\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpjgdxn7u_/tmpjgdxn7u_.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b78fb376c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b78fb06db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b78fb06d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b78fb06c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjgdxn7u_                        0x0000557509cb6629 <unavailable> + 5673\n5    libc.so.6                          0x00002b78fb562460 __libc_start_main + 245\n6    tmpjgdxn7u_                        0x0000557509cb61e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_lst in lst {\n        if sub_lst.count > max_length {\n            max_length = sub_lst.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                count += 1\n            } else {\n                count = 0\n            }\n            if count > max_length {\n                max_length = count\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp73kibh4q/tmp73kibh4q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae449464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae44915bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae44915b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae44915a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73kibh4q                        0x0000558aa9e70629 <unavailable> + 5673\n5    libc.so.6                          0x00002ae449650460 __libc_start_main + 245\n6    tmp73kibh4q                        0x0000558aa9e701e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var count = 0\n    var dict = [Int: Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        count += lst[i][0] == 0 ? -1 : 1\n        if let val = dict[count] {\n            max_len = max(max_len, i - val)\n        } else {\n            dict[count] = i\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpygg9n5s0/tmpygg9n5s0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b02a69b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b02a66acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b02a66ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02a66ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpygg9n5s0                        0x000055e1e37af799 <unavailable> + 6041\n5    libc.so.6                          0x00002b02a6ba1460 __libc_start_main + 245\n6    tmpygg9n5s0                        0x000055e1e37af359 <unavailable> + 4953\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_array in lst {\n        if sub_array.count > max_length {\n            max_length = sub_array.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n            else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp7ekr22zs/tmp7ekr22zs.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d9edb8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d9eaafb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d9eaaf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d9eaae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ekr22zs                        0x00005636db12c629 <unavailable> + 5673\n5    libc.so.6                          0x00002b4d9efa4460 __libc_start_main + 245\n6    tmp7ekr22zs                        0x00005636db12c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    var length = 0\n    for i in 0..<lst.count {\n        length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpvkel0wmp/tmpvkel0wmp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5111694c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b511138bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b511138b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b511138a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvkel0wmp                        0x000055fc52ccf629 <unavailable> + 5673\n5    libc.so.6                          0x00002b5111880460 __libc_start_main + 245\n6    tmpvkel0wmp                        0x000055fc52ccf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var curr_len = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_len += 1\n            } else {\n                curr_len = 0\n            }\n            if curr_len > max_len {\n                max_len = curr_len\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpdamb4dyg/tmpdamb4dyg.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17780c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1777dbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1777dbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1777dba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdamb4dyg                        0x000055a3a9311629 <unavailable> + 5673\n5    libc.so.6                          0x00002b17782b0460 __libc_start_main + 245\n6    tmpdamb4dyg                        0x000055a3a93111e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j + 1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpl41z_x7t/tmpl41z_x7t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c56a4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c56741b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c56741988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c567407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl41z_x7t                        0x000056001556b6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b1c56c36460 __libc_start_main + 245\n6    tmpl41z_x7t                        0x000056001556b289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                sub_length += 1\n            } else {\n                sub_length = 0\n            }\n            if sub_length > max_length {\n                max_length = sub_length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpsh_bn5b2/tmpsh_bn5b2.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0322a5fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0322756b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0322756988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03227557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsh_bn5b2                        0x000055e241456629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0322c4b460 __libc_start_main + 245\n6    tmpsh_bn5b2                        0x000055e2414561e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            var length = 0\n            var k = j\n            while k < lst[i].count && lst[i][k] == 1 {\n                length += 1\n                k += 1\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp4kg57x1u/tmp4kg57x1u.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aecf2888c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aecf257fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aecf257f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aecf257e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kg57x1u                        0x000055eb64850629 <unavailable> + 5673\n5    libc.so.6                          0x00002aecf2a74460 __libc_start_main + 245\n6    tmp4kg57x1u                        0x000055eb648501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j+1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpm74qi93x/tmpm74qi93x.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b85bb1abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85baea2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85baea2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85baea17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm74qi93x                        0x000055e65dadd6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b85bb397460 __libc_start_main + 245\n6    tmpm74qi93x                        0x000055e65dadd289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length -= 1\n            }\n            if length == 0 {\n                max_length = max(max_length, j+1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp1mqj51fx/tmp1mqj51fx.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b013bb05c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b013b7fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b013b7fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b013b7fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1mqj51fx                        0x00005559616146c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b013bcf1460 __libc_start_main + 245\n6    tmp1mqj51fx                        0x0000555961614289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max = max > j+1 ? max : j+1\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpp2c526wg/tmpp2c526wg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b208589dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2085594b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2085594988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20855937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp2c526wg                        0x000055856b867629 <unavailable> + 5673\n5    libc.so.6                          0x00002b2085a89460 __libc_start_main + 245\n6    tmpp2c526wg                        0x000055856b8671e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    var count = 0\n    var dict = [Int: Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        count += lst[i] == [0] ? -1 : 1\n        if let value = dict[count] {\n            max_len = max(max_len, i - value)\n        } else {\n            dict[count] = i\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmp040rkdht/tmp040rkdht.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2ddf30bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ddf002b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2ddf002988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2ddf0017b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp040rkdht                        0x000055add23f77a9 <unavailable> + 6057\n5    libc.so.6                          0x00002b2ddf4f7460 __libc_start_main + 245\n6    tmp040rkdht                        0x000055add23f7369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_length = max(max_length, j+1)\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpkk4ncwga/tmpkk4ncwga.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92c7f13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92c7c0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92c7c0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92c7c097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkk4ncwga                        0x0000555f7ce036c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b92c80ff460 __libc_start_main + 245\n6    tmpkk4ncwga                        0x0000555f7ce03289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            max_length = max(max_length, lst[i][j])\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpbtqts08w/tmpbtqts08w.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b69958cec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b69955c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b69955c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69955c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbtqts08w                        0x000055577fb4d6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002b6995aba460 __libc_start_main + 245\n6    tmpbtqts08w                        0x000055577fb4d289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            max_length = max(max_length, length)\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124224,
      "stdout": "",
      "stderr": "tmpq7i5vly0/tmpq7i5vly0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7dabc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7da8bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7da8bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7da8bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq7i5vly0                        0x00005597074016c9 <unavailable> + 5833\n5    libc.so.6                          0x00002ad7dadb1460 __libc_start_main + 245\n6    tmpq7i5vly0                        0x0000559707401289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmp5m8kjhnj/tmp5m8kjhnj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af107f06c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af107bfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af107bfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af107bfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5m8kjhnj                        0x00005565874fe6c9 <unavailable> + 5833\n5    libc.so.6                          0x00002af1080f2460 __libc_start_main + 245\n6    tmp5m8kjhnj                        0x00005565874fe289 <unavailable> + 4745\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "tmpicdl1ktq/tmpicdl1ktq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0206b6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0206865b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0206865988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02068647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpicdl1ktq                        0x00005593b3609629 <unavailable> + 5673\n5    libc.so.6                          0x00002b0206d5a460 __libc_start_main + 245\n6    tmpicdl1ktq                        0x00005593b36091e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}