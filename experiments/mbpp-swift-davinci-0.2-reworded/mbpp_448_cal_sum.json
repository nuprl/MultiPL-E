{
  "name": "mbpp_448_cal_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(cal_sum(n: 9) == 49)\nassert(cal_sum(n: 10) == 66)\nassert(cal_sum(n: 11) == 88)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var sum = 0\n    for i in 0...n {\n        sum += perrin(n: i)\n    }\n    return sum",
    "    var perrin_numbers = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin_numbers[n]\n    }\n    for _ in 3...n {\n        perrin_numbers[0] = perrin_numbers[1]\n        perrin_numbers[1] = perrin_numbers[2]\n        perrin_numbers[2] = perrin_numbers[0] + perrin_numbers[1]\n    }\n    for i in 0...2 {\n        sum += perrin_numbers[i]\n    }\n    return sum",
    "    var sum = 0\n    var perrin = [3, 0, 2]\n    for _ in 0..<n {\n        sum += perrin[2]\n        perrin[0] = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0] + perrin[1]\n    }\n    return sum",
    "    var sum = 0\n    var perrin_numbers = [3, 0, 2]\n    if n <= 3 {\n        return perrin_numbers[n - 1]\n    }\n    for _ in 4...n {\n        let temp = perrin_numbers[0] + perrin_numbers[2]\n        perrin_numbers[0] = perrin_numbers[1]\n        perrin_numbers[1] = perrin_numbers[2]\n        perrin_numbers[2] = temp\n    }\n    for i in perrin_numbers {\n        sum += i\n    }\n    return sum",
    "    var sum = 0\n    var perrin = [3, 0, 2]\n    for i in 3...n {\n        perrin[0] = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0] + perrin[1]\n        sum += perrin[2]\n    }\n    return sum",
    "    var perrin = [3, 0, 2]\n    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    }\n    for _ in 3...n {\n        let temp = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0] + perrin[1]\n        perrin[0] = temp\n    }\n    return perrin[0] + perrin[1] + perrin[2]",
    "    var perrin_numbers = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin_numbers[n]\n    }\n    for i in 3...n {\n        perrin_numbers.append(perrin_numbers[i-2] + perrin_numbers[i-3])\n    }\n    for i in 0...n {\n        sum += perrin_numbers[i]\n    }\n    return sum",
    "    var perrin_numbers = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin_numbers[n]\n    }\n    for _ in 3...n {\n        let temp = perrin_numbers[0] + perrin_numbers[1]\n        perrin_numbers[0] = perrin_numbers[1]\n        perrin_numbers[1] = perrin_numbers[2]\n        perrin_numbers[2] = temp\n    }\n    for i in 0...2 {\n        sum += perrin_numbers[i]\n    }\n    return sum",
    "    var perrin: [Int] = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin[n]\n    }\n    for i in 3...n {\n        perrin.append(perrin[i-2] + perrin[i-3])\n        sum += perrin[i]\n    }\n    return sum",
    "    var sum = 0\n    for i in 0...n {\n        sum += perrin(n: i)\n    }\n    return sum",
    "    var sum = 0\n    for i in 0...n {\n        sum += perrin(n: i)\n    }\n    return sum",
    "    var sum = 0\n    var perrin = [3, 0, 2]\n    for i in 3...n {\n        perrin[i % 3] = perrin[(i - 2) % 3] + perrin[(i - 3) % 3]\n        sum += perrin[i % 3]\n    }\n    return sum",
    "    var sum = 0\n    var perrin = [3, 0, 2]\n    for i in 3...n {\n        let tmp = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0]\n        perrin[0] = tmp + perrin[1]\n        sum += perrin[0]\n    }\n    return sum",
    "    var perrin_numbers = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin_numbers[n]\n    }\n    for _ in 3...n {\n        let new_number = perrin_numbers[0] + perrin_numbers[2]\n        perrin_numbers[0] = perrin_numbers[1]\n        perrin_numbers[1] = perrin_numbers[2]\n        perrin_numbers[2] = new_number\n    }\n    for i in 0...2 {\n        sum += perrin_numbers[i]\n    }\n    return sum",
    "    var perrin = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin[n]\n    }\n    for _ in 3...n {\n        perrin[0] = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0] + perrin[1]\n    }\n    for i in 0...2 {\n        sum += perrin[i]\n    }\n    return sum",
    "    var sum = 0\n    for i in 0...n {\n        sum += perrin(n: i)\n    }\n    return sum",
    "    var perrin_nums = [3, 0, 2]\n    var sum = 0\n    if n < 3 {\n        return perrin_nums[n]\n    }\n    for i in 3...n {\n        perrin_nums[0] = perrin_nums[1]\n        perrin_nums[1] = perrin_nums[2]\n        perrin_nums[2] = perrin_nums[0] + perrin_nums[1]\n    }\n    sum = perrin_nums[0] + perrin_nums[1] + perrin_nums[2]\n    return sum",
    "    var sum = 0\n    var perrin_numbers = [3, 0, 2]\n    for i in 3...n {\n        perrin_numbers.append(perrin_numbers[i-2] + perrin_numbers[i-3])\n    }\n    for i in 0...n {\n        sum += perrin_numbers[i]\n    }\n    return sum",
    "    var perrin_nums = [3, 0, 2]\n    if n < 3 {\n        return perrin_nums[n]\n    }\n    for _ in 3...n {\n        let temp = perrin_nums[0] + perrin_nums[2]\n        perrin_nums[0] = perrin_nums[1]\n        perrin_nums[1] = perrin_nums[2]\n        perrin_nums[2] = temp\n    }\n    return perrin_nums[2]",
    "    var sum = 0\n    var perrin = [3, 0, 2]\n    for _ in 0..<n {\n        sum += perrin[2]\n        perrin[0] = perrin[1]\n        perrin[1] = perrin[2]\n        perrin[2] = perrin[0] + perrin[1]\n    }\n    return sum"
  ]
}