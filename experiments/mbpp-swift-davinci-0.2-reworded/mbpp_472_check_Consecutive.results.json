{
  "name": "mbpp_472_check_Consecutive",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        for i in min...max {\n            if !l.contains(i) {\n                isConsecutive = false\n                break\n            }\n        }\n    } else {\n        isConsecutive = false\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    let min = l.min()!\n    let max = l.max()!\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var max = l[0]\n    var min = l[0]\n    for i in l {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        for i in min...max {\n            if !l.contains(i) {\n                flag = false\n            }\n        }\n    } else {\n        flag = false\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var result = true\n    let sortedList = l.sorted()\n    for i in 0..<sortedList.count - 1 {\n        if sortedList[i] + 1 != sortedList[i + 1] {\n            result = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    let sortedArray = l.sorted()\n    for i in 0..<sortedArray.count - 1 {\n        if sortedArray[i] + 1 != sortedArray[i + 1] {\n            isConsecutive = false\n            break\n        }\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = false\n    for i in 0..<l.count - 1 {\n        if l[i] == l[i + 1] - 1 {\n            isConsecutive = true\n        } else {\n            isConsecutive = false\n            break\n        }\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()\n    let min = l.min()\n    if (max! - min! + 1) == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var a = l.sorted()\n    for i in 0..<a.count-1 {\n        if a[i+1] - a[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min + 1 == l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = false\n    if l.count == 0 {\n        return flag\n    }\n    let min = l.min()!\n    let max = l.max()!\n    if max - min + 1 == l.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var result = true\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var temp = l.sorted()\n    var flag = true\n    for i in 0..<temp.count-1 {\n        if temp[i+1] - temp[i] == 1 {\n            continue\n        }\n        else {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let min = l.min()!\n    let max = l.max()!\n    if (max - min + 1) == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l.sorted()\n    for i in 1..<l.count {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        for i in min ... max {\n            if !l.contains(i) {\n                isConsecutive = false\n                break\n            }\n        }\n    } else {\n        isConsecutive = false\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        for i in min...max {\n            if !l.contains(i) {\n                isConsecutive = false\n                break\n            }\n        }\n    } else {\n        isConsecutive = false\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count-1 {\n        if sorted[i+1] - sorted[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l.sorted()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    var min = l[0]\n    var max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var arr = l.sorted()\n    var flag = true\n    for i in 0..<arr.count-1 {\n        if arr[i+1] - arr[i] != 1 {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var n = l.count\n    var min = l[0]\n    var max = l[0]\n    for i in 0..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    let min = l.min()!\n    let max = l.max()!\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()\n    let min = l.min()\n    if n == max! - min! + 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return (max - min + 1) == l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var sorted_list = l.sorted()\n    for i in 0..<sorted_list.count-1 {\n        if sorted_list[i+1] - sorted_list[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return (max - min + 1) == l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()!\n    let min = l.min()!\n    if (max - min + 1) == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let min = l.min()!\n    let max = l.max()!\n    if (max - min + 1 == n) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    for i in 0..<l.count-1 {\n        if l[i] != l[i+1]-1 {\n            isConsecutive = false\n            break\n        }\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    var min = l[0]\n    var max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()\n    let min = l.min()\n    if (max! - min! + 1 == n) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var result = true\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            result = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    var min = l[0]\n    var max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    let min = l.min()!\n    let max = l.max()!\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    var min = l[0]\n    var max = l[0]\n    for i in 0..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var max = l[0]\n    var min = l[0]\n    for i in l {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = true\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var arr = l.sorted()\n    var count = 0\n    for i in 0..<arr.count-1 {\n        if arr[i+1] - arr[i] == 1 {\n            count += 1\n        }\n    }\n    if count == arr.count-1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] == 1 {\n            count += 1\n        }\n    }\n    if count == l.count-1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    var min = l[0]\n    var max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l.sorted()\n    for i in 0..<l.count - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var result = true\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            result = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var max = l[0]\n    var min = l[0]\n    for i in l {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l.sorted()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in 0..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n        if l[i] < min {\n            min = l[i]\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        for i in min...max {\n            if !l.contains(i) {\n                isConsecutive = false\n                break\n            }\n        }\n    } else {\n        isConsecutive = false\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        isConsecutive = true\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l.sorted()\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return (max - min + 1) == l.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    if l.count == 0 {\n        return false\n    }\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        isConsecutive = true\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    let min = l.min()!\n    let max = l.max()!\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    var min = l[0], max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    if n < 1 {\n        return false\n    }\n    var min = l[0]\n    var max = l[0]\n    for i in 1..<n {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = false\n    for i in 0..<l.count - 1 {\n        if l[i] + 1 == l[i + 1] {\n            flag = true\n        } else {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "tmpwtzx4zyg/tmpwtzx4zyg.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9b3116c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9b2e0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9b2e0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9b2e0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwtzx4zyg                        0x0000563b29ddf619 <unavailable> + 5657\n5    libc.so.6                          0x00002ab9b3302460 __libc_start_main + 245\n6    tmpwtzx4zyg                        0x0000563b29ddf1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if (max - min + 1) == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i] != l[i+1]-1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var flag = true\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        for i in min...max {\n            if !l.contains(i) {\n                flag = false\n            }\n        }\n    } else {\n        flag = false\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let min = l.min()!\n    let max = l.max()!\n    if (max - min + 1 == n) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let min = l.min()\n    let max = l.max()\n    if (max! - min! + 1) == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        } else if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = false\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        isConsecutive = true\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()\n    let min = l.min()\n    if (n == (max! - min! + 1)) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var max = l[0]\n    var min = l[0]\n    for i in l {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count-1 {\n        if sorted[i+1] - sorted[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count - 1 {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count-1 {\n        if sorted[i+1] - sorted[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let sorted = l.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] + 1 != sorted[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let min = l.min()!\n    let max = l.max()!\n    let diff = max - min\n    if diff == l.count - 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var isConsecutive = true\n    for i in 0..<l.count - 1 {\n        if l[i] + 1 != l[i + 1] {\n            isConsecutive = false\n            break\n        }\n    }\n    return isConsecutive\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    let n = l.count\n    let max = l.max()\n    let min = l.min()\n    if (max! - min! + 1 == n) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var count = 0\n    for i in 0..<l.count {\n        if l[i] + 1 == l[i + 1] {\n            count += 1\n        }\n    }\n    return count == l.count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab80d96dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab80d664561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab80d664286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab80d66413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab80d663bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ab80d464e83 <unavailable> + 188035\n6    tmpl8mpvwdt                        0x00005574f0ab1889 <unavailable> + 6281\n7    tmpl8mpvwdt                        0x00005574f0ab14d5 <unavailable> + 5333\n8    libc.so.6                          0x00002ab80db59460 __libc_start_main + 245\n9    tmpl8mpvwdt                        0x00005574f0ab11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in 0..<l.count {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var l = l\n    l.sort()\n    for i in 0..<l.count-1 {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var arr = l.sorted()\n    for i in 0..<arr.count-1 {\n        if arr[i+1] - arr[i] == 1 {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in l {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1665509991,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var min = l[0]\n    var max = l[0]\n    for i in 0..<l.count {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == l.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether the given array contains consecutive numbers or not.\nfunc check_Consecutive(l: [Int]) -> Bool {\n    var m = l.sorted()\n    for i in 0..<m.count-1 {\n        if m[i+1] - m[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)\nassert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)\nassert(check_Consecutive(l: [1, 2, 1]) == false)",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}