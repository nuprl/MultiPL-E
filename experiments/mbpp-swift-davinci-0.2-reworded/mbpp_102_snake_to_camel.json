{
  "name": "mbpp_102_snake_to_camel",
  "language": "swift",
  "prompt": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var shouldCapitalize = false\n    for char in word {\n        if char == \"_\" {\n            shouldCapitalize = true\n        } else {\n            if shouldCapitalize {\n                result.append(char.uppercased())\n                shouldCapitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercase())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var word = word\n    while word.characters.count > 0 {\n        if word.hasPrefix(\"_\") {\n            result.append(word.remove(at: word.startIndex))\n        } else {\n            result.append(word.remove(at: word.startIndex).uppercased())\n        }\n    }\n    return result",
    "    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel",
    "    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n            continue\n        }\n        if capitalizeNext {\n            result.append(char.uppercase())\n            capitalizeNext = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result",
    "    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel",
    "    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n            } else {\n                result.append(c)\n            }\n            next_upper = false\n        }\n    }\n    return result",
    "    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    return word.split(separator: \"_\").enumerated().map { $0.offset == 0 ? $0.element : $0.element.capitalized }.joined()",
    "    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result",
    "    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercase())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result",
    "    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result"
  ]
}