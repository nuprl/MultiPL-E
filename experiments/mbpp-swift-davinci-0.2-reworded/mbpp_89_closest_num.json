{
  "name": "mbpp_89_closest_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return -1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))",
    "    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1",
    "    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1",
    "    var n = N\n    var count = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            break\n        }\n        count += 1\n        n >>= 1\n    }\n    return N - (1 << count)",
    "    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)",
    "    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p < N {\n        p <<= 1\n    }\n    return p >> 1",
    "    var N = N\n    var i = 0\n    var j = 0\n    while N > 0 {\n        if N & 1 == 1 {\n            i = j\n        }\n        j += 1\n        N >>= 1\n    }\n    return N | (1 << i)",
    "    var n = N\n    var i = 1\n    while n > 0 {\n        if n % 10 == 0 {\n            n -= 1\n        } else {\n            n -= i\n        }\n        i *= 10\n    }\n    return n",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))",
    "    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c0) + (1 << (c1 - 1)) - 1",
    "    var num = N\n    var i = 0\n    var j = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            i = j\n        }\n        j += 1\n        num >>= 1\n    }\n    return N & ~(1 << i)",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1",
    "    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        mask <<= 1\n    }\n    mask >>= 1\n    mask -= 1\n    return N & mask",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        mask <<= 1\n    }\n    mask >>= 2\n    var result = N\n    while mask > 0 {\n        if (result & mask) == 0 {\n            result |= mask\n            mask >>= 1\n        } else {\n            result &= ~mask\n            mask >>= 2\n        }\n    }\n    return result",
    "    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    return N - p + (1 << (c0 - 1)) - 1",
    "    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)"
  ]
}