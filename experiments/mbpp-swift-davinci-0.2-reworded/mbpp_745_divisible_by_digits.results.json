{
  "name": "mbpp_745_divisible_by_digits",
  "language": "swift",
  "prompt": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmppna527nc.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmppna527nc.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmppna527nc.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9cgmo7ld.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9cgmo7ld.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9cgmo7ld.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0dc3c73c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0dc396a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0dc396a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0dc396a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0dc3969bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpr3k7mmnn                        0x000055f540abbfb7 <unavailable> + 8119\n6    tmpr3k7mmnn                        0x000055f540abc6e0 <unavailable> + 9952\n7    libswiftCore.so                    0x00002b0dc3a79200 Sequence.allSatisfy(_:) + 432\n8    tmpr3k7mmnn                        0x000055f540abbe17 <unavailable> + 7703\n9    libswiftCore.so                    0x00002b0dc39676e0 _ArrayProtocol.filter(_:) + 518\n10   tmpr3k7mmnn                        0x000055f540abbc86 <unavailable> + 7302\n11   tmpr3k7mmnn                        0x000055f540abb860 <unavailable> + 6240\n12   libc.so.6                          0x00002b0dc3e5f460 __libc_start_main + 245\n13   tmpr3k7mmnn                        0x000055f540abb579 <unavailable> + 5497\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpqf01adjr.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a01aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af29fea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af29fea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af29fea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af29fea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8go6y5mo                        0x000055dbef055fc7 <unavailable> + 8135\n6    tmp8go6y5mo                        0x000055dbef0564a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002af29ffb0200 Sequence.allSatisfy(_:) + 432\n8    tmp8go6y5mo                        0x000055dbef055dce <unavailable> + 7630\n9    tmp8go6y5mo                        0x000055dbef0557b0 <unavailable> + 6064\n10   libc.so.6                          0x00002af2a0396460 __libc_start_main + 245\n11   tmp8go6y5mo                        0x000055dbef0554c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var digits: [Int] = []\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({i % $0 == 0}).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5e6265c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5e5f5c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae5e5f5c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae5e5f5c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae5e5f5bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpn3s3l2ym                        0x00005598631d7f17 <unavailable> + 7959\n6    tmpn3s3l2ym                        0x00005598631d83d0 <unavailable> + 9168\n7    libswiftCore.so                    0x00002ae5e5f596e0 _ArrayProtocol.filter(_:) + 518\n8    tmpn3s3l2ym                        0x00005598631d7d44 <unavailable> + 7492\n9    tmpn3s3l2ym                        0x00005598631d75b0 <unavailable> + 5552\n10   libc.so.6                          0x00002ae5e6451460 __libc_start_main + 245\n11   tmpn3s3l2ym                        0x00005598631d72c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmppna527nc.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmppna527nc.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmppna527nc.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for num in startnum...endnum {\n        var digits = [Int]()\n        var numCopy = num\n        while numCopy > 0 {\n            digits.append(numCopy % 10)\n            numCopy /= 10\n        }\n        var isDivisible = true\n        for digit in digits {\n            if num % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aceabe02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aceabaf9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aceabaf9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aceabaf913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aceabaf8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp3vb3y4cc                        0x000055fa4fde6e9f <unavailable> + 7839\n6    tmp3vb3y4cc                        0x000055fa4fde6650 <unavailable> + 5712\n7    libc.so.6                          0x00002aceabfee460 __libc_start_main + 245\n8    tmp3vb3y4cc                        0x000055fa4fde6369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfb8b28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfb881f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abfb881f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abfb881f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abfb881ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpxfvcbyl6                        0x0000561afa3caeae <unavailable> + 7854\n6    tmpxfvcbyl6                        0x0000561afa3ca770 <unavailable> + 6000\n7    libc.so.6                          0x00002abfb8d14460 __libc_start_main + 245\n8    tmpxfvcbyl6                        0x0000561afa3ca489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for digit in String(i) {\n            if i % Int(String(digit)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmpdrooo34r.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(digit)) != 0 {\n                   ^\n/tmp/tmpdrooo34r.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                   (                  ?? <#default value#>)\n/tmp/tmpdrooo34r.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                                     !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfbc7b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfbc4ad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adfbc4ad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adfbc4ad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adfbc4acbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpgmm05z7v                        0x000055ebcbf05f77 <unavailable> + 8055\n6    tmpgmm05z7v                        0x000055ebcbf06430 <unavailable> + 9264\n7    libswiftCore.so                    0x00002adfbc4aa6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpgmm05z7v                        0x000055ebcbf05da6 <unavailable> + 7590\n9    tmpgmm05z7v                        0x000055ebcbf05610 <unavailable> + 5648\n10   libc.so.6                          0x00002adfbc9a2460 __libc_start_main + 245\n11   tmpgmm05z7v                        0x000055ebcbf05329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a01aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af29fea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af29fea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af29fea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af29fea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8go6y5mo                        0x000055dbef055fc7 <unavailable> + 8135\n6    tmp8go6y5mo                        0x000055dbef0564a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002af29ffb0200 Sequence.allSatisfy(_:) + 432\n8    tmp8go6y5mo                        0x000055dbef055dce <unavailable> + 7630\n9    tmp8go6y5mo                        0x000055dbef0557b0 <unavailable> + 6064\n10   libc.so.6                          0x00002af2a0396460 __libc_start_main + 245\n11   tmp8go6y5mo                        0x000055dbef0554c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad4a89bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad4a86b2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad4a86b2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad4a86b213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad4a86b1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpbposlemi                        0x00005578b04cae69 <unavailable> + 7785\n6    tmpbposlemi                        0x00005578b04ca720 <unavailable> + 5920\n7    libc.so.6                          0x00002ad4a8ba7460 __libc_start_main + 245\n8    tmpbposlemi                        0x00005578b04ca439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for num in startnum...endnum {\n        var digits: [Int] = []\n        var num_copy = num\n        while num_copy > 0 {\n            digits.append(num_copy % 10)\n            num_copy /= 10\n        }\n        if digits.allSatisfy({ num % $0 == 0 }) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8c2305c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8c1ffc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af8c1ffc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af8c1ffc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af8c1ffbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpcrpf850x                        0x000055ffde886e37 <unavailable> + 7735\n6    tmpcrpf850x                        0x000055ffde8872f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002af8c210b200 Sequence.allSatisfy(_:) + 432\n8    tmpcrpf850x                        0x000055ffde886caf <unavailable> + 7343\n9    tmpcrpf850x                        0x000055ffde886500 <unavailable> + 5376\n10   libc.so.6                          0x00002af8c24f1460 __libc_start_main + 245\n11   tmpcrpf850x                        0x000055ffde886219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e6121bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e60f12561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7e60f12286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7e60f1213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7e60f11bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpx98qm7lm                        0x0000562e88837e37 <unavailable> + 7735\n6    tmpx98qm7lm                        0x0000562e888382f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002b7e61021200 Sequence.allSatisfy(_:) + 432\n8    tmpx98qm7lm                        0x0000562e88837caf <unavailable> + 7343\n9    tmpx98qm7lm                        0x0000562e88837500 <unavailable> + 5376\n10   libc.so.6                          0x00002b7e61407460 __libc_start_main + 245\n11   tmpx98qm7lm                        0x0000562e88837219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmp2cvofqci.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmp_m7tacxm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b692f316c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b692f00d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b692f00d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b692f00d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b692f00cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqfrgqmat                        0x000055947b117e77 <unavailable> + 7799\n6    tmpqfrgqmat                        0x000055947b118330 <unavailable> + 9008\n7    libswiftCore.so                    0x00002b692f11c200 Sequence.allSatisfy(_:) + 432\n8    tmpqfrgqmat                        0x000055947b117ceb <unavailable> + 7403\n9    tmpqfrgqmat                        0x000055947b117560 <unavailable> + 5472\n10   libc.so.6                          0x00002b692f502460 __libc_start_main + 245\n11   tmpqfrgqmat                        0x000055947b117279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmpw67a7hpy.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmpw67a7hpy.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmpw67a7hpy.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmp01pgk3x7.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpqf01adjr.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            temp = temp / 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad746196c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad745e8d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad745e8d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad745e8d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad745e8cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwu41cz6c                        0x00005570ea500e69 <unavailable> + 7785\n6    tmpwu41cz6c                        0x00005570ea500720 <unavailable> + 5920\n7    libc.so.6                          0x00002ad746382460 __libc_start_main + 245\n8    tmpwu41cz6c                        0x00005570ea500439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var digits = [Int]()\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        var flag = true\n        for digit in digits {\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba49fd16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba49fa0d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba49fa0d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba49fa0d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba49fa0cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp68hamvn3                        0x000055f5baebde95 <unavailable> + 7829\n6    tmp68hamvn3                        0x000055f5baebd650 <unavailable> + 5712\n7    libc.so.6                          0x00002ba49ff02460 __libc_start_main + 245\n8    tmp68hamvn3                        0x000055f5baebd369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2f2dedc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2f2ae4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae2f2ae4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae2f2ae413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae2f2ae3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpmvlf59yo                        0x0000560314d34eae <unavailable> + 7854\n6    tmpmvlf59yo                        0x0000560314d34770 <unavailable> + 6000\n7    libc.so.6                          0x00002ae2f2fd9460 __libc_start_main + 245\n8    tmpmvlf59yo                        0x0000560314d34489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{Int(String($0))}\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abce770fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abce7406561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002abce7406286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002abce740613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002abce7405bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1mz_rrzt                        0x0000563dda41efc7 <unavailable> + 8135\n6    tmp1mz_rrzt                        0x0000563dda41f4a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002abce7515200 Sequence.allSatisfy(_:) + 432\n8    tmp1mz_rrzt                        0x0000563dda41edce <unavailable> + 7630\n9    tmp1mz_rrzt                        0x0000563dda41e7b0 <unavailable> + 6064\n10   libc.so.6                          0x00002abce78fb460 __libc_start_main + 245\n11   tmp1mz_rrzt                        0x0000563dda41e4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var digits = [Int]()\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({i % $0 == 0}).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e8af7ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e8ac71561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9e8ac71286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9e8ac7113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9e8ac70bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp2bt04v26                        0x000055b8dd720f67 <unavailable> + 8039\n6    tmp2bt04v26                        0x000055b8dd721420 <unavailable> + 9248\n7    libswiftCore.so                    0x00002b9e8ac6e6e0 _ArrayProtocol.filter(_:) + 518\n8    tmp2bt04v26                        0x000055b8dd720d8e <unavailable> + 7566\n9    tmp2bt04v26                        0x000055b8dd720610 <unavailable> + 5648\n10   libc.so.6                          0x00002b9e8b166460 __libc_start_main + 245\n11   tmp2bt04v26                        0x000055b8dd720329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var temp = i\n        var isDivisible = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 {\n                isDivisible = false\n                break\n            }\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            temp /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a01aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af29fea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af29fea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af29fea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af29fea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8go6y5mo                        0x000055dbef055fc7 <unavailable> + 8135\n6    tmp8go6y5mo                        0x000055dbef0564a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002af29ffb0200 Sequence.allSatisfy(_:) + 432\n8    tmp8go6y5mo                        0x000055dbef055dce <unavailable> + 7630\n9    tmp8go6y5mo                        0x000055dbef0557b0 <unavailable> + 6064\n10   libc.so.6                          0x00002af2a0396460 __libc_start_main + 245\n11   tmp8go6y5mo                        0x000055dbef0554c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        let digits = Array(String(i))\n        for digit in digits {\n            if i % Int(String(digit))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b097cdc8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b097cabf561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b097cabf286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b097cabf13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b097cabebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpgp6iciu0                        0x0000563fdfcd612f <unavailable> + 8495\n6    tmpgp6iciu0                        0x0000563fdfcd5940 <unavailable> + 6464\n7    libc.so.6                          0x00002b097cfb4460 __libc_start_main + 245\n8    tmpgp6iciu0                        0x0000563fdfcd5659 <unavailable> + 5721\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var temp = i\n        while temp > 0 {\n            digits.append(temp % 10)\n            temp /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e26f0ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e26c01561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7e26c01286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7e26c0113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7e26c00bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp0j54uc90                        0x0000559e932e1e37 <unavailable> + 7735\n6    tmp0j54uc90                        0x0000559e932e22f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002b7e26d10200 Sequence.allSatisfy(_:) + 432\n8    tmp0j54uc90                        0x0000559e932e1caf <unavailable> + 7343\n9    tmp0j54uc90                        0x0000559e932e1500 <unavailable> + 5376\n10   libc.so.6                          0x00002b7e270f6460 __libc_start_main + 245\n11   tmp0j54uc90                        0x0000559e932e1219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        let digits = String($0).map { Int(String($0))! }\n        return digits.allSatisfy {n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp9ia2zpkt.swift:6:1070: error: '$' is not an identifier; use backticks to escape it\n        return digits.allSatisfy {n
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e6121bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e60f12561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7e60f12286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7e60f1213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7e60f11bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpx98qm7lm                        0x0000562e88837e37 <unavailable> + 7735\n6    tmpx98qm7lm                        0x0000562e888382f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002b7e61021200 Sequence.allSatisfy(_:) + 432\n8    tmpx98qm7lm                        0x0000562e88837caf <unavailable> + 7343\n9    tmpx98qm7lm                        0x0000562e88837500 <unavailable> + 5376\n10   libc.so.6                          0x00002b7e61407460 __libc_start_main + 245\n11   tmpx98qm7lm                        0x0000562e88837219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var digits = [Int]()\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae33af34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae33ac2b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae33ac2b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae33ac2b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae33ac2abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp7twwzt1a                        0x0000562f720e7f67 <unavailable> + 8039\n6    tmp7twwzt1a                        0x0000562f720e8420 <unavailable> + 9248\n7    libswiftCore.so                    0x00002ae33ac286e0 _ArrayProtocol.filter(_:) + 518\n8    tmp7twwzt1a                        0x0000562f720e7d8e <unavailable> + 7566\n9    tmp7twwzt1a                        0x0000562f720e7610 <unavailable> + 5648\n10   libc.so.6                          0x00002ae33b120460 __libc_start_main + 245\n11   tmp7twwzt1a                        0x0000562f720e7329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp3virz8aq.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp3virz8aq.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp3virz8aq.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = Array(String(i)).map { Int(String($0))! }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13bce96c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13bcb8d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b13bcb8d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b13bcb8d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b13bcb8cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwa72t170                        0x000055ea53c592b7 <unavailable> + 8887\n6    tmpwa72t170                        0x000055ea53c598d0 <unavailable> + 10448\n7    libswiftCore.so                    0x00002b13bcb8a6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpwa72t170                        0x000055ea53c58feb <unavailable> + 8171\n9    tmpwa72t170                        0x000055ea53c58990 <unavailable> + 6544\n10   libc.so.6                          0x00002b13bd082460 __libc_start_main + 245\n11   tmpwa72t170                        0x000055ea53c586a9 <unavailable> + 5801\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = Array(String(i)).map { Int(String($0))! }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8315e4cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8315b43561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8315b43286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8315b4313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8315b42bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp_xbmfn0x                        0x000056469e93c1c7 <unavailable> + 8647\n6    tmp_xbmfn0x                        0x000056469e93c7e0 <unavailable> + 10208\n7    libswiftCore.so                    0x00002b8315c52200 Sequence.allSatisfy(_:) + 432\n8    tmp_xbmfn0x                        0x000056469e93bf2f <unavailable> + 7983\n9    tmp_xbmfn0x                        0x000056469e93b8e0 <unavailable> + 6368\n10   libc.so.6                          0x00002b8316038460 __libc_start_main + 245\n11   tmp_xbmfn0x                        0x000056469e93b5f9 <unavailable> + 5625\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad746196c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad745e8d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad745e8d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad745e8d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad745e8cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwu41cz6c                        0x00005570ea500e69 <unavailable> + 7785\n6    tmpwu41cz6c                        0x00005570ea500720 <unavailable> + 5920\n7    libc.so.6                          0x00002ad746382460 __libc_start_main + 245\n8    tmpwu41cz6c                        0x00005570ea500439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp3xi27l7s.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp3xi27l7s.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp3xi27l7s.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86c543ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86c5131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b86c5131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b86c513113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b86c5130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmps08_ua5w                        0x0000559bcf368035 <unavailable> + 8245\n6    tmps08_ua5w                        0x0000559bcf367900 <unavailable> + 6400\n7    libc.so.6                          0x00002b86c5626460 __libc_start_main + 245\n8    tmps08_ua5w                        0x0000559bcf367619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).map { Int(String($0))! }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b7257dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b72274561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5b72274286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5b7227413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5b72273bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqxfi2fom                        0x0000561e7f778fe1 <unavailable> + 8161\n6    tmpqxfi2fom                        0x0000561e7f7788a0 <unavailable> + 6304\n7    libc.so.6                          0x00002b5b72769460 __libc_start_main + 245\n8    tmpqxfi2fom                        0x0000561e7f7785b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                divisible = false\n                break\n            }\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6181606c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b61812fd561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b61812fd286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b61812fd13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b61812fcbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp3qpephpa                        0x0000564760283e69 <unavailable> + 7785\n6    tmp3qpephpa                        0x0000564760283720 <unavailable> + 5920\n7    libc.so.6                          0x00002b61817f2460 __libc_start_main + 245\n8    tmp3qpephpa                        0x0000564760283439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86c543ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86c5131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b86c5131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b86c513113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b86c5130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmps08_ua5w                        0x0000559bcf368035 <unavailable> + 8245\n6    tmps08_ua5w                        0x0000559bcf367900 <unavailable> + 6400\n7    libc.so.6                          0x00002b86c5626460 __libc_start_main + 245\n8    tmps08_ua5w                        0x0000559bcf367619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var digits = [Int]()\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        var isDivisible = true\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4741be0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47418d7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b47418d7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b47418d713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b47418d6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpzytmovre                        0x0000561fabb0de95 <unavailable> + 7829\n6    tmpzytmovre                        0x0000561fabb0d650 <unavailable> + 5712\n7    libc.so.6                          0x00002b4741dcc460 __libc_start_main + 245\n8    tmpzytmovre                        0x0000561fabb0d369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a01aac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af29fea1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af29fea1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af29fea113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af29fea0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8go6y5mo                        0x000055dbef055fc7 <unavailable> + 8135\n6    tmp8go6y5mo                        0x000055dbef0564a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002af29ffb0200 Sequence.allSatisfy(_:) + 432\n8    tmp8go6y5mo                        0x000055dbef055dce <unavailable> + 7630\n9    tmp8go6y5mo                        0x000055dbef0557b0 <unavailable> + 6064\n10   libc.so.6                          0x00002af2a0396460 __libc_start_main + 245\n11   tmp8go6y5mo                        0x000055dbef0554c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e6121bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e60f12561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7e60f12286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7e60f1213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7e60f11bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpx98qm7lm                        0x0000562e88837e37 <unavailable> + 7735\n6    tmpx98qm7lm                        0x0000562e888382f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002b7e61021200 Sequence.allSatisfy(_:) + 432\n8    tmpx98qm7lm                        0x0000562e88837caf <unavailable> + 7343\n9    tmpx98qm7lm                        0x0000562e88837500 <unavailable> + 5376\n10   libc.so.6                          0x00002b7e61407460 __libc_start_main + 245\n11   tmpx98qm7lm                        0x0000562e88837219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var digits: [Int] = []\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab906081c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab905d78561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab905d78286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab905d7813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab905d77bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8767ivjb                        0x00005585f7035f17 <unavailable> + 7959\n6    tmp8767ivjb                        0x00005585f70363d0 <unavailable> + 9168\n7    libswiftCore.so                    0x00002ab905d756e0 _ArrayProtocol.filter(_:) + 518\n8    tmp8767ivjb                        0x00005585f7035d44 <unavailable> + 7492\n9    tmp8767ivjb                        0x00005585f70355b0 <unavailable> + 5552\n10   libc.so.6                          0x00002ab90626d460 __libc_start_main + 245\n11   tmp8767ivjb                        0x00005585f70352c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var digits: [Int] = []\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({i % $0 == 0}).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5e6265c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5e5f5c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae5e5f5c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae5e5f5c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae5e5f5bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpn3s3l2ym                        0x00005598631d7f17 <unavailable> + 7959\n6    tmpn3s3l2ym                        0x00005598631d83d0 <unavailable> + 9168\n7    libswiftCore.so                    0x00002ae5e5f596e0 _ArrayProtocol.filter(_:) + 518\n8    tmpn3s3l2ym                        0x00005598631d7d44 <unavailable> + 7492\n9    tmpn3s3l2ym                        0x00005598631d75b0 <unavailable> + 5552\n10   libc.so.6                          0x00002ae5e6451460 __libc_start_main + 245\n11   tmpn3s3l2ym                        0x00005598631d72c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num = num / 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            if $0 % (num % 10) != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a77dbcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a77ab3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3a77ab3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3a77ab313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3a77ab2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpdcw47dxy                        0x0000558147d92a6c <unavailable> + 6764\n6    libswiftCore.so                    0x00002b3a77b16d70 Sequence.filter(_:) + 518\n7    tmpdcw47dxy                        0x0000558147d92873 <unavailable> + 6259\n8    tmpdcw47dxy                        0x0000558147d92480 <unavailable> + 5248\n9    libc.so.6                          0x00002b3a77fa8460 __libc_start_main + 245\n10   tmpdcw47dxy                        0x0000558147d92199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i % i.digits.reduce(1, *) == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmpy6ad7jd4.swift:6:18: error: value of type 'Int' has no member 'digits'\n        if i % i.digits.reduce(1, *) == 0 {\n               ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var number = i\n        var divisible = true\n        while number > 0 {\n            let digit = number % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            number /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcab0f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcaadea561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afcaadea286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afcaadea13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afcaade9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpdl3i06vh                        0x000055bb264e7e37 <unavailable> + 7735\n6    tmpdl3i06vh                        0x000055bb264e82f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002afcaaef9200 Sequence.allSatisfy(_:) + 432\n8    tmpdl3i06vh                        0x000055bb264e7caf <unavailable> + 7343\n9    tmpdl3i06vh                        0x000055bb264e7500 <unavailable> + 5376\n10   libc.so.6                          0x00002afcab2df460 __libc_start_main + 245\n11   tmpdl3i06vh                        0x000055bb264e7219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let range = startnum...endnum\n    return range.filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3dd0d58c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3dd0a4f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3dd0a4f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3dd0a4f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3dd0a4ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpog8gggu6                        0x000055c02ae2cec7 <unavailable> + 7879\n6    tmpog8gggu6                        0x000055c02ae2d5a0 <unavailable> + 9632\n7    libswiftCore.so                    0x00002b3dd0b5e200 Sequence.allSatisfy(_:) + 432\n8    tmpog8gggu6                        0x000055c02ae2cd27 <unavailable> + 7463\n9    libswiftCore.so                    0x00002b3dd0ab2d70 Sequence.filter(_:) + 518\n10   tmpog8gggu6                        0x000055c02ae2cb92 <unavailable> + 7058\n11   tmpog8gggu6                        0x000055c02ae2c790 <unavailable> + 6032\n12   libc.so.6                          0x00002b3dd0f44460 __libc_start_main + 245\n13   tmpog8gggu6                        0x000055c02ae2c4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var is_divisible = true\n        for digit in String(i) {\n            if i % Int(String(digit))! != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b73b5536c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b73b522d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b73b522d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b73b522d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b73b522cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpuexh6xm9                        0x0000561155f90eae <unavailable> + 7854\n6    tmpuexh6xm9                        0x0000561155f90770 <unavailable> + 6000\n7    libc.so.6                          0x00002b73b5722460 __libc_start_main + 245\n8    tmpuexh6xm9                        0x0000561155f90489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var isDivisible = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            temp /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for num in startnum...endnum {\n        var num_digits = [Int]()\n        var num_copy = num\n        while num_copy > 0 {\n            num_digits.append(num_copy % 10)\n            num_copy /= 10\n        }\n        if num_digits.allSatisfy({ num % $0 == 0 }) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b329862ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3298321561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3298321286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b329832113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3298320bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpovzvawbb                        0x000056203fdbee77 <unavailable> + 7799\n6    tmpovzvawbb                        0x000056203fdbf330 <unavailable> + 9008\n7    libswiftCore.so                    0x00002b3298430200 Sequence.allSatisfy(_:) + 432\n8    tmpovzvawbb                        0x000056203fdbeceb <unavailable> + 7403\n9    tmpovzvawbb                        0x000056203fdbe560 <unavailable> + 5472\n10   libc.so.6                          0x00002b3298816460 __libc_start_main + 245\n11   tmpovzvawbb                        0x000056203fdbe279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpqf01adjr.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in i.digits {\n            if i % j != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp9im4nv6k.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        for j in i.digits {\n            if i % j != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmphpmtdve1.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6181606c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b61812fd561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b61812fd286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b61812fd13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b61812fcbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp3qpephpa                        0x0000564760283e69 <unavailable> + 7785\n6    tmp3qpephpa                        0x0000564760283720 <unavailable> + 5920\n7    libc.so.6                          0x00002b61817f2460 __libc_start_main + 245\n8    tmp3qpephpa                        0x0000564760283439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcab0f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcaadea561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afcaadea286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afcaadea13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afcaade9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpdl3i06vh                        0x000055bb264e7e37 <unavailable> + 7735\n6    tmpdl3i06vh                        0x000055bb264e82f0 <unavailable> + 8944\n7    libswiftCore.so                    0x00002afcaaef9200 Sequence.allSatisfy(_:) + 432\n8    tmpdl3i06vh                        0x000055bb264e7caf <unavailable> + 7343\n9    tmpdl3i06vh                        0x000055bb264e7500 <unavailable> + 5376\n10   libc.so.6                          0x00002afcab2df460 __libc_start_main + 245\n11   tmpdl3i06vh                        0x000055bb264e7219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79fe568c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79fe25f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b79fe25f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b79fe25f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b79fe25ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpps7cqrhb                        0x0000558299a20ff0 <unavailable> + 8176\n6    tmpps7cqrhb                        0x0000558299a208b0 <unavailable> + 6320\n7    libc.so.6                          0x00002b79fe754460 __libc_start_main + 245\n8    tmpps7cqrhb                        0x0000558299a205c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        var num = i\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var divisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae87e750c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae87e447561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae87e447286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae87e44713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae87e446bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpmnzxq_lv                        0x000056374a7e3ff0 <unavailable> + 8176\n6    tmpmnzxq_lv                        0x000056374a7e38b0 <unavailable> + 6320\n7    libc.so.6                          0x00002ae87e93c460 __libc_start_main + 245\n8    tmpmnzxq_lv                        0x000056374a7e35c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b80c6104c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80c5dfb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b80c5dfb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b80c5dfb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b80c5dfabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpjgntikn3                        0x0000563db59a7aff <unavailable> + 6911\n6    tmpjgntikn3                        0x0000563db59a7490 <unavailable> + 5264\n7    libc.so.6                          0x00002b80c62f0460 __libc_start_main + 245\n8    tmpjgntikn3                        0x0000563db59a71a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let range = startnum...endnum\n    let result = range.filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b614031ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6140011561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6140011286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b614001113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6140010bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpcldcgd7u                        0x0000560bc4965ef7 <unavailable> + 7927\n6    tmpcldcgd7u                        0x0000560bc49665d0 <unavailable> + 9680\n7    libswiftCore.so                    0x00002b6140120200 Sequence.allSatisfy(_:) + 432\n8    tmpcldcgd7u                        0x0000560bc4965d57 <unavailable> + 7511\n9    libswiftCore.so                    0x00002b6140074d70 Sequence.filter(_:) + 518\n10   tmpcldcgd7u                        0x0000560bc4965baa <unavailable> + 7082\n11   tmpcldcgd7u                        0x0000560bc4965790 <unavailable> + 6032\n12   libc.so.6                          0x00002b6140506460 __libc_start_main + 245\n13   tmpcldcgd7u                        0x0000560bc49654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for digit in String(i) {\n            if i % Int(String(digit)) != 0 {\n                isDivisible = false\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp7sbxs1rw.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(digit)) != 0 {\n                   ^\n/tmp/tmp7sbxs1rw.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                   (                  ?? <#default value#>)\n/tmp/tmp7sbxs1rw.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                                     !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{Int(String($0))}\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b899bd22c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b899ba19561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b899ba19286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b899ba1913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b899ba18bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmprzyqkrgr                        0x000055e9b5dae007 <unavailable> + 8199\n6    tmprzyqkrgr                        0x000055e9b5dae4e0 <unavailable> + 9440\n7    libswiftCore.so                    0x00002b899bb28200 Sequence.allSatisfy(_:) + 432\n8    tmprzyqkrgr                        0x000055e9b5dade13 <unavailable> + 7699\n9    tmprzyqkrgr                        0x000055e9b5dad800 <unavailable> + 6144\n10   libc.so.6                          0x00002b899bf0e460 __libc_start_main + 245\n11   tmprzyqkrgr                        0x000055e9b5dad519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        var num = i\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9398664c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b939835b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b939835b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b939835b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b939835abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8asxrhq5                        0x000055b5bfd98007 <unavailable> + 8199\n6    tmp8asxrhq5                        0x000055b5bfd984e0 <unavailable> + 9440\n7    libswiftCore.so                    0x00002b939846a200 Sequence.allSatisfy(_:) + 432\n8    tmp8asxrhq5                        0x000055b5bfd97e13 <unavailable> + 7699\n9    tmp8asxrhq5                        0x000055b5bfd97800 <unavailable> + 6144\n10   libc.so.6                          0x00002b9398850460 __libc_start_main + 245\n11   tmp8asxrhq5                        0x000055b5bfd97519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var arr = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in i.digits {\n            if i % j != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            arr.append(i)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp9ca820_t.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46e14dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46e11d5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b46e11d5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b46e11d513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b46e11d4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpv08b78qo                        0x000055eb68755ff0 <unavailable> + 8176\n6    tmpv08b78qo                        0x000055eb687558b0 <unavailable> + 6320\n7    libc.so.6                          0x00002b46e16ca460 __libc_start_main + 245\n8    tmpv08b78qo                        0x000055eb687555c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var number = i\n        var digits: [Int] = []\n        while number > 0 {\n            digits.append(number % 10)\n            number /= 10\n        }\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef3a40ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef3a101561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aef3a101286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aef3a10113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aef3a100bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmppi96vgjt                        0x00005653c3043e27 <unavailable> + 7719\n6    tmppi96vgjt                        0x00005653c30442e0 <unavailable> + 8928\n7    libswiftCore.so                    0x00002aef3a210200 Sequence.allSatisfy(_:) + 432\n8    tmppi96vgjt                        0x00005653c3043c94 <unavailable> + 7316\n9    tmppi96vgjt                        0x00005653c3043500 <unavailable> + 5376\n10   libc.so.6                          0x00002aef3a5f6460 __libc_start_main + 245\n11   tmppi96vgjt                        0x00005653c3043219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        let digits = String(i).compactMap{Int(String($0))}\n        for digit in digits {\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08e31dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b08e2ed2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b08e2ed2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b08e2ed213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b08e2ed1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp7nh2v78i                        0x000055a8a8241035 <unavailable> + 8245\n6    tmp7nh2v78i                        0x000055a8a8240900 <unavailable> + 6400\n7    libc.so.6                          0x00002b08e33c7460 __libc_start_main + 245\n8    tmp7nh2v78i                        0x000055a8a8240619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var temp = i\n        var divisible = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            temp /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var temp = i\n        var divisible = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            temp /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap{ Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afaddb48c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afadd83f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afadd83f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afadd83f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afadd83ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp64xdf5eu                        0x000055705c453ff0 <unavailable> + 8176\n6    tmp64xdf5eu                        0x000055705c4538b0 <unavailable> + 6320\n7    libc.so.6                          0x00002afaddd34460 __libc_start_main + 245\n8    tmp64xdf5eu                        0x000055705c4535c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5d96d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5d93cf561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae5d93cf286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae5d93cf13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae5d93cebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpywgz2o4v                        0x00005637b8892e77 <unavailable> + 7799\n6    tmpywgz2o4v                        0x00005637b8893330 <unavailable> + 9008\n7    libswiftCore.so                    0x00002ae5d94de200 Sequence.allSatisfy(_:) + 432\n8    tmpywgz2o4v                        0x00005637b8892ceb <unavailable> + 7403\n9    tmpywgz2o4v                        0x00005637b8892560 <unavailable> + 5472\n10   libc.so.6                          0x00002ae5d98c4460 __libc_start_main + 245\n11   tmpywgz2o4v                        0x00005637b8892279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for num in startnum...endnum {\n        var num_copy = num\n        var digits: [Int] = []\n        while num_copy > 0 {\n            digits.append(num_copy % 10)\n            num_copy /= 10\n        }\n        var is_divisible = true\n        for digit in digits {\n            if num % digit != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b782bd3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b782ba34561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b782ba34286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b782ba3413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b782ba33bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnax7ycee                        0x000055791af37e5b <unavailable> + 7771\n6    tmpnax7ycee                        0x000055791af37600 <unavailable> + 5632\n7    libc.so.6                          0x00002b782bf29460 __libc_start_main + 245\n8    tmpnax7ycee                        0x000055791af37319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6e7db6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6e7aad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad6e7aad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad6e7aad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad6e7aacbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpo1tx02_w                        0x0000558a03816eb7 <unavailable> + 7863\n6    tmpo1tx02_w                        0x0000558a03817590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002ad6e7bbc200 Sequence.allSatisfy(_:) + 432\n8    tmpo1tx02_w                        0x0000558a03816d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002ad6e7b10d70 Sequence.filter(_:) + 518\n10   tmpo1tx02_w                        0x0000558a03816b83 <unavailable> + 7043\n11   tmpo1tx02_w                        0x0000558a03816790 <unavailable> + 6032\n12   libc.so.6                          0x00002ad6e7fa2460 __libc_start_main + 245\n13   tmpo1tx02_w                        0x0000558a038164a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        let digits = String(i).compactMap{Int(String($0))}\n        for digit in digits {\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b727d24ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b727cf45561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b727cf45286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b727cf4513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b727cf44bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp9tq7h6i_                        0x00005602b05b1035 <unavailable> + 8245\n6    tmp9tq7h6i_                        0x00005602b05b0900 <unavailable> + 6400\n7    libc.so.6                          0x00002b727d43a460 __libc_start_main + 245\n8    tmp9tq7h6i_                        0x00005602b05b0619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        let num = String(i)\n        for c in num {\n            if i % Int(String(c))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35d9e4dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35d9b44561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b35d9b44286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b35d9b4413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b35d9b43bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpn2vfazgq                        0x000055b22a08dea5 <unavailable> + 7845\n6    tmpn2vfazgq                        0x000055b22a08d720 <unavailable> + 5920\n7    libc.so.6                          0x00002b35da039460 __libc_start_main + 245\n8    tmpn2vfazgq                        0x000055b22a08d439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = Array(String(i))\n        var flag = true\n        for digit in digits {\n            if i % Int(String(digit)) != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmpho5mw_za.swift:9:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(digit)) != 0 {\n                   ^\n/tmp/tmpho5mw_za.swift:9:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                   (                  ?? <#default value#>)\n/tmp/tmpho5mw_za.swift:9:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                                     !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var numbers: [Int] = []\n    for i in startnum...endnum {\n        var number = i\n        var digits: [Int] = []\n        while number > 0 {\n            digits.append(number % 10)\n            number = number / 10\n        }\n        var is_divisible = true\n        for digit in digits {\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            numbers.append(i)\n        }\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3801f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae37fee7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae37fee7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae37fee713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae37fee6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpkjuufgpb                        0x00005617093e5e38 <unavailable> + 7736\n6    tmpkjuufgpb                        0x00005617093e5600 <unavailable> + 5632\n7    libc.so.6                          0x00002ae3803dc460 __libc_start_main + 245\n8    tmpkjuufgpb                        0x00005617093e5319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in i.digits {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmp_qb8cm2g.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79fe568c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79fe25f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b79fe25f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b79fe25f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b79fe25ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpps7cqrhb                        0x0000558299a20ff0 <unavailable> + 8176\n6    tmpps7cqrhb                        0x0000558299a208b0 <unavailable> + 6320\n7    libc.so.6                          0x00002b79fe754460 __libc_start_main + 245\n8    tmpps7cqrhb                        0x0000558299a205c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        for j in i.digits {\n            if i % j != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmphpmtdve1.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num = num / 10\n        }\n        var flag = true\n        for j in digits {\n            if i % j != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8e4e92ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8e4e621561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8e4e621286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8e4e62113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8e4e620bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp9cgul7rt                        0x0000561b49734e42 <unavailable> + 7746\n6    tmp9cgul7rt                        0x0000561b49734600 <unavailable> + 5632\n7    libc.so.6                          0x00002b8e4eb16460 __libc_start_main + 245\n8    tmp9cgul7rt                        0x0000561b49734319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({i % $0 == 0}).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4360dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba435dd1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba435dd1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba435dd113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba435dd0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpduxi0duq                        0x00005598f19e8f37 <unavailable> + 7991\n6    tmpduxi0duq                        0x00005598f19e93f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002ba435dce6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpduxi0duq                        0x00005598f19e8d5f <unavailable> + 7519\n9    tmpduxi0duq                        0x00005598f19e85b0 <unavailable> + 5552\n10   libc.so.6                          0x00002ba4362c6460 __libc_start_main + 245\n11   tmpduxi0duq                        0x00005598f19e82c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        var flag = true\n        for j in digits {\n            if i % j != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa2105ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa20d51561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afa20d51286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afa20d5113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afa20d50bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmph95e9yhq                        0x000056190c174e9f <unavailable> + 7839\n6    tmph95e9yhq                        0x000056190c174650 <unavailable> + 5712\n7    libc.so.6                          0x00002afa21246460 __libc_start_main + 245\n8    tmph95e9yhq                        0x000056190c174369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{ Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6197eac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6194e1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad6194e1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad6194e113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad6194e0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp7u2iufgt                        0x000055d21da60fc7 <unavailable> + 8135\n6    tmp7u2iufgt                        0x000055d21da614a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002ad6195f0200 Sequence.allSatisfy(_:) + 432\n8    tmp7u2iufgt                        0x000055d21da60dce <unavailable> + 7630\n9    tmp7u2iufgt                        0x000055d21da607b0 <unavailable> + 6064\n10   libc.so.6                          0x00002ad6199d6460 __libc_start_main + 245\n11   tmp7u2iufgt                        0x000055d21da604c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var is_divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                is_divisible = false\n                break\n            }\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            num /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "/tmp/tmpswne8iqv.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmpswne8iqv.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmpswne8iqv.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let result = (startnum...endnum).filter { (num) -> Bool in\n        var num = num\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || num % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "tmp1k0fn1h5/tmp1k0fn1h5.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b136bfd6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b136bccdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b136bccd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b136bccc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1k0fn1h5                        0x000055dbc4b4e5ab <unavailable> + 5547\n5    libc.so.6                          0x00002b136c1c2460 __libc_start_main + 245\n6    tmp1k0fn1h5                        0x000055dbc4b4e199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86c543ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86c5131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b86c5131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b86c513113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b86c5130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmps08_ua5w                        0x0000559bcf368035 <unavailable> + 8245\n6    tmps08_ua5w                        0x0000559bcf367900 <unavailable> + 6400\n7    libc.so.6                          0x00002b86c5626460 __libc_start_main + 245\n8    tmps08_ua5w                        0x0000559bcf367619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6e7db6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6e7aad561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad6e7aad286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad6e7aad13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad6e7aacbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpo1tx02_w                        0x0000558a03816eb7 <unavailable> + 7863\n6    tmpo1tx02_w                        0x0000558a03817590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002ad6e7bbc200 Sequence.allSatisfy(_:) + 432\n8    tmpo1tx02_w                        0x0000558a03816d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002ad6e7b10d70 Sequence.filter(_:) + 518\n10   tmpo1tx02_w                        0x0000558a03816b83 <unavailable> + 7043\n11   tmpo1tx02_w                        0x0000558a03816790 <unavailable> + 6032\n12   libc.so.6                          0x00002ad6e7fa2460 __libc_start_main + 245\n13   tmpo1tx02_w                        0x0000558a038164a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad746196c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad745e8d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad745e8d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad745e8d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad745e8cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwu41cz6c                        0x00005570ea500e69 <unavailable> + 7785\n6    tmpwu41cz6c                        0x00005570ea500720 <unavailable> + 5920\n7    libc.so.6                          0x00002ad746382460 __libc_start_main + 245\n8    tmpwu41cz6c                        0x00005570ea500439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        var num = i\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7526766c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b752645d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b752645d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b752645d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b752645cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpb_i7840o                        0x000055d4df056eae <unavailable> + 7854\n6    tmpb_i7840o                        0x000055d4df056770 <unavailable> + 6000\n7    libc.so.6                          0x00002b7526952460 __libc_start_main + 245\n8    tmpb_i7840o                        0x000055d4df056489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var number = i\n        var divisible = true\n        while number > 0 {\n            let digit = number % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            number /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b835cce5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b835c9dc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b835c9dc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b835c9dc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b835c9dbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1h5g1q7y                        0x000055d59385feae <unavailable> + 7854\n6    tmp1h5g1q7y                        0x000055d59385f770 <unavailable> + 6000\n7    libc.so.6                          0x00002b835ced1460 __libc_start_main + 245\n8    tmp1h5g1q7y                        0x000055d59385f489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{Int(String($0))}\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b899bd22c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b899ba19561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b899ba19286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b899ba1913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b899ba18bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmprzyqkrgr                        0x000055e9b5dae007 <unavailable> + 8199\n6    tmprzyqkrgr                        0x000055e9b5dae4e0 <unavailable> + 9440\n7    libswiftCore.so                    0x00002b899bb28200 Sequence.allSatisfy(_:) + 432\n8    tmprzyqkrgr                        0x000055e9b5dade13 <unavailable> + 7699\n9    tmprzyqkrgr                        0x000055e9b5dad800 <unavailable> + 6144\n10   libc.so.6                          0x00002b899bf0e460 __libc_start_main + 245\n11   tmprzyqkrgr                        0x000055e9b5dad519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                flag = false\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d0fcbcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d0f9b3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0d0f9b3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0d0f9b313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0d0f9b2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp9t8moe8k                        0x00005576068dce69 <unavailable> + 7785\n6    tmp9t8moe8k                        0x00005576068dc720 <unavailable> + 5920\n7    libc.so.6                          0x00002b0d0fea8460 __libc_start_main + 245\n8    tmp9t8moe8k                        0x00005576068dc439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var number = i\n        while number > 0 {\n            digits.append(number % 10)\n            number /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ed37c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ed34bb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5ed34bb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5ed34bb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5ed34babb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp4bj6jdm4                        0x000055c05eeeaf37 <unavailable> + 7991\n6    tmp4bj6jdm4                        0x000055c05eeeb3f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002b5ed34b86e0 _ArrayProtocol.filter(_:) + 518\n8    tmp4bj6jdm4                        0x000055c05eeead5f <unavailable> + 7519\n9    tmp4bj6jdm4                        0x000055c05eeea5b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b5ed39b0460 __libc_start_main + 245\n11   tmp4bj6jdm4                        0x000055c05eeea2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab68f43ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab68f131561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab68f131286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab68f13113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab68f130bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpipvhjz6l                        0x000055c0605c3eae <unavailable> + 7854\n6    tmpipvhjz6l                        0x000055c0605c3770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab68f626460 __libc_start_main + 245\n8    tmpipvhjz6l                        0x000055c0605c3489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                isDivisible = false\n                break\n            }\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var flag = true\n        let num = String(i)\n        for char in num {\n            if i % Int(String(char))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab4e0137c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab4dfe2e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab4dfe2e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab4dfe2e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab4dfe2dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpyyycp7vp                        0x000056050d159eea <unavailable> + 7914\n6    tmpyyycp7vp                        0x000056050d159770 <unavailable> + 6000\n7    libc.so.6                          0x00002ab4e0323460 __libc_start_main + 245\n8    tmpyyycp7vp                        0x000056050d159489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        let digits = String(i).compactMap{Int(String($0))}\n        for digit in digits {\n            if i % digit != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabdf1a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabdee99561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aabdee99286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aabdee9913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aabdee98bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpmd_mnd3q                        0x0000555d63aeb035 <unavailable> + 8245\n6    tmpmd_mnd3q                        0x0000555d63aea900 <unavailable> + 6400\n7    libc.so.6                          0x00002aabdf38e460 __libc_start_main + 245\n8    tmpmd_mnd3q                        0x0000555d63aea619 <unavailable> + 5657\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            if num % 10 == 0 || $0 % (num % 10) != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmp9jnzjxzt.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmp9jnzjxzt.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmp9jnzjxzt.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8d6b767c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8d6b45e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8d6b45e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8d6b45e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8d6b45dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpf1hxey3w                        0x0000555ae3c7ef37 <unavailable> + 7991\n6    tmpf1hxey3w                        0x0000555ae3c7f3f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002b8d6b45b6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpf1hxey3w                        0x0000555ae3c7ed5f <unavailable> + 7519\n9    tmpf1hxey3w                        0x0000555ae3c7e5b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b8d6b953460 __libc_start_main + 245\n11   tmpf1hxey3w                        0x0000555ae3c7e2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({i % $0 == 0}).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122622,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4360dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba435dd1561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba435dd1286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba435dd113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba435dd0bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpduxi0duq                        0x00005598f19e8f37 <unavailable> + 7991\n6    tmpduxi0duq                        0x00005598f19e93f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002ba435dce6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpduxi0duq                        0x00005598f19e8d5f <unavailable> + 7519\n9    tmpduxi0duq                        0x00005598f19e85b0 <unavailable> + 5552\n10   libc.so.6                          0x00002ba4362c6460 __libc_start_main + 245\n11   tmpduxi0duq                        0x00005598f19e82c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509866,
      "stdout": "",
      "stderr": "/tmp/tmpqf01adjr.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var isDivisible = true\n        for digit in String(i) {\n            if i % Int(String(digit)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "/tmp/tmpdrooo34r.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(digit)) != 0 {\n                   ^\n/tmp/tmpdrooo34r.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                   (                  ?? <#default value#>)\n/tmp/tmpdrooo34r.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(digit)) != 0 {\n                   ^\n                                     !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var temp = i\n        var flag = true\n        while temp > 0 {\n            let digit = temp % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            temp /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}