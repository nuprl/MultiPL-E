{
  "name": "mbpp_129_magic_square_test",
  "language": "swift",
  "prompt": "\n/// Write a function to calculate whether the matrix is a magic square.\nfunc magic_square_test(my_matrix: [[Int]]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(magic_square_test(my_matrix: [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)\nassert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)\nassert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let n = my_matrix.count\n    var magic_constant = 0\n    var row_sum = 0\n    var col_sum = 0\n    var diag_sum = 0\n    var rev_diag_sum = 0\n    var sum_set = Set<Int>()\n    \n    for i in 0..<n {\n        row_sum += my_matrix[i][i]\n        rev_diag_sum += my_matrix[i][n - i - 1]\n    }\n    \n    magic_constant = row_sum\n    \n    for i in 0..<n {\n        row_sum = 0\n        col_sum = 0\n        for j in 0..<n {\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        }\n        sum_set.insert(row_sum)\n        sum_set.insert(col_sum)\n    }\n    \n    sum_set.insert(diag_sum)\n    sum_set.insert(rev_diag_sum)\n    \n    if sum_set.count == 1 && sum_set.first! == magic_constant {\n        return true\n    }\n    \n    return false",
    "    var sum = 0\n    var sum_diag = 0\n    var sum_diag2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    var magic_square = true\n    \n    // sum of first row\n    sum = my_matrix[0].reduce(0, +)\n    \n    // check sum of rows\n    for i in 0..<my_matrix.count {\n        sum_row = my_matrix[i].reduce(0, +)\n        if sum_row != sum {\n            magic_square = false\n            break\n        }\n    }\n    \n    // check sum of columns\n    for i in 0..<my_matrix.count {\n        sum_col = 0\n        for j in 0..<my_matrix.count {\n            sum_col += my_matrix[j][i]\n        }\n        if sum_col != sum {\n            magic_square = false\n            break\n        }\n    }\n    \n    // check sum of diagonals\n    for i in 0..<my_matrix.count {\n        sum_diag += my_matrix[i][i]\n        sum_diag2 += my_matrix[i][my_matrix.count - 1 - i]\n    }\n    if sum_diag != sum || sum_diag2 != sum {\n        magic_square = false\n    }\n    \n    return magic_square",
    "    var sum = 0\n    var sum_diag_1 = 0\n    var sum_diag_2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    \n    for i in 0..<my_matrix.count {\n        sum_row = 0\n        sum_col = 0\n        for j in 0..<my_matrix[i].count {\n            sum_row += my_matrix[i][j]\n            sum_col += my_matrix[j][i]\n        }\n        if sum == 0 {\n            sum = sum_row\n        }\n        if sum != sum_row || sum != sum_col {\n            return false\n        }\n        sum_diag_1 += my_matrix[i][i]\n        sum_diag_2 += my_matrix[i][my_matrix.count - i - 1]\n    }\n    if sum_diag_1 != sum || sum_diag_2 != sum {\n        return false\n    }\n    return true",
    "    let n = my_matrix.count\n    var sum = 0\n    var sum_diag1 = 0\n    var sum_diag2 = 0\n    for i in 0..<n {\n        sum += my_matrix[i][i]\n        sum_diag1 += my_matrix[i][n-i-1]\n    }\n    if sum != sum_diag1 {\n        return false\n    }\n    for i in 0..<n {\n        var sum_row = 0\n        var sum_col = 0\n        for j in 0..<n {\n            sum_row += my_matrix[i][j]\n            sum_col += my_matrix[j][i]\n        }\n        if sum != sum_row || sum != sum_col {\n            return false\n        }\n    }\n    return true",
    "    let n = my_matrix.count\n    var magic_constant = 0\n    var diagonal_1 = 0\n    var diagonal_2 = 0\n    var row_sum = 0\n    var col_sum = 0\n    \n    // calculate the magic constant\n    magic_constant = n * (n * n + 1) / 2\n    \n    // check the sum of each row\n    for i in 0..<n {\n        row_sum = 0\n        for j in 0..<n {\n            row_sum += my_matrix[i][j]\n        }\n        if row_sum != magic_constant {\n            return false\n        }\n    }\n    \n    // check the sum of each column\n    for i in 0..<n {\n        col_sum = 0\n        for j in 0..<n {\n            col_sum += my_matrix[j][i]\n        }\n        if col_sum != magic_constant {\n            return false\n        }\n    }\n    \n    // check the sum of the diagonals\n    for i in 0..<n {\n        diagonal_1 += my_matrix[i][i]\n        diagonal_2 += my_matrix[i][n - i - 1]\n    }\n    if diagonal_1 != magic_constant || diagonal_2 != magic_constant {\n        return false\n    }\n    \n    return true",
    "    var result = true\n    var sum = 0\n    var sum_diagonal_1 = 0\n    var sum_diagonal_2 = 0\n    \n    // Check if the matrix is a square\n    if my_matrix.count != my_matrix[0].count {\n        result = false\n    }\n    \n    // Check if the matrix is a magic square\n    for i in 0..<my_matrix.count {\n        sum = 0\n        for j in 0..<my_matrix[i].count {\n            sum += my_matrix[i][j]\n        }\n        if sum != 15 {\n            result = false\n        }\n    }\n    \n    for i in 0..<my_matrix.count {\n        sum = 0\n        for j in 0..<my_matrix[i].count {\n            sum += my_matrix[j][i]\n        }\n        if sum != 15 {\n            result = false\n        }\n    }\n    \n    for i in 0..<my_matrix.count {\n        sum_diagonal_1 += my_matrix[i][i]\n    }\n    if sum_diagonal_1 != 15 {\n        result = false\n    }\n    \n    for i in 0..<my_matrix.count {\n        sum_diagonal_2 += my_matrix[i][my_matrix.count - 1 - i]\n    }\n    if sum_diagonal_2 != 15 {\n        result = false\n    }\n    \n    return result",
    "    let n = my_matrix.count\n    var magic_constant = 0\n    var row_sum = 0\n    var col_sum = 0\n    var diag_sum = 0\n    var rev_diag_sum = 0\n    \n    // Check if matrix is square\n    for row in my_matrix {\n        if row.count != n {\n            return false\n        }\n    }\n    \n    // Calculate magic constant\n    magic_constant = n * (n * n + 1) / 2\n    \n    // Check row sums\n    for row in my_matrix {\n        row_sum = 0\n        for num in row {\n            row_sum += num\n        }\n        if row_sum != magic_constant {\n            return false\n        }\n    }\n    \n    // Check column sums\n    for i in 0..<n {\n        col_sum = 0\n        for j in 0..<n {\n            col_sum += my_matrix[j][i]\n        }\n        if col_sum != magic_constant {\n            return false\n        }\n    }\n    \n    // Check diagonal sums\n    for i in 0..<n {\n        diag_sum += my_matrix[i][i]\n    }\n    if diag_sum != magic_constant {\n        return false\n    }\n    \n    // Check reverse diagonal sums\n    for i in 0..<n {\n        rev_diag_sum += my_matrix[i][n - i - 1]\n    }\n    if rev_diag_sum != magic_constant {\n        return false\n    }\n    \n    return true",
    "    var magic_square = true\n    let n = my_matrix.count\n    var sum = 0\n    var sum_diag_1 = 0\n    var sum_diag_2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    \n    // Check if the matrix is a square matrix\n    for i in 0..<n {\n        if my_matrix[i].count != n {\n            magic_square = false\n        }\n    }\n    \n    // Check if the matrix is a magic square\n    if magic_square {\n        for i in 0..<n {\n            sum_row = 0\n            sum_col = 0\n            for j in 0..<n {\n                sum_row += my_matrix[i][j]\n                sum_col += my_matrix[j][i]\n            }\n            if i == 0 {\n                sum = sum_row\n            }\n            if sum != sum_row || sum != sum_col {\n                magic_square = false\n            }\n        }\n        for i in 0..<n {\n            sum_diag_1 += my_matrix[i][i]\n            sum_diag_2 += my_matrix[i][n-i-1]\n        }\n        if sum != sum_diag_1 || sum != sum_diag_2 {\n            magic_square = false\n        }\n    }\n    return magic_square",
    "    var sum = 0\n    var sum_diag1 = 0\n    var sum_diag2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    var sum_col_temp = 0\n    var sum_row_temp = 0\n    var sum_diag1_temp = 0\n    var sum_diag2_temp = 0\n    var sum_temp = 0\n    var sum_temp2 = 0\n    var sum_temp3 = 0\n    var sum_temp4 = 0\n    var sum_temp5 = 0\n    var sum_temp6 = 0\n    var sum_temp7 = 0\n    var sum_temp8 = 0\n    var sum_temp9 = 0\n    var sum_temp10 = 0\n    var sum_temp11 = 0\n    var sum_temp12 = 0\n    var sum_temp13 = 0\n    var sum_temp14 = 0\n    var sum_temp15 = 0\n    var sum_temp16 = 0\n    var sum_temp17 = 0\n    var sum_temp18 = 0\n    var sum_temp19 = 0\n    var sum_temp20 = 0\n    var sum_temp21 = 0\n    var sum_temp22 = 0\n    var sum_temp23 = 0\n    var sum_temp24 = 0\n    var sum_temp25 = 0\n    var sum_temp26 = 0\n    var sum_temp27 = 0\n    var sum_temp28 = 0\n    var sum_temp29 = 0\n    var sum_temp30 = 0\n    var sum_temp31 = 0\n    var sum_temp32 = 0\n    var sum_temp33 = 0\n    var sum_temp34 = 0\n    var sum_temp35 = 0\n    var sum_temp36 = 0\n    var sum_temp37 = 0\n    var sum_temp38 = 0\n    var sum_temp39 = 0\n    var sum_temp40 = 0\n    var sum_temp41 = 0\n    var sum_temp42 = 0\n    var sum_temp43 = 0\n    var sum_temp44 = 0\n    var sum_temp45 = 0\n    var sum_temp46 = 0\n    var sum_temp47 = 0\n    var sum",
    "    var sum = 0\n    var sum_2 = 0\n    var sum_3 = 0\n    var sum_4 = 0\n    var sum_5 = 0\n    var sum_6 = 0\n    var sum_7 = 0\n    var sum_8 = 0\n    var sum_9 = 0\n    var sum_10 = 0\n    var sum_11 = 0\n    var sum_12 = 0\n    var sum_13 = 0\n    var sum_14 = 0\n    var sum_15 = 0\n    var sum_16 = 0\n    var sum_17 = 0\n    var sum_18 = 0\n    var sum_19 = 0\n    var sum_20 = 0\n    var sum_21 = 0\n    var sum_22 = 0\n    var sum_23 = 0\n    var sum_24 = 0\n    var sum_25 = 0\n    var sum_26 = 0\n    var sum_27 = 0\n    var sum_28 = 0\n    var sum_29 = 0\n    var sum_30 = 0\n    var sum_31 = 0\n    var sum_32 = 0\n    var sum_33 = 0\n    var sum_34 = 0\n    var sum_35 = 0\n    var sum_36 = 0\n    var sum_37 = 0\n    var sum_38 = 0\n    var sum_39 = 0\n    var sum_40 = 0\n    var sum_41 = 0\n    var sum_42 = 0\n    var sum_43 = 0\n    var sum_44 = 0\n    var sum_45 = 0\n    var sum_46 = 0\n    var sum_47 = 0\n    var sum_48 = 0\n    var sum_49 = 0\n    var sum_50 = 0\n    var sum_51 = 0\n    var sum_52 = 0\n    var sum_53 = 0\n    var sum_54 = 0\n    var sum_55 = 0\n    var sum_56 = 0\n    var sum_57 = 0\n    var sum_58 = 0\n    var sum_59 = 0\n    var sum_60 = 0\n    var sum_61 = 0\n    var sum_62 = 0\n    var sum_63 = 0\n    var sum_64 = 0\n   ",
    "    let n = my_matrix.count\n    var sum = 0\n    var sum_diag1 = 0\n    var sum_diag2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n    var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n    var aaa = 0\n    var bbb = 0\n    var ccc = 0\n    var ddd = 0\n    var eee = 0\n    var fff = 0\n    var ggg = 0\n    var hhh = 0\n    var iii = 0\n    var jjj = 0\n    var kkk = 0\n    var lll = 0\n    var mmm = 0\n    var nnn = 0\n    var ooo = 0\n    var ppp = 0\n    var qqq = 0\n    var rrr = 0\n    var sss = 0\n    var ttt = 0\n    var uuu = 0\n    var vvv = 0\n    var www = 0\n    var xxx = 0\n    var yyy = 0\n    var zzz",
    "    var sum = 0\n    var sum_diagonal_1 = 0\n    var sum_diagonal_2 = 0\n    var sum_column = 0\n    var sum_row = 0\n    var result = true\n    \n    for i in 0..<my_matrix.count {\n        sum_column = 0\n        sum_row = 0\n        for j in 0..<my_matrix.count {\n            sum_column += my_matrix[j][i]\n            sum_row += my_matrix[i][j]\n        }\n        if sum == 0 {\n            sum = sum_column\n        }\n        if sum != sum_column || sum != sum_row {\n            result = false\n        }\n        sum_diagonal_1 += my_matrix[i][i]\n        sum_diagonal_2 += my_matrix[i][my_matrix.count-1-i]\n    }\n    if sum != sum_diagonal_1 || sum != sum_diagonal_2 {\n        result = false\n    }\n    return result",
    "    var sum = 0\n    var sum_diagonal = 0\n    var sum_inverse_diagonal = 0\n    var sum_row = 0\n    var sum_column = 0\n    for i in 0..<my_matrix.count {\n        sum += my_matrix[i][i]\n        sum_inverse_diagonal += my_matrix[i][my_matrix.count - i - 1]\n    }\n    if sum != sum_inverse_diagonal {\n        return false\n    }\n    for i in 0..<my_matrix.count {\n        sum_row = 0\n        sum_column = 0\n        for j in 0..<my_matrix.count {\n            sum_row += my_matrix[i][j]\n            sum_column += my_matrix[j][i]\n        }\n        if sum_row != sum || sum_column != sum {\n            return false\n        }\n    }\n    return true",
    "    var sum = 0\n    var sum_diagonal_1 = 0\n    var sum_diagonal_2 = 0\n    var sum_column = 0\n    var sum_row = 0\n    var sum_row_1 = 0\n    var sum_row_2 = 0\n    var sum_row_3 = 0\n    var sum_column_1 = 0\n    var sum_column_2 = 0\n    var sum_column_3 = 0\n    var sum_diagonal_1_1 = 0\n    var sum_diagonal_1_2 = 0\n    var sum_diagonal_1_3 = 0\n    var sum_diagonal_2_1 = 0\n    var sum_diagonal_2_2 = 0\n    var sum_diagonal_2_3 = 0\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum += my_matrix[i][j]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_diagonal_1 += my_matrix[i][i]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_diagonal_2 += my_matrix[i][2-i]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_column += my_matrix[j][i]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_row += my_matrix[i][j]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_row_1 += my_matrix[0][j]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_row_2 += my_matrix[1][j]\n        }\n    }\n    \n    for i in 0...2 {\n        for j in 0...2 {\n            sum_row_3 += my_matrix[",
    "    var magic_square = true\n    var sum_row = 0\n    var sum_column = 0\n    var sum_diagonal = 0\n    var sum_reverse_diagonal = 0\n    var sum_array = [Int]()\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            sum_row += my_matrix[i][j]\n            sum_column += my_matrix[j][i]\n            if i == j {\n                sum_diagonal += my_matrix[i][j]\n            }\n            if i + j == my_matrix.count - 1 {\n                sum_reverse_diagonal += my_matrix[i][j]\n            }\n        }\n        sum_array.append(sum_row)\n        sum_array.append(sum_column)\n        sum_row = 0\n        sum_column = 0\n    }\n    sum_array.append(sum_diagonal)\n    sum_array.append(sum_reverse_diagonal)\n    \n    for i in 0..<sum_array.count - 1 {\n        if sum_array[i] != sum_array[i + 1] {\n            magic_square = false\n        }\n    }\n    return magic_square",
    "    var sum = 0\n    var sum_diag_1 = 0\n    var sum_diag_2 = 0\n    var sum_row = 0\n    var sum_col = 0\n    \n    for i in 0..<my_matrix.count {\n        sum += my_matrix[0][i]\n    }\n    \n    for i in 0..<my_matrix.count {\n        sum_diag_1 += my_matrix[i][i]\n    }\n    \n    for i in 0..<my_matrix.count {\n        sum_diag_2 += my_matrix[i][my_matrix.count - 1 - i]\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix.count {\n            sum_row += my_matrix[i][j]\n        }\n        if sum_row != sum {\n            return false\n        }\n        sum_row = 0\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix.count {\n            sum_col += my_matrix[j][i]\n        }\n        if sum_col != sum {\n            return false\n        }\n        sum_col = 0\n    }\n    \n    if sum_diag_1 != sum || sum_diag_2 != sum {\n        return false\n    }\n    \n    return true",
    "    let n = my_matrix.count\n    var sum = 0\n    var sum_diag1 = 0\n    var sum_diag2 = 0\n    for i in 0..<n {\n        var row_sum = 0\n        var col_sum = 0\n        for j in 0..<n {\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        }\n        if sum == 0 {\n            sum = row_sum\n        }\n        if sum != row_sum || sum != col_sum {\n            return false\n        }\n        sum_diag1 += my_matrix[i][i]\n        sum_diag2 += my_matrix[i][n - i - 1]\n    }\n    if sum != sum_diag1 || sum != sum_diag2 {\n        return false\n    }\n    return true",
    "    var magic_square = true\n    var sum = 0\n    var sum_check = 0\n    \n    // Check the sum of the first row\n    for i in 0...my_matrix[0].count - 1 {\n        sum += my_matrix[0][i]\n    }\n    \n    // Check the sum of the other rows\n    for i in 1...my_matrix.count - 1 {\n        for j in 0...my_matrix[i].count - 1 {\n            sum_check += my_matrix[i][j]\n        }\n        if sum_check != sum {\n            magic_square = false\n            break\n        }\n        sum_check = 0\n    }\n    \n    // Check the sum of the columns\n    if magic_square {\n        for i in 0...my_matrix[0].count - 1 {\n            for j in 0...my_matrix.count - 1 {\n                sum_check += my_matrix[j][i]\n            }\n            if sum_check != sum {\n                magic_square = false\n                break\n            }\n            sum_check = 0\n        }\n    }\n    \n    // Check the sum of the diagonals\n    if magic_square {\n        for i in 0...my_matrix.count - 1 {\n            sum_check += my_matrix[i][i]\n        }\n        if sum_check != sum {\n            magic_square = false\n        }\n        sum_check = 0\n        for i in 0...my_matrix.count - 1 {\n            sum_check += my_matrix[i][my_matrix.count - i - 1]\n        }\n        if sum_check != sum {\n            magic_square = false\n        }\n    }\n    \n    return magic_square",
    "    let n = my_matrix.count\n    var sum = 0\n    var sum_diag1 = 0\n    var sum_diag2 = 0\n    \n    for i in 0..<n {\n        var row_sum = 0\n        var col_sum = 0\n        for j in 0..<n {\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        }\n        if sum == 0 {\n            sum = row_sum\n        }\n        if sum != row_sum || sum != col_sum {\n            return false\n        }\n        sum_diag1 += my_matrix[i][i]\n        sum_diag2 += my_matrix[i][n-i-1]\n    }\n    if sum != sum_diag1 || sum != sum_diag2 {\n        return false\n    }\n    return true",
    "    var magic_square = true\n    var sum = 0\n    var sum_check = 0\n    var row = 0\n    var column = 0\n    var diagonal = 0\n    var diagonal_2 = 0\n    var diagonal_3 = 0\n    var diagonal_4 = 0\n    var diagonal_5 = 0\n    var diagonal_6 = 0\n    var diagonal_7 = 0\n    var diagonal_8 = 0\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            sum += my_matrix[i][j]\n        }\n        sum_check = sum\n        sum = 0\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            row += my_matrix[i][j]\n        }\n        if row != sum_check {\n            magic_square = false\n        }\n        row = 0\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            column += my_matrix[j][i]\n        }\n        if column != sum_check {\n            magic_square = false\n        }\n        column = 0\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            if i == j {\n                diagonal += my_matrix[i][j]\n            }\n        }\n        if diagonal != sum_check {\n            magic_square = false\n        }\n        diagonal = 0\n    }\n    \n    for i in 0..<my_matrix.count {\n        for j in 0..<my_matrix[i].count {\n            if i == j {\n                diagonal_2 += my_matrix[i][j]\n            }\n        }\n        if diagonal_2 != sum_check {\n            magic_square = false\n        }\n        diagonal_2 = 0\n    }\n    \n    for i in 0..<my_matrix.count {"
  ]
}