{
  "name": "mbpp_392_get_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = 0\n    for i in stride(from: n/5, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/4, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/3, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    for i in stride(from: n/2, to: 0, by: -1) {\n        result = max(result, get_max_sum(n: i))\n    }\n    return result + n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    let max_sum_1 = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if max_sum_1 > max_sum {\n        max_sum = max_sum_1\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n",
    "    if n < 2 {\n        return n\n    }\n    var result = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        let temp = get_max_sum(n: n / divisor)\n        if temp > result {\n            result = temp\n        }\n    }\n    return result",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    return max(n, a+b+c+d)",
    "    if n <= 0 {\n        return 0\n    }\n    var result = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            result = max(result, get_max_sum(n: n / divisor))\n        }\n    }\n    return result"
  ]
}