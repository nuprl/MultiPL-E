{
  "name": "mbpp_69_is_sublist",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    guard l.count >= s.count else { return false }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    }\n    return is_sublist(l: Array(l[1..<l.count]), s: s)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpfxrsiv_m/tmpfxrsiv_m.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c26ae2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c267d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c267d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c267d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfxrsiv_m                        0x00005616104265e6 <unavailable> + 5606\n5    libc.so.6                          0x00002b5c26cce460 __libc_start_main + 245\n6    tmpfxrsiv_m                        0x0000561610426209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let n = l.count\n    let m = s.count\n    while i < n && j < m {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    let l_len = l.count\n    let s_len = s.count\n    \n    if l_len < s_len {\n        return false\n    }\n    \n    for i in 0...(l_len - s_len) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s_len {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s_len {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count { return false }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] { break }\n                j += 1\n            }\n            if j == s.count { return true }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            if Array(l[i..<i+s.count]) == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if l[i+j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmp5ua4ypsz/tmp5ua4ypsz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23f3ac4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23f37bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23f37bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23f37ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5ua4ypsz                        0x00005589577f83f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b23f3cb0460 __libc_start_main + 245\n6    tmp5ua4ypsz                        0x00005589577f8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    for i in 0...l.count - s.count {\n        var j = 0\n        while j < s.count && l[i + j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            if l[i...(i + s.count - 1)] == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "/tmp/tmpop4_htzv.swift:9:44: error: cannot convert value of type '[Int]' to expected argument type 'ArraySlice<Int>'\n            if l[i...(i + s.count - 1)] == s {\n                                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        var j = 0\n        while j < s.count && l[i + j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmp3z63zwnc/tmp3z63zwnc.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d4f332c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d4f029b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d4f029988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d4f0287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3z63zwnc                        0x000055aac1d6b3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b9d4f51e460 __libc_start_main + 245\n6    tmp3z63zwnc                        0x000055aac1d6b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            var k = i + 1\n            while j < s.count && k < l.count {\n                if l[k] == s[j] {\n                    j += 1\n                    k += 1\n                } else {\n                    break\n                }\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count - s.count + 1 {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        var j = 0\n        while j < s.count && l[i+j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if l[i + j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        var j = 0\n        while j < s.count && i+j < l.count && l[i+j] == s[j] {\n            j += 1\n        }\n        if j == s.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpiryha8w1/tmpiryha8w1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ebb297c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ebaf8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ebaf8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ebaf8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiryha8w1                        0x0000563a1a3dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b4ebb483460 __libc_start_main + 245\n6    tmpiryha8w1                        0x0000563a1a3dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 0..<s.count {\n                if i + j >= l.count || l[i + j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == s.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpjj8cdu2a/tmpjj8cdu2a.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9451004c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9450cfbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9450cfb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9450cfa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjj8cdu2a                        0x00005616655453f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b94511f0460 __libc_start_main + 245\n6    tmpjj8cdu2a                        0x0000561665545019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmp5ua4ypsz/tmp5ua4ypsz.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23f3ac4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23f37bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23f37bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23f37ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5ua4ypsz                        0x00005589577f83f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b23f3cb0460 __libc_start_main + 245\n6    tmp5ua4ypsz                        0x00005589577f8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var l_idx = 0\n    var s_idx = 0\n    while l_idx < l.count && s_idx < s.count {\n        if l[l_idx] == s[s_idx] {\n            s_idx += 1\n        }\n        l_idx += 1\n    }\n    return s_idx == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpn4h41fa8/tmpn4h41fa8.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac469c44c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac46993bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac46993b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac46993a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn4h41fa8                        0x0000565117cd03f6 <unavailable> + 5110\n5    libc.so.6                          0x00002ac469e30460 __libc_start_main + 245\n6    tmpn4h41fa8                        0x0000565117cd0019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpn4s_52_8/tmpn4s_52_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9061ecdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9061bc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9061bc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9061bc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn4s_52_8                        0x0000556d945313f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b90620b9460 __libc_start_main + 245\n6    tmpn4s_52_8                        0x0000556d94531019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    \n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var found = true\n            for j in 1..<s.count {\n                if i+j >= l.count || l[i+j] != s[j] {\n                    found = false\n                    break\n                }\n            }\n            if found {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if i + j >= l.count {\n                    return false\n                }\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            \n            if j == s.count {\n                return true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count-s.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i+j < l.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "tmpu7j4_vy6/tmpu7j4_vy6.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8371c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc8068b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc8068988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc80677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu7j4_vy6                        0x0000558223d673f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b7cc855d460 __libc_start_main + 245\n6    tmpu7j4_vy6                        0x0000558223d67019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpn4s_52_8/tmpn4s_52_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9061ecdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9061bc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9061bc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9061bc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn4s_52_8                        0x0000556d945313f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b90620b9460 __libc_start_main + 245\n6    tmpn4s_52_8                        0x0000556d94531019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpw6ccsks0/tmpw6ccsks0.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b44c6770c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b44c6467b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b44c6467988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b44c64667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw6ccsks0                        0x000055ddc45fc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b44c695c460 __libc_start_main + 245\n6    tmpw6ccsks0                        0x000055ddc45fc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0...(l.count - s.count) {\n        if l[i] == s[0] {\n            if Array(l[i...(i + s.count - 1)]) == s {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123264,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "tmpz4po2fzh/tmpz4po2fzh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56fd668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56fd35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56fd35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56fd35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz4po2fzh                        0x000056070b9dc3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b56fd854460 __libc_start_main + 245\n6    tmpz4po2fzh                        0x000056070b9dc019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if s.count > l.count {\n        return false\n    }\n    \n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    \n    return j == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "tmpw1zxwn3y/tmpw1zxwn3y.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2259b93c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b225988ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b225988a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b22598897b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw1zxwn3y                        0x00005556b798d3f6 <unavailable> + 5110\n5    libc.so.6                          0x00002b2259d7f460 __libc_start_main + 245\n6    tmpw1zxwn3y                        0x00005556b798d019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n    if l.count < s.count {\n        return false\n    }\n    \n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i + j < l.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
      "timestamp": 1666123265,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}