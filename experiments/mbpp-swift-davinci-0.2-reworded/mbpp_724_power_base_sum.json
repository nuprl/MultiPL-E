{
  "name": "mbpp_724_power_base_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base: Int, power: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(power_base_sum(base: 2, power: 100) == 115)\nassert(power_base_sum(base: 8, power: 10) == 37)\nassert(power_base_sum(base: 8, power: 15) == 62)\nassert(power_base_sum(base: 3, power: 3) == 9)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            result += base % 10\n            base /= 10\n        }\n        base = result\n        result = 0\n    }\n    return base",
    "    var sum = 0\n    var base_copy = base\n    while base_copy > 0 {\n        sum += base_copy % 10\n        base_copy /= 10\n    }\n    var result = sum\n    for _ in 1..<power {\n        result *= sum\n    }\n    return result",
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    while power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum",
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    while power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    var power = power\n    \n    while power > 0 {\n        sum += base\n        power -= 1\n    }\n    \n    return sum",
    "    var sum = 0\n    var base = base\n    for _ in 1...power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var result = 1\n    for _ in 1...power {\n        result *= base\n    }\n    return result.digits.reduce(0, +)",
    "    var sum = 0\n    var base_copy = base\n    while base_copy > 0 {\n        sum += base_copy % 10\n        base_copy /= 10\n    }\n    var power_copy = power\n    var result = sum\n    while power_copy > 1 {\n        result *= sum\n        power_copy -= 1\n    }\n    return result",
    "    var sum = 0\n    var base = base\n    while base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    var power = power\n    var result = sum\n    while power > 1 {\n        result *= sum\n        power -= 1\n    }\n    return result",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var sum = 0\n    var base = base\n    while base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    var result = sum\n    for _ in 1..<power {\n        result *= sum\n    }\n    return result",
    "    var result = 0\n    var base = base\n    var power = power\n    while power > 0 {\n        result += base\n        power -= 1\n    }\n    return result",
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    for digit in String(power_base) {\n        sum += Int(String(digit))!\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    while base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    var result = sum\n    for _ in 1..<power {\n        result *= sum\n    }\n    return result",
    "    var sum = 0\n    var base = base\n    var power = power\n    while power > 0 {\n        sum += base\n        base *= base\n        power -= 1\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    while base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var sum = 0\n    var base_copy = base\n    while base_copy > 0 {\n        sum += base_copy % 10\n        base_copy /= 10\n    }\n    var power_copy = power\n    while power_copy > 1 {\n        var base_copy = base\n        var carry = 0\n        while base_copy > 0 {\n            let digit = base_copy % 10\n            base_copy /= 10\n            let product = digit * base + carry\n            carry = product / 10\n            sum += product % 10\n        }\n        while carry > 0 {\n            sum += carry % 10\n            carry /= 10\n        }\n        power_copy -= 1\n    }\n    return sum",
    "    var result = 1\n    for _ in 0..<power {\n        result *= base\n    }\n    return result.digits.reduce(0, +)",
    "    var sum = 0\n    var base = base\n    for _ in 1...power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base"
  ]
}