{
  "name": "mbpp_8_square_nums",
  "language": "swift",
  "prompt": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    \n    for num in nums {\n        squares.append(num * num)\n    }\n    \n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map({$0 * $0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squared_nums = [Int]()\n    for num in nums {\n        squared_nums.append(num * num)\n    }\n    return squared_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squared_nums = [Int]()\n    for num in nums {\n        squared_nums.append(num * num)\n    }\n    return squared_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map({$0 * $0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map({ $0 * $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    \n    for num in nums {\n        squares.append(num * num)\n    }\n    \n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(num * num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares = [Int]()\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squared_nums: [Int] = []\n    for num in nums {\n        squared_nums.append(num * num)\n    }\n    return squared_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    var squares: [Int] = []\n    for num in nums {\n        squares.append(num * num)\n    }\n    return squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find squares of individual elements in an array.\nfunc square_nums(nums: [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])\nassert(square_nums(nums: [12, 15]) == [144, 225])",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}