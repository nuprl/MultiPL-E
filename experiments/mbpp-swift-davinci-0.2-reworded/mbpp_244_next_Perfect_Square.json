{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }",
    "    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i",
    "    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i",
    "    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i"
  ]
}