{
  "name": "mbpp_222_check_type",
  "language": "swift",
  "prompt": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type_check = true\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpbmgkibst.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmgkibst.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmgkibst.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmgkibst.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = Mirror(reflecting: test_tuple).subjectType\n    for i in test_tuple {\n        if Mirror(reflecting: i).subjectType != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp4qeavbgb.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qeavbgb.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qeavbgb.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qeavbgb.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpnfmp9vej.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple[0]\n    for i in test_tuple {\n        if type(of: i) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp1r0srpfr.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1r0srpfr.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1r0srpfr.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1r0srpfr.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let first_element = test_tuple[0]\n                        ~~~~~~~~~~^\n/tmp/tmp1r0srpfr.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let test_tuple_type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != test_tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpf4vlbi4q.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_value = test_tuple as! [Any]\n    for i in tuple_value {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp1lnwsfm_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1lnwsfm_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1lnwsfm_.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    switch tuple_type {\n    case is Int.Type:\n        return true\n    case is String.Type:\n        return true\n    case is Double.Type:\n        return true\n    case is Float.Type:\n        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpeu6vpu3c.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in 1..<test_tuple.count {\n        if type != type(of: test_tuple[i]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpn7fknjqa.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7fknjqa.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7fknjqa.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7fknjqa.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpn7fknjqa.swift:5:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 1..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = \"\"\n    for i in test_tuple {\n        if type == \"\" {\n            type = \"\\(type(of: i))\"\n        } else if type != \"\\(type(of: i))\" {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp4om7auef.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4om7auef.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4om7auef.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4om7auef.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpthzlmo5h.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpthzlmo5h.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let test_tuple_type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != test_tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpf4vlbi4q.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4vlbi4q.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    var tuple_type_str_arr_count_temp = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_2 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_3 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_4 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_5 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_6 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_7 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_8 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_9 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_10 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_11 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_12 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_13 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_14 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_15 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_16 = tuple_type_str_arr_count\n    var tuple_type_str_arr_count_temp_17 =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpg642fa3d.swift:24:43: error: expected initial value after '='\n    var tuple_type_str_arr_count_temp_17 =\n                                          ^\n/tmp/tmpg642fa3d.swift:40:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg642fa3d.swift:41:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg642fa3d.swift:42:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let test_tuple_array_type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != test_tuple_array_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpigqpxihe.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag: Bool = true\n    var type: AnyHashable = test_tuple[0]\n    for i in test_tuple {\n        if type != i {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpf9xrl_xl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9xrl_xl.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9xrl_xl.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf9xrl_xl.swift:5:39: error: value of type 'AnyHashable' has no subscripts\n    var type: AnyHashable = test_tuple[0]\n                            ~~~~~~~~~~^\n/tmp/tmpf9xrl_xl.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpnfmp9vej.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n    let tuple_type_array_count = tuple_type_array.count\n    var count = 0\n    for i in 0..<tuple_type_array_count {\n        if tuple_type_array[i] == tuple_type_array[0] {\n            count += 1\n        }\n    }\n    if count == tuple_type_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbcm_3ti2.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:6:46: error: value of type 'String' has no member 'components'\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n                           ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpogem2ktx.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpogem2ktx.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpogem2ktx.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpogem2ktx.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp5yg_cqyq.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp56kj5mt3.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpthzlmo5h.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpthzlmo5h.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let type_set = Set(type_array)\n    return type_set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpjlnucz9p.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.split(separator: \",\")\n    let test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    let test_tuple_type_string_array_first_element = test_tuple_type_string_array[0]\n    let test_tuple_type_string_array_first_element_count = test_tuple_type_string_array_first_element.count\n    let test_tuple_type_string_array_first_element_count_minus_1 = test_tuple_type_string_array_first_element_count - 1\n    let test_tuple_type_string_array_first_element_count_minus_1_index = test_tuple_type_string_array_first_element.index(test_tuple_type_string_array_first_element.startIndex, offsetBy: test_tuple_type_string_array_first_element_count_minus_1)\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string = String(test_tuple_type_string_array_first_element[test_tuple_type_string_array_first_element_count_minus_1_index])\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_int = Int(test_tuple_type_string_array_first_element_count_minus_1_index_string)\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_int_plus_1 = test_tuple_type_string_array_first_element_count_minus_1_index_string_int! + 1\n    if test_tuple_type_string_array_count == test_tuple_type_string_array_first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpyyt9muy6.swift:15:80: error: expected '{' after 'if' condition\n    if test_tuple_type_string_array_count == test_tuple_type_string_array_first\n                                                                               ^\n/tmp/tmpyyt9muy6.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyyt9muy6.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyyt9muy6.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyyt9muy6.swift:15:46: error: cannot find 'test_tuple_type_string_array_first' in scope\n    if test_tuple_type_string_array_count == test_tuple_type_string_array_first\n                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv20iaqh9.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv20iaqh9.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv20iaqh9.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv20iaqh9.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    if type == test_tuple {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp3c6d0gqf.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c6d0gqf.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c6d0gqf.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3c6d0gqf.swift:5:8: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    if type == test_tuple {\n       ^\n            as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_string_array = tuple_type_string.components(separatedBy: \",\")\n    let tuple_type_string_array_count = tuple_type_string_array.count\n    for i in 0..<tuple_type_string_array_count {\n        if tuple_type_string_array[0] != tuple_type_string_array[i] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphq3ylmos.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphq3ylmos.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphq3ylmos.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphq3ylmos.swift:6:53: error: value of type 'String' has no member 'components'\n    let tuple_type_string_array = tuple_type_string.components(separatedBy: \",\")\n                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp5yg_cqyq.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5yg_cqyq.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    print(type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg77gioye.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_of_first_element = type(of: test_tuple_array[0])\n    for element in test_tuple_array {\n        if type(of: element) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpqvckb4h4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqvckb4h4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqvckb4h4.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqvckb4h4.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var temp = test_tuple[0]\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8yz555uj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yz555uj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yz555uj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8yz555uj.swift:4:26: error: value of type 'AnyHashable' has no subscripts\n    var temp = test_tuple[0]\n               ~~~~~~~~~~^\n/tmp/tmp8yz555uj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return Set(type_array).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6uxzxy2o.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for element in test_tuple {\n        if type(of: element) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8fz7um6z.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != test_tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpf0thxej8.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf0thxej8.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf0thxej8.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf0thxej8.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = \"\"\n    for i in test_tuple {\n        if type == \"\" {\n            type = String(describing: type(of: i))\n        }\n        else {\n            if type != String(describing: type(of: i)) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpeqvk5_fz.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeqvk5_fz.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeqvk5_fz.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeqvk5_fz.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzics2dq7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return type_array.allSatisfy { $0 == type_array[0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoyt9wmjc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = test_tuple as! [Any]\n    let type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpyjym5vgc.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyjym5vgc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyjym5vgc.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyjym5vgc.swift:7:12: error: type 'Any' has no member 'init'\n        if type(of: i) != type {\n           ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let test_tuple_array_type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != test_tuple_array_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpigqpxihe.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpigqpxihe.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return type_array.allSatisfy { $0 == type_array[0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoyt9wmjc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple[0]\n    for element in test_tuple {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmplyrpooj4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let first_element = test_tuple[0]\n                        ~~~~~~~~~~^\n/tmp/tmplyrpooj4.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpnfmp9vej.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (Any, Any, Any)\n    if type(of: test_tuple.0) == type(of: test_tuple.1) && type(of: test_tuple.1) == type(of: test_tuple.2) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmprw426q7i.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprw426q7i.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprw426q7i.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_array = tuple_type_string.split(separator: \",\")\n    let tuple_type_array_count = tuple_type_array.count\n    for i in 0..<tuple_type_array_count {\n        if tuple_type_array[i] != tuple_type_array[0] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzlefgrpc.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlefgrpc.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlefgrpc.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    print(type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg77gioye.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_array = test_tuple as! [Any]\n    for i in tuple_array {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbkch3n3x.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbkch3n3x.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbkch3n3x.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    if tuple_type_str == \"Tuple\" {\n        let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n        let tuple_type_str_arr_count = tuple_type_str_arr.count\n        for i in 0..<tuple_type_str_arr_count {\n            if tuple_type_str_arr[i] != tuple_type_str_arr[0] {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpc_nbfjm3.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc_nbfjm3.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc_nbfjm3.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == Int.self || type == String.self || type == Double.self || type == Float.self\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmptfqn7u35.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptfqn7u35.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptfqn7u35.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpooto9ypl.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpooto9ypl.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    var type_str = \"\"\n    for i in tuple_type_str_arr {\n        if i.contains(\"(\") {\n            type_str = String(i.split(separator: \"(\")[0])\n            break\n        }\n    }\n    for i in tuple_type_str_arr {\n        if i.contains(type_str) {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpsyfkhyv6.swift:37:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsyfkhyv6.swift:38:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsyfkhyv6.swift:39:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphy5wk83j.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var temp = test_tuple[0]\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpj551y9tc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:5:26: error: value of type 'AnyHashable' has no subscripts\n    var temp = test_tuple[0]\n               ~~~~~~~~~~^\n/tmp/tmpj551y9tc.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var prev_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != prev_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpllgea0kv.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpllgea0kv.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpllgea0kv.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpllgea0kv.swift:4:40: error: value of type 'AnyHashable' has no subscripts\n    var prev_type = type(of: test_tuple[0])\n                             ~~~~~~~~~~^\n/tmp/tmpllgea0kv.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    let type_5 = type(of: test_tuple.4)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 && type_4 == type_5 {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpxtg16xut.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxtg16xut.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxtg16xut.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpgjbrwynm.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgjbrwynm.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgjbrwynm.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgjbrwynm.swift:5:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmpgjbrwynm.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type_list: [AnyHashable] = []\n    for i in test_tuple {\n        type_list.append(i)\n    }\n    for i in 0..<type_list.count {\n        if type(of: type_list[0]) != type(of: type_list[i]) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmplwynkeg6.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplwynkeg6.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplwynkeg6.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplwynkeg6.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzyqnf2fj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqnf2fj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqnf2fj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzyqnf2fj.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    var first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpzyqnf2fj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpssu8z6e1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpssu8z6e1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpssu8z6e1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpssu8z6e1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppp7kdag1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:4:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmppp7kdag1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map { type(of: $0) })\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2iu__osc.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map { type(of: $0) })\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first as! String\n    let first_element_type = type(of: first_element)\n    for element in test_tuple {\n        if type(of: element) != first_element_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9c_aa2gj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_aa2gj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_aa2gj.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9c_aa2gj.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first as! String\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmp9c_aa2gj.swift:6:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp56kj5mt3.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return type_array.allSatisfy { $0 == type_array[0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoyt9wmjc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpa8acnisq.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa8acnisq.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa8acnisq.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa8acnisq.swift:7:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = test_tuple as! [Any]\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let type_set = Set(type_array)\n    if type_set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpy3carr4k.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy3carr4k.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy3carr4k.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy3carr4k.swift:6:20: error: type 'any Any.Type' cannot conform to 'Hashable'\n    let type_set = Set(type_array)\n                   ^\n/tmp/tmpy3carr4k.swift:6:20: note: only concrete types such as structs, enums and classes can conform to protocols\n    let type_set = Set(type_array)\n                   ^\n/tmp/tmpy3carr4k.swift:6:20: note: required by referencing initializer 'init(_:)' on 'Set' where 'Element' = 'any Any.Type'\n    let type_set = Set(type_array)\n                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphy5wk83j.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.value(forKey: \"0\")!)\n    for i in 1..<test_tuple.count {\n        if type(of: test_tuple.value(forKey: \"\\(i)\")!) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpqwep5fr4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqwep5fr4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqwep5fr4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqwep5fr4.swift:4:42: error: value of type 'AnyHashable' has no member 'value'\n    let first_type = type(of: test_tuple.value(forKey: \"0\")!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmpqwep5fr4.swift:5:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 1..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzics2dq7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzics2dq7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type: AnyHashable = test_tuple[0]\n    for i in test_tuple {\n        if i is type {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpeiin4ypj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeiin4ypj.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeiin4ypj.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeiin4ypj.swift:4:39: error: value of type 'AnyHashable' has no subscripts\n    var type: AnyHashable = test_tuple[0]\n                            ~~~~~~~~~~^\n/tmp/tmpeiin4ypj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in 1..<test_tuple.count {\n        if type(of: test_tuple[i]) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpku7hxqpc.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpku7hxqpc.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpku7hxqpc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpku7hxqpc.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpku7hxqpc.swift:5:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 1..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpthzlmo5h.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpthzlmo5h.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    switch tuple_type {\n    case is Int.Type:\n        return true\n    case is String.Type:\n        return true\n    case is Double.Type:\n        return true\n    case is Float.Type:\n        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpeu6vpu3c.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let first_element = test_tuple_array[0]\n    for element in test_tuple_array {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphyx250q6.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphyx250q6.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphyx250q6.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphyx250q6.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    var type_check = true\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            type_check = false\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp_mywdcrn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mywdcrn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mywdcrn.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_mywdcrn.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    print(type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg77gioye.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpooto9ypl.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpooto9ypl.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_of_first_element = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpacet8npr.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let test_tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != test_tuple_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp_k4civ90.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_k4civ90.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_k4civ90.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_k4civ90.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set_type_array = Set(type_array)\n    if set_type_array.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp_7pxis8f.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_7pxis8f.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_7pxis8f.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_7pxis8f.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let value = test_tuple.value\n    let type = type(of: value)\n    for i in test_tuple {\n        if type(of: i.value) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6tx502p6.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tx502p6.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tx502p6.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tx502p6.swift:4:28: error: value of type 'AnyHashable' has no member 'value'\n    let value = test_tuple.value\n                ~~~~~~~~~~ ^~~~~\n/tmp/tmp6tx502p6.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppp7kdag1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:4:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmppp7kdag1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var count = 0\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) == type {\n            count += 1\n        }\n    }\n    if count == test_tuple.count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp90ns6n7x.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp90ns6n7x.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp90ns6n7x.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp90ns6n7x.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp90ns6n7x.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n/tmp/tmp90ns6n7x.swift:11:28: error: value of type 'AnyHashable' has no member 'count'\n    if count == test_tuple.count {\n                ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var temp = test_tuple.first\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpfzv3yqxp.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfzv3yqxp.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfzv3yqxp.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfzv3yqxp.swift:5:27: error: value of type 'AnyHashable' has no member 'first'\n    var temp = test_tuple.first\n               ~~~~~~~~~~ ^~~~~\n/tmp/tmpfzv3yqxp.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpx5eztblk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpx5eztblk.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type: Any.Type? = nil\n    for element in test_tuple {\n        if type == nil {\n            type = type(of: element)\n        }\n        else if type != type(of: element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpthlrcdjz.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthlrcdjz.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthlrcdjz.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthlrcdjz.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppp7kdag1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:4:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmppp7kdag1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzics2dq7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple[0]\n    for element in test_tuple {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmplyrpooj4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let first_element = test_tuple[0]\n                        ~~~~~~~~~~^\n/tmp/tmplyrpooj4.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let unique_type_array = Set(type_array)\n    return type_array.count == unique_type_array.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6quz5gph.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6quz5gph.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6quz5gph.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6quz5gph.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let t = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let t1 = t.0 as! Int\n    let t2 = t.1 as! Int\n    let t3 = t.2 as! Int\n    let t4 = t.3 as! Int\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2tkgwmxp.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2tkgwmxp.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2tkgwmxp.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2tkgwmxp.swift:5:9: warning: initialization of immutable value 't1' was never used; consider replacing with assignment to '_' or removing it\n    let t1 = t.0 as! Int\n    ~~~~^~\n    _\n/tmp/tmp2tkgwmxp.swift:6:9: warning: initialization of immutable value 't2' was never used; consider replacing with assignment to '_' or removing it\n    let t2 = t.1 as! Int\n    ~~~~^~\n    _\n/tmp/tmp2tkgwmxp.swift:7:9: warning: initialization of immutable value 't3' was never used; consider replacing with assignment to '_' or removing it\n    let t3 = t.2 as! Int\n    ~~~~^~\n    _\n/tmp/tmp2tkgwmxp.swift:8:9: warning: initialization of immutable value 't4' was never used; consider replacing with assignment to '_' or removing it\n    let t4 = t.3 as! Int\n    ~~~~^~\n    _\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type_list = [AnyHashable]()\n    for i in test_tuple {\n        type_list.append(type(of: i))\n    }\n    return type_list.allSatisfy({$0 == type_list[0]})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpw1471ox_.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw1471ox_.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw1471ox_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw1471ox_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    print(\"Type of tuple is: \\(test_tuple_type)\")\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmptjys6b7z.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptjys6b7z.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptjys6b7z.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpooto9ypl.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpooto9ypl.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (Any, Any, Any)\n    let first_type = type(of: test_tuple.0)\n    let second_type = type(of: test_tuple.1)\n    let third_type = type(of: test_tuple.2)\n    return first_type == second_type && second_type == third_type\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpewbh54am.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpewbh54am.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpewbh54am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_str = String(describing: test_tuple_type)\n    let test_tuple_type_str_array = test_tuple_type_str.components(separatedBy: \",\")\n    let test_tuple_type_str_array_count = test_tuple_type_str_array.count\n    let test_tuple_type_str_array_first = test_tuple_type_str_array[0]\n    for i in 1..<test_tuple_type_str_array_count {\n        if test_tuple_type_str_array_first != test_tuple_type_str_array[i] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9ibu7qau.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9ibu7qau.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9ibu7qau.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9ibu7qau.swift:6:57: error: value of type 'String' has no member 'components'\n    let test_tuple_type_str_array = test_tuple_type_str.components(separatedBy: \",\")\n                                    ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var temp = test_tuple[0]\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpj551y9tc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:5:26: error: value of type 'AnyHashable' has no subscripts\n    var temp = test_tuple[0]\n               ~~~~~~~~~~^\n/tmp/tmpj551y9tc.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    if tuple_type == Int.self || tuple_type == String.self || tuple_type == Double.self {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpntongaxb.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpntongaxb.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpntongaxb.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type: AnyHashable = test_tuple[0]\n    for i in test_tuple {\n        if type != i {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8znmzg90.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8znmzg90.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8znmzg90.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8znmzg90.swift:4:39: error: value of type 'AnyHashable' has no subscripts\n    var type: AnyHashable = test_tuple[0]\n                            ~~~~~~~~~~^\n/tmp/tmp8znmzg90.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple.first ?? \"\")\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv0x1c37e.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0x1c37e.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0x1c37e.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0x1c37e.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    var type = type(of: test_tuple.first ?? \"\")\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpv0x1c37e.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    if tuple_type_str.contains(\"(\") {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpxlhjqx9g.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxlhjqx9g.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxlhjqx9g.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppnqm__vy.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppnqm__vy.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppnqm__vy.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppnqm__vy.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmppnqm__vy.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    let type_5 = type(of: test_tuple.4)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 && type_4 == type_5 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpnpmp0vst.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnpmp0vst.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnpmp0vst.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map { type(of: $0) })\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2iu__osc.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map { type(of: $0) })\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpimuibpwp.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    let first_type = type(of: first_element)\n    for element in test_tuple {\n        if type(of: element) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpkhqowkpk.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpkhqowkpk.swift:6:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpnfmp9vej.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    let type = type(of: first_element!)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpydb9231f.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpydb9231f.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpydb9231f.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpydb9231f.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpydb9231f.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    for i in 0..<tuple_type_str_arr_count {\n        if tuple_type_str_arr[i] != tuple_type_str_arr[0] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpswd2jhr2.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpswd2jhr2.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpswd2jhr2.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return Set(type_array).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6uxzxy2o.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_str = String(describing: tuple_type)\n    let tuple_str_array = tuple_str.split(separator: \",\")\n    let tuple_str_array_count = tuple_str_array.count\n    var count = 0\n    for i in 0..<tuple_str_array_count {\n        if tuple_str_array[i] == tuple_str_array[0] {\n            count += 1\n        }\n    }\n    if count == tuple_str_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpjtna9jnc.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjtna9jnc.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjtna9jnc.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg9gtmn1l.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg9gtmn1l.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg9gtmn1l.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg9gtmn1l.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_str = String(describing: test_tuple_type)\n    if test_tuple_type_str.contains(\"Int\") {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpk8u3ez52.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk8u3ez52.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk8u3ez52.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzics2dq7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzics2dq7.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpv9d5dbda.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv9d5dbda.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpv9d5dbda.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = \"\"\n    for i in test_tuple {\n        if type == \"\" {\n            type = String(describing: type(of: i))\n        }\n        else if type != String(describing: type(of: i)) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6_q_ktet.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_q_ktet.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_q_ktet.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_q_ktet.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    for element in test_tuple {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8_ojpl2r.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8_ojpl2r.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8_ojpl2r.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8_ojpl2r.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmp8_ojpl2r.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_of_first_element = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpacet8npr.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpacet8npr.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var temp = test_tuple[0]\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpj551y9tc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj551y9tc.swift:5:26: error: value of type 'AnyHashable' has no subscripts\n    var temp = test_tuple[0]\n               ~~~~~~~~~~^\n/tmp/tmpj551y9tc.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppp7kdag1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:4:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmppp7kdag1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag: Bool = true\n    let temp = test_tuple as! (Any, Any, Any, Any, Any)\n    let type_1 = type(of: temp.0)\n    let type_2 = type(of: temp.1)\n    let type_3 = type(of: temp.2)\n    let type_4 = type(of: temp.3)\n    let type_5 = type(of: temp.4)\n    if type_1 != type_2 || type_1 != type_3 || type_1 != type_4 || type_1 != type_5 {\n        flag = false\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpykvlj_r9.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykvlj_r9.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpykvlj_r9.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    if tuple_type_str.contains(\"(\") {\n        let tuple_type_str_arr = tuple_type_str.split(separator: \"(\")\n        let tuple_type_str_arr_1 = tuple_type_str_arr[1].split(separator: \")\")\n        let tuple_type_str_arr_2 = tuple_type_str_arr_1[0].split(separator: \",\")\n        let tuple_type_str_arr_3 = tuple_type_str_arr_2.map { String($0) }\n        let tuple_type_str_arr_4 = tuple_type_str_arr_3.map { $0.trimmingCharacters(in: .whitespaces) }\n        let tuple_type_str_arr_5 = tuple_type_str_arr_4.map { $0.replacingOccurrences(of: \" \", with: \"\") }\n        let tuple_type_str_arr_6 = tuple_type_str_arr_5.map { $0.replacingOccurrences(of: \":\", with: \"\") }\n        let tuple_type_str_arr_7 = tuple_type_str_arr_6.map { $0.replacingOccurrences(of: \"\\\"\", with: \"\") }\n        let tuple_type_str_arr_8 = tuple_type_str_arr_7.map { $0.replacingOccurrences(of: \"Optional\", with: \"\") }\n        let tuple_type_str_arr_9 = tuple_type_str_arr_8.map { $0.replacingOccurrences(of: \"?\", with: \"\") }\n        let tuple_type_str_arr_10 = tuple_type_str_arr_9.map { $0.replacingOccurrences(of: \"Int\", with: \"\") }\n        let tuple_type_str_arr_11 = tuple_type_str_arr_10.map { $0.replacingOccurrences(of: \"String\", with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdyyls4mt.swift:36:56: error: expected '}' at end of brace statement\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n                                                       ^\n/tmp/tmpdyyls4mt.swift:6:37: note: to match this opening '{'\n    if tuple_type_str.contains(\"(\") {\n                                    ^\n/tmp/tmpdyyls4mt.swift:36:56: error: expected '}' at end of brace statement\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n                                                       ^\n/tmp/tmpdyyls4mt.swift:3:50: note: to match this opening '{'\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n                                                 ^\n/tmp/tmpdyyls4mt.swift:11:66: error: value of type 'String' has no member 'trimmingCharacters'\n        let tuple_type_str_arr_4 = tuple_type_str_arr_3.map { $0.trimmingCharacters(in: .whitespaces) }\n                                                              ~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpdyyls4mt.swift:11:90: error: cannot infer contextual base in reference to member 'whitespaces'\n        let tuple_type_str_arr_4 = tuple_type_str_arr_3.map { $0.trimmingCharacters(in: .whitespaces) }\n                                                                                        ~^~~~~~~~~~~\n/tmp/tmpdyyls4mt.swift:22:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpdyyls4mt.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdyyls4mt.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdyyls4mt.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_array = [String]()\n    for i in test_tuple_array {\n        type_array.append(String(describing: type(of: i)))\n    }\n    if type_array.count == Set(type_array).count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9813522j.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9813522j.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9813522j.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9813522j.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_of_first_element = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpzs4gs5hj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzs4gs5hj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzs4gs5hj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzs4gs5hj.swift:4:52: error: value of type 'AnyHashable' has no subscripts\n    let type_of_first_element = type(of: test_tuple[0])\n                                         ~~~~~~~~~~^\n/tmp/tmpzs4gs5hj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}