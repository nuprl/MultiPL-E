{
  "name": "mbpp_285_text_match_two_three",
  "language": "swift",
  "prompt": "\n/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunc text_match_two_three(text: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(text_match_two_three(text: \"ac\") == false)\nassert(text_match_two_three(text: \"dc\") == false)\nassert(text_match_two_three(text: \"abbbba\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.count)) != nil",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.firstMatch(in: text, options: [], range: range) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    return text.range(of: \"ab{2,3}\", options: .regularExpression) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    return regex.firstMatch(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count)) != nil",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.range(of: \"ab{2,3}\", options: .regularExpression) != nil",
    "    return text.range(of: \"ab{2,3}\", options: .regularExpression) != nil",
    "    let pattern = \"a(bb|bbb)\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let matches = regex.matches(in: text, options: [], range: range)\n    return matches.count > 0",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"ab{2,3}\", options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.range(of: \"a(bb|bbb)\", options: .regularExpression) != nil",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0",
    "    return text.range(of: \"ab{2,3}\", options: .regularExpression) != nil",
    "    let pattern = \"ab{2,3}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSRange(location: 0, length: text.utf16.count))\n    return matches.count > 0"
  ]
}