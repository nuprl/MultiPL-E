{
  "name": "mbpp_558_digit_distance_nums",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0...9 {\n        sum += abs(count_digits(n1, digit: i) - count_digits(n2, digit: i))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpuma3udlm.swift:6:20: error: cannot find 'count_digits' in scope\n        sum += abs(count_digits(n1, digit: i) - count_digits(n2, digit: i))\n                   ^~~~~~~~~~~~\n/tmp/tmpuma3udlm.swift:6:49: error: cannot find 'count_digits' in scope\n        sum += abs(count_digits(n1, digit: i) - count_digits(n2, digit: i))\n                                                ^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpfw0siogi/tmpfw0siogi.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35eb8d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35eb5ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35eb5ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35eb5cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfw0siogi                        0x000055df719b124a <unavailable> + 4682\n5    libc.so.6                          0x00002b35ebac3460 __libc_start_main + 245\n6    tmpfw0siogi                        0x000055df719b0ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = n1.digits()\n    let n2_digits = n2.digits()\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmp0d7n65j6.swift:4:24: error: value of type 'Int' has no member 'digits'\n    let n1_digits = n1.digits()\n                    ~~ ^~~~~~\n/tmp/tmp0d7n65j6.swift:5:24: error: value of type 'Int' has no member 'digits'\n    let n2_digits = n2.digits()\n                    ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let n1_digits_count = n1_digits.count\n    let n2_digits_count = n2_digits.count\n    let max_digits_count = max(n1_digits_count, n2_digits_count)\n    var sum = 0\n    for i in 0..<max_digits_count {\n        let n1_digit = i < n1_digits_count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits_count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmplm0x2kfl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplm0x2kfl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let digit1 = num1 % 10\n        let digit2 = num2 % 10\n        sum += abs(digit1 - digit2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let digit1 = num1 % 10\n        let digit2 = num2 % 10\n        sum += abs(digit1 - digit2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_digits = n1.digits\n    let n2_digits = n2.digits\n    let n1_len = n1_digits.count\n    let n2_len = n2_digits.count\n    let max_len = max(n1_len, n2_len)\n    for i in 0..<max_len {\n        let n1_digit = i < n1_len ? n1_digits[i] : 0\n        let n2_digit = i < n2_len ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp59lyiydn.swift:5:24: error: value of type 'Int' has no member 'digits'\n    let n1_digits = n1.digits\n                    ~~ ^~~~~~\n/tmp/tmp59lyiydn.swift:6:24: error: value of type 'Int' has no member 'digits'\n    let n2_digits = n2.digits\n                    ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = n1.digits\n    let n2_digits = n2.digits\n    var sum = 0\n    for i in 0..<max(n1_digits.count, n2_digits.count) {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpl2yln7_m.swift:4:24: error: value of type 'Int' has no member 'digits'\n    let n1_digits = n1.digits\n                    ~~ ^~~~~~\n/tmp/tmpl2yln7_m.swift:5:24: error: value of type 'Int' has no member 'digits'\n    let n2_digits = n2.digits\n                    ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    return zip(n1_digits, n2_digits).map { abs($0 - $1) }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmptlqooi0_.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptlqooi0_.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptlqooi0_.swift:6:65: error: extraneous argument label 'combine:' in call\n    return zip(n1_digits, n2_digits).map { abs($0 - $1) }.reduce(0, combine: +)\n                                                                ^   ~~~~~~~~~\n                                                                    \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmpgjakq7tz/tmpgjakq7tz.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b25b3611c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b25b3308b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b25b3308988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25b33077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgjakq7tz                        0x0000564decf5b24a <unavailable> + 4682\n5    libc.so.6                          0x00002b25b37fd460 __libc_start_main + 245\n6    tmpgjakq7tz                        0x0000564decf5aef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpsdoss8lr.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpsdoss8lr.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var result = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            result += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            result += n2 % 10\n            n2 /= 10\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmptlvwz0as/tmptlvwz0as.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8191afbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81917f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81917f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81917f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptlvwz0as                        0x0000557a2435924a <unavailable> + 4682\n5    libc.so.6                          0x00002b8191ce7460 __libc_start_main + 245\n6    tmptlvwz0as                        0x0000557a24358ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        if num1 > 0 {\n            sum += abs(num1 % 10 - num2 % 10)\n            num1 /= 10\n        }\n        if num2 > 0 {\n            sum += abs(num1 % 10 - num2 % 10)\n            num2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmpz2noe313/tmpz2noe313.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e0c62fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e0c326b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e0c326988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e0c3257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz2noe313                        0x00005604d29bd33a <unavailable> + 4922\n5    libc.so.6                          0x00002b3e0c81b460 __libc_start_main + 245\n6    tmpz2noe313                        0x00005604d29bcfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let digit1 = num1 % 10\n        let digit2 = num2 % 10\n        sum += abs(digit1 - digit2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = n1.digits\n    let n2_digits = n2.digits\n    let n1_digits_count = n1_digits.count\n    let n2_digits_count = n2_digits.count\n    let max_digits_count = max(n1_digits_count, n2_digits_count)\n    var sum = 0\n    for i in 0..<max_digits_count {\n        let n1_digit = i < n1_digits_count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits_count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp4hj44q16.swift:4:24: error: value of type 'Int' has no member 'digits'\n    let n1_digits = n1.digits\n                    ~~ ^~~~~~\n/tmp/tmp4hj44q16.swift:5:24: error: value of type 'Int' has no member 'digits'\n    let n2_digits = n2.digits\n                    ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmp492bxr0x/tmp492bxr0x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19406fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19403f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19403f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19403f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp492bxr0x                        0x000055dfc041b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19408e6460 __libc_start_main + 245\n6    tmp492bxr0x                        0x000055dfc041afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let d1 = num1 % 10\n        let d2 = num2 % 10\n        sum += abs(d1 - d2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmpddujnepg/tmpddujnepg.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34a3db2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34a3aa9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b34a3aa9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b34a3aa87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpddujnepg                        0x000055fc597bf1ba <unavailable> + 4538\n5    libc.so.6                          0x00002b34a3f9e460 __libc_start_main + 245\n6    tmpddujnepg                        0x000055fc597bee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    \n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmp492bxr0x/tmp492bxr0x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19406fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19403f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19403f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19403f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp492bxr0x                        0x000055dfc041b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19408e6460 __libc_start_main + 245\n6    tmp492bxr0x                        0x000055dfc041afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let s1 = String(n1)\n    let s2 = String(n2)\n    var sum = 0\n    for i in 0..<s1.count {\n        let c1 = s1[i]\n        let c2 = s2[i]\n        sum += abs(c1 - c2)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp8bhc14z1.swift:8:18: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        let c1 = s1[i]\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8bhc14z1.swift:9:18: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        let c2 = s2[i]\n                 ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8bhc14z1.swift:10:23: error: binary operator '-' cannot be applied to two 'Character' operands\n        sum += abs(c1 - c2)\n                      ^\nSwift.Strideable:1:11: note: candidate requires that 'Character' conform to '_Pointer' (requirement specified as 'Self' : '_Pointer')\nextension Strideable where Self : _Pointer {\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.count {\n        let d1 = n1.digit(i)\n        let d2 = n2.digit(i)\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpent7zfze.swift:5:21: error: value of type 'Int' has no member 'count'\n    for i in 0..<n1.count {\n                 ~~ ^~~~~\n/tmp/tmpent7zfze.swift:6:21: error: value of type 'Int' has no member 'digit'\n        let d1 = n1.digit(i)\n                 ~~ ^~~~~\n/tmp/tmpent7zfze.swift:7:21: error: value of type 'Int' has no member 'digit'\n        let d2 = n2.digit(i)\n                 ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpfw0siogi/tmpfw0siogi.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35eb8d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35eb5ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35eb5ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35eb5cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfw0siogi                        0x000055df719b124a <unavailable> + 4682\n5    libc.so.6                          0x00002b35ebac3460 __libc_start_main + 245\n6    tmpfw0siogi                        0x000055df719b0ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let digit1 = num1 % 10\n        let digit2 = num2 % 10\n        sum += abs(digit1 - digit2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmp3eseo5dd/tmp3eseo5dd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe3756cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe37263b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe37263988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe372627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3eseo5dd                        0x00005628516bf1ba <unavailable> + 4538\n5    libc.so.6                          0x00002afe37758460 __libc_start_main + 245\n6    tmp3eseo5dd                        0x00005628516bee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpplmtajx3/tmpplmtajx3.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a8483bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a84532b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a84532988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a845317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpplmtajx3                        0x000056078d98433a <unavailable> + 4922\n5    libc.so.6                          0x00002b0a84a27460 __libc_start_main + 245\n6    tmpplmtajx3                        0x000056078d983fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmpfw0siogi/tmpfw0siogi.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b35eb8d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b35eb5ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b35eb5ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b35eb5cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfw0siogi                        0x000055df719b124a <unavailable> + 4682\n5    libc.so.6                          0x00002b35ebac3460 __libc_start_main + 245\n6    tmpfw0siogi                        0x000055df719b0ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmpgjakq7tz/tmpgjakq7tz.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b25b3611c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b25b3308b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b25b3308988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25b33077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgjakq7tz                        0x0000564decf5b24a <unavailable> + 4682\n5    libc.so.6                          0x00002b25b37fd460 __libc_start_main + 245\n6    tmpgjakq7tz                        0x0000564decf5aef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<n1.digits.count {\n        sum += abs(n1.digits[i] - n2.digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510376,
      "stdout": "",
      "stderr": "/tmp/tmpx78u37dp.swift:5:21: error: value of type 'Int' has no member 'digits'\n    for i in 0..<n1.digits.count {\n                 ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += (n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += (n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmp1o_dcsl5/tmp1o_dcsl5.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12ff8dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12ff5d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12ff5d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12ff5d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1o_dcsl5                        0x0000564656f3f24a <unavailable> + 4682\n5    libc.so.6                          0x00002b12ffac8460 __libc_start_main + 245\n6    tmp1o_dcsl5                        0x0000564656f3eef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "tmpcdzz3m5l/tmpcdzz3m5l.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad731a94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad73178bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad73178b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad73178a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcdzz3m5l                        0x000056202a83c33a <unavailable> + 4922\n5    libc.so.6                          0x00002ad731c80460 __libc_start_main + 245\n6    tmpcdzz3m5l                        0x000056202a83bfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "tmp9calxf9_/tmp9calxf9_.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd7832c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd7529b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd7529988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd75287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9calxf9_                        0x0000564b8f1381ba <unavailable> + 4538\n5    libc.so.6                          0x00002b2cd7a1e460 __libc_start_main + 245\n6    tmp9calxf9_                        0x0000564b8f137e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}