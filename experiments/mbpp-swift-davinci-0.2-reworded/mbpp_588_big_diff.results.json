{
  "name": "mbpp_588_big_diff",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    \n    for i in nums {\n        if i > largest {\n            largest = i\n        }\n        if i < smallest {\n            smallest = i\n        }\n    }\n    return largest - smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = 0\n    var min = 0\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpl5qtxidy/tmpl5qtxidy.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89a3b1cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89a3813b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89a3813988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89a38127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl5qtxidy                        0x000055d2404b047a <unavailable> + 5242\n5    libc.so.6                          0x00002b89a3d08460 __libc_start_main + 245\n6    tmpl5qtxidy                        0x000055d2404b00d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for n in nums {\n        if n < min {\n            min = n\n        }\n        if n > max {\n            max = n\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return max(nums) - min(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp_vkd503y.swift:4:20: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                   ^\n                   , <#Int#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:16: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n               ^\n/tmp/tmp_vkd503y.swift:4:32: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                               ^\n                               , <#Int#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:28: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = Int.max\n    var max = Int.min\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for i in nums {\n        if i > largest {\n            largest = i\n        }\n        if i < smallest {\n            smallest = i\n        }\n    }\n    return largest - smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return max(nums) - min(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp_vkd503y.swift:4:20: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                   ^\n                   , <#Int#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:16: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n               ^\n/tmp/tmp_vkd503y.swift:4:32: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                               ^\n                               , <#Int#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:28: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    \n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    \n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return max(nums) - min(nums)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "/tmp/tmp_vkd503y.swift:4:20: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                   ^\n                   , <#Int#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:16: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n               ^\n/tmp/tmp_vkd503y.swift:4:32: error: missing argument for parameter #2 in call\n    return max(nums) - min(nums)\n                               ^\n                               , <#Int#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmp_vkd503y.swift:4:28: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n    return max(nums) - min(nums)\n                           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var largest = nums[0]\n    var smallest = nums[0]\n    for i in nums {\n        if i > largest {\n            largest = i\n        }\n        if i < smallest {\n            smallest = i\n        }\n    }\n    return largest - smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the difference between largest and smallest value in a given array.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}