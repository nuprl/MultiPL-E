{
  "name": "mbpp_736_left_insertion",
  "language": "swift",
  "prompt": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high)/2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp05nwxyqc/tmp05nwxyqc.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af87954ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af879245b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af879245988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8792447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp05nwxyqc                        0x00005615c188545f <unavailable> + 5215\n5    libc.so.6                          0x00002af87973a460 __libc_start_main + 245\n6    tmp05nwxyqc                        0x00005615c18850b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmplq411es6/tmplq411es6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76b498bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76b4682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76b4682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76b46817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplq411es6                        0x0000555c13c0b45f <unavailable> + 5215\n5    libc.so.6                          0x00002b76b4b77460 __libc_start_main + 245\n6    tmplq411es6                        0x0000555c13c0b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmplq411es6/tmplq411es6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76b498bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76b4682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76b4682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76b46817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplq411es6                        0x0000555c13c0b45f <unavailable> + 5215\n5    libc.so.6                          0x00002b76b4b77460 __libc_start_main + 245\n6    tmplq411es6                        0x0000555c13c0b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmplq411es6/tmplq411es6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76b498bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76b4682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76b4682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76b46817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplq411es6                        0x0000555c13c0b45f <unavailable> + 5215\n5    libc.so.6                          0x00002b76b4b77460 __libc_start_main + 245\n6    tmplq411es6                        0x0000555c13c0b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x > a[mid] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        }\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x > a[mid] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] >= x {\n            r = m\n        } else {\n            l = m + 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpcjvpy80n/tmpcjvpy80n.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af76de35c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af76db2cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af76db2c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af76db2b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjvpy80n                        0x0000556e738a745f <unavailable> + 5215\n5    libc.so.6                          0x00002af76e021460 __libc_start_main + 245\n6    tmpcjvpy80n                        0x0000556e738a70b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] == x {\n            if mid == 0 || a[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] == x {\n            return m\n        } else if a[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    var m = 0\n    while l <= r {\n        m = (l + r) / 2\n        if a[m] == x {\n            return m\n        } else if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] >= x {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpno4gc1pj/tmpno4gc1pj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9c6ecdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9c6bc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9c6bc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9c6bc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpno4gc1pj                        0x000055af1ca1d45f <unavailable> + 5215\n5    libc.so.6                          0x00002ab9c70b9460 __libc_start_main + 245\n6    tmpno4gc1pj                        0x000055af1ca1d0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp05nwxyqc/tmp05nwxyqc.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af87954ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af879245b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af879245988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8792447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp05nwxyqc                        0x00005615c188545f <unavailable> + 5215\n5    libc.so.6                          0x00002af87973a460 __libc_start_main + 245\n6    tmp05nwxyqc                        0x00005615c18850b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmplq411es6/tmplq411es6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76b498bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76b4682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76b4682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76b46817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplq411es6                        0x0000555c13c0b45f <unavailable> + 5215\n5    libc.so.6                          0x00002b76b4b77460 __libc_start_main + 245\n6    tmplq411es6                        0x0000555c13c0b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmp1obed05a/tmp1obed05a.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2cd949cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2cd9193b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2cd9193988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2cd91927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1obed05a                        0x000056048fa8145f <unavailable> + 5215\n5    libc.so.6                          0x00002b2cd9688460 __libc_start_main + 245\n6    tmp1obed05a                        0x000056048fa810b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmplq411es6/tmplq411es6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b76b498bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b76b4682b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b76b4682988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76b46817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplq411es6                        0x0000555c13c0b45f <unavailable> + 5215\n5    libc.so.6                          0x00002b76b4b77460 __libc_start_main + 245\n6    tmplq411es6                        0x0000555c13c0b0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124251,
      "stdout": "",
      "stderr": "tmpnmadbq56/tmpnmadbq56.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46f43d1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46f40c8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46f40c8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46f40c77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnmadbq56                        0x0000560fbd30c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b46f45bd460 __libc_start_main + 245\n6    tmpnmadbq56                        0x0000560fbd30c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}