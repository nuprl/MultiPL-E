{
  "name": "mbpp_69_is_sublist",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether an array contains the given subarray or not.\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)\nassert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    guard l.count >= s.count else { return false }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    if l.count < s.count {\n        return false\n    }\n    var i = 0\n    while i < l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n        i += 1\n    }\n    return false",
    "    if s.count > l.count {\n        return false\n    }\n    if s.count == 0 {\n        return true\n    }\n    if l[0] == s[0] {\n        return is_sublist(l: Array(l[1..<l.count]), s: Array(s[1..<s.count]))\n    }\n    return is_sublist(l: Array(l[1..<l.count]), s: s)",
    "    var i = 0\n    var j = 0\n    let n = l.count\n    let m = s.count\n    while i < n && j < m {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == m",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count",
    "    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && i + j < l.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    let l_len = l.count\n    let s_len = s.count\n    \n    if l_len < s_len {\n        return false\n    }\n    \n    for i in 0...(l_len - s_len) {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s_len {\n                if l[i + j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s_len {\n                return true\n            }\n        }\n    }\n    return false",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count",
    "    if l.count < s.count { return false }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i + j] != s[j] { break }\n                j += 1\n            }\n            if j == s.count { return true }\n        }\n    }\n    return false",
    "    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count",
    "    if l.count < s.count {\n        return false\n    }\n    if l.count == s.count {\n        return l == s\n    }\n    for i in 0..<(l.count - s.count + 1) {\n        if l[i] == s[0] {\n            var j = 1\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    if s.count > l.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n    }\n    return j == s.count",
    "    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count {\n                if l[i+j] != s[j] {\n                    break\n                }\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    if l.count < s.count {\n        return false\n    }\n    for i in 0...l.count - s.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && l[i + j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    if l.count < s.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            if Array(l[i..<i+s.count]) == s {\n                return true\n            }\n        }\n    }\n    return false",
    "    if s.count > l.count {\n        return false\n    }\n    for i in 0..<l.count {\n        if l[i] == s[0] {\n            var j = 0\n            while j < s.count && i+j < l.count && l[i+j] == s[j] {\n                j += 1\n            }\n            if j == s.count {\n                return true\n            }\n        }\n    }\n    return false",
    "    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            j += 1\n        } else {\n            j = 0\n        }\n        i += 1\n    }\n    return j == s.count"
  ]
}