{
  "name": "mbpp_407_rearrange_bigger",
  "language": "swift",
  "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i - 1] >= n_arr_int[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    n_arr_int.swapAt(i - 1, j)\n    j = n_arr_int.count - 1\n    while i < j {\n        n_arr_int.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return n_arr_int",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = String(n).map { Int(String($0))! }\n    var index = digits.count - 1\n    while index > 0 && digits[index - 1] >= digits[index] {\n        index -= 1\n    }\n    if index == 0 {\n        return -1\n    }\n    var next = digits[index - 1]\n    var smallest = index\n    for i in index + 1..<digits.count {\n        if digits[i] > next && digits[i] < digits[smallest] {\n            smallest = i\n        }\n    }\n    digits.swapAt(index - 1, smallest)\n    digits[index...].sort()\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits: [Int] = []\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i..<digits.count].reversed()\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in 0..<digits.count {\n        for j in i+1..<digits.count {\n            if digits[j] > digits[i] {\n                let temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n                for k in 0..<digits.count {\n                    result = result * 10 + digits[k]\n                }\n                return result\n            }\n        }\n    }\n    return -1",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in (0..<digits.count - 1).reversed() {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0 ..< digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var s = String(n)\n    var i = s.count - 1\n    while i > 0 && s[i] <= s[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = s.count - 1\n    while s[j] <= s[i - 1] {\n        j -= 1\n    }\n    s.swapAt(i - 1, j)\n    s.replaceSubrange(i...s.count - 1, with: String(s[i...s.count - 1]).reversed())\n    return Int(s)!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i] <= digits[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let s = String(n)\n    var chars = Array(s)\n    var i = chars.count - 1\n    while i > 0 && chars[i - 1] >= chars[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = chars.count - 1\n    while j >= i && chars[j] <= chars[i - 1] {\n        j -= 1\n    }\n    chars.swapAt(i - 1, j)\n    j = chars.count - 1\n    while i < j {\n        chars.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(chars))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.map { String($0) }.joined()",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var res = 0\n    for i in 0..<digits.count {\n        res = res * 10 + digits[i]\n    }\n    return res",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let str = String(n)\n    let len = str.count\n    var i = len - 1\n    while i > 0 && str[i] <= str[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = len - 1\n    while str[j] <= str[i - 1] {\n        j -= 1\n    }\n    var arr = Array(str)\n    arr.swapAt(i - 1, j)\n    var k = len - 1\n    while i < k {\n        arr.swapAt(i, k)\n        i += 1\n        k -= 1\n    }\n    return Int(String(arr))!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    swap(&digits[i-1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i...].reversed()\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = (number * 10) + i\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var array = Array(String(n))\n    var i = array.count - 1\n    while i > 0 && array[i - 1] >= array[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = array.count - 1\n    while array[j] <= array[i - 1] {\n        j -= 1\n    }\n    array.swapAt(i - 1, j)\n    j = array.count - 1\n    while i < j {\n        array.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(array))!",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num2 = 0\n    for i in 0..<digits.count {\n        num2 = num2 * 10 + digits[i]\n    }\n    return num2",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let s = String(n)\n    let c = Array(s)\n    var i = c.count - 1\n    while i > 0 && c[i - 1] >= c[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[j] <= c[i - 1] {\n        j -= 1\n    }\n    let temp = c[i - 1]\n    c[i - 1] = c[j]\n    c[j] = temp\n    j = c.count - 1\n    while i < j {\n        let temp = c[i]\n        c[i] = c[j]\n        c[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(c))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = n.digits()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result",
    "    let s = String(n)\n    var chars = Array(s)\n    var i = chars.count - 1\n    while i > 0 && chars[i - 1] >= chars[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = chars.count - 1\n    while j >= i && chars[j] <= chars[i - 1] {\n        j -= 1\n    }\n    chars.swapAt(i - 1, j)\n    j = chars.count - 1\n    while i < j {\n        chars.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(chars))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    swap(&digits[i-1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? \"Not possible\" : result",
    "    let s = String(n)\n    let n = s.count\n    var i = n - 1\n    while i > 0 && s[i - 1] >= s[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n - 1\n    while s[j] <= s[i - 1] {\n        j -= 1\n    }\n    var s = Array(s)\n    s.swapAt(i - 1, j)\n    s = s[0..<i] + s[i..<n].reversed()\n    return Int(String(s))!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let s = String(n)\n    var i = s.count - 1\n    while i > 0 && s[s.index(s.startIndex, offsetBy: i - 1)] >= s[s.index(s.startIndex, offsetBy: i)] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = s.count - 1\n    while s[s.index(s.startIndex, offsetBy: j)] <= s[s.index(s.startIndex, offsetBy: i - 1)] {\n        j -= 1\n    }\n    var s = s\n    s.replaceSubrange(s.index(s.startIndex, offsetBy: i - 1) ... s.index(s.startIndex, offsetBy: i - 1), with: String(s[s.index(s.startIndex, offsetBy: j)]))\n    s.replaceSubrange(s.index(s.startIndex, offsetBy: j) ... s.index(s.startIndex, offsetBy: j), with: String(s[s.index(s.startIndex, offsetBy: i - 1)]))\n    var start = s.index(s.startIndex, offsetBy: i)\n    var end = s.index(s.endIndex, offsetBy: -1)\n    while start < end {\n        s.replaceSubrange(start ... start, with: String(s[end]))\n        s.replaceSubrange(end ... end, with: String(s[start]))\n        start = s.index(after: start)\n        end = s.index(before: end)\n    }\n    return Int(s)!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    if digits.count == 1 {\n        return -1\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result == n ? -1 : result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var number = n\n    var digits = [Int]()\n    while number > 0 {\n        digits.append(number % 10)\n        number /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var str = String(n)\n    var i = str.count - 1\n    while i > 0 && str[i] <= str[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = str.count - 1\n    while str[j] <= str[i - 1] {\n        j -= 1\n    }\n    str.swapAt(i - 1, j)\n    j = str.count - 1\n    while i < j {\n        str.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(str)!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num = 0\n    for i in 0..<digits.count {\n        num = num * 10 + digits[i]\n    }\n    return num",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var arr = Array(String(n))\n    var i = arr.count - 1\n    while i > 0 && arr[i-1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i-1] {\n        j -= 1\n    }\n    arr.swapAt(i-1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num2 = 0\n    for i in 0..<digits.count {\n        num2 = num2 * 10 + digits[i]\n    }\n    return num2"
  ]
}