{
  "name": "mbpp_759_is_decimal",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp3w9a3b6u.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3w9a3b6u.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: num.count)\n    return regex.firstMatch(in: num, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmptpn_0h6s.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptpn_0h6s.swift:6:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: num.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.[0-9]{2}$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpngf90lnr.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.[0-9]{2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpngf90lnr.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else {\n        return false\n    }\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp11ft0fds.swift:5:28: error: cannot find 'NSRegularExpression' in scope\n    guard let regex = try? NSRegularExpression(pattern: pattern, options: []) else {\n                           ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp11ft0fds.swift:8:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpgxx2r_ky.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxx2r_ky.swift:6:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp5gt_w7s2.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5gt_w7s2.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return NSPredicate(format: \"SELF MATCHES %@\", pattern).evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpx99l7zf2.swift:5:12: error: cannot find 'NSPredicate' in scope\n    return NSPredicate(format: \"SELF MATCHES %@\", pattern).evaluate(with: num)\n           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpgxx2r_ky.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxx2r_ky.swift:6:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    return num.range(of: \"^[0-9]*\\\\.[0-9]{2}$\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpygj4byse.swift:4:16: error: value of type 'String' has no member 'range'\n    return num.range(of: \"^[0-9]*\\\\.[0-9]{2}$\", options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmpygj4byse.swift:4:59: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: \"^[0-9]*\\\\.[0-9]{2}$\", options: .regularExpression) != nil\n                                                         ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = CharacterSet.decimalDigits\n    let decimal_point = CharacterSet(charactersIn: \".\")\n    let decimal_set = decimal.union(decimal_point)\n    let decimal_set_inverted = decimal_set.inverted\n    let decimal_set_inverted_range = num.rangeOfCharacter(from: decimal_set_inverted)\n    if decimal_set_inverted_range != nil {\n        return false\n    }\n    let decimal_point_range = num.rangeOfCharacter(from: decimal_point)\n    if decimal_point_range == nil {\n        return true\n    }\n    let decimal_point_index = num.distance(from: num.startIndex, to: decimal_point_range!.lowerBound)\n    let decimal_point_index_after = num.index(num.startIndex, offsetBy: decimal_point_index + 1)\n    let decimal_point_index_after_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after..<num.endIndex, locale: nil)\n    if decimal_point_index_after_range != nil {\n        return false\n    }\n    let decimal_point_index_after_2 = num.index(num.startIndex, offsetBy: decimal_point_index + 2)\n    let decimal_point_index_after_2_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after_2..<num.endIndex, locale: nil)\n    if decimal_point_index_after_2_range != nil {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp2xim1jp0.swift:4:19: error: cannot find 'CharacterSet' in scope\n    let decimal = CharacterSet.decimalDigits\n                  ^~~~~~~~~~~~\n/tmp/tmp2xim1jp0.swift:5:25: error: cannot find 'CharacterSet' in scope\n    let decimal_point = CharacterSet(charactersIn: \".\")\n                        ^~~~~~~~~~~~\n/tmp/tmp2xim1jp0.swift:8:42: error: value of type 'String' has no member 'rangeOfCharacter'\n    let decimal_set_inverted_range = num.rangeOfCharacter(from: decimal_set_inverted)\n                                     ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2xim1jp0.swift:12:35: error: value of type 'String' has no member 'rangeOfCharacter'\n    let decimal_point_range = num.rangeOfCharacter(from: decimal_point)\n                              ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2xim1jp0.swift:18:47: error: value of type 'String' has no member 'range'\n    let decimal_point_index_after_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after..<num.endIndex, locale: nil)\n                                          ~~~ ^~~~~\n/tmp/tmp2xim1jp0.swift:18:72: error: cannot infer contextual base in reference to member 'literal'\n    let decimal_point_index_after_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after..<num.endIndex, locale: nil)\n                                                                      ~^~~~~~~\n/tmp/tmp2xim1jp0.swift:18:138: error: 'nil' requires a contextual type\n    let decimal_point_index_after_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after..<num.endIndex, locale: nil)\n                                                                                                                                         ^\n/tmp/tmp2xim1jp0.swift:23:49: error: value of type 'String' has no member 'range'\n    let decimal_point_index_after_2_range = num.range(of: \".\", options: .literal, range: decimal_point_index_after_2..<num.endIndex, locale: nil)\n                                            ~~~ ^~~~~\n/tmp/tmp2xim1jp0.swift:23:74: error: cannot infer con",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpzkh3yqf1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpzkh3yqf1.swift:5:55: error: cannot find 'NSRange' in scope\n    return regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count)).count > 0\n                                                      ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp0ldr9zb1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ldr9zb1.swift:5:45: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let num_regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let num_test = NSPredicate(format: \"SELF MATCHES %@\", num_regex)\n    return num_test.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnxtxpb7t.swift:5:20: error: cannot find 'NSPredicate' in scope\n    let num_test = NSPredicate(format: \"SELF MATCHES %@\", num_regex)\n                   ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    return num.range(of: regex, options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmptmcz6ayq.swift:5:16: error: value of type 'String' has no member 'range'\n    return num.range(of: regex, options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmptmcz6ayq.swift:5:43: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: regex, options: .regularExpression) != nil\n                                         ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: num.count)\n    return regex.firstMatch(in: num, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmptpn_0h6s.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptpn_0h6s.swift:6:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: num.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp0ldr9zb1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ldr9zb1.swift:5:45: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try? NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex?.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp7s2rqe4r.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try? NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7s2rqe4r.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try? NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmp7s2rqe4r.swift:5:59: error: cannot find 'NSMakeRange' in scope\n    return regex?.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                          ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpnm7v_1n1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp_dkc0gnw.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp_dkc0gnw.swift:6:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp0ldr9zb1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0ldr9zb1.swift:5:45: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, range: NSRange(location: 0, length: num.count)) != nil\n                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpvczbv67o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvczbv67o.swift:5:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmporq3thjs.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmporq3thjs.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpjekv0ql7.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpjekv0ql7.swift:4:87: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                     ~^~~~~~~~~~~~~~~\n/tmp/tmpjekv0ql7.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpgxx2r_ky.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxx2r_ky.swift:6:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpww_rz40h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpww_rz40h.swift:5:49: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, range: NSRange(location: 0, length: num.count))\n                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmplyi_wc9a.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let decimal = \"^[0-9]+(.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp7_j3ruji.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", decimal)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpxy5isruf.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxy5isruf.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmpxy5isruf.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n    return regex.matches(in: num, range: NSRange(location: 0, length: num.count)).count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpx4fexax1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\")\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpx4fexax1.swift:5:42: error: cannot find 'NSRange' in scope\n    return regex.matches(in: num, range: NSRange(location: 0, length: num.count)).count > 0\n                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmplyi_wc9a.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpo7gmyc9n.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]*\\\\.?[0-9]{0,2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpo7gmyc9n.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp5gt_w7s2.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp5gt_w7s2.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmplyi_wc9a.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmplyi_wc9a.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpiv_2dh_h.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpiv_2dh_h.swift:5:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    return num.range(of: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .regularExpression) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpvcclczk8.swift:4:16: error: value of type 'String' has no member 'range'\n    return num.range(of: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .regularExpression) != nil\n           ~~~ ^~~~~\n/tmp/tmpvcclczk8.swift:4:64: error: cannot infer contextual base in reference to member 'regularExpression'\n    return num.range(of: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .regularExpression) != nil\n                                                              ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpxy5isruf.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxy5isruf.swift:5:70: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n                                                                    ~^~~~~~~~~~~~~~~\n/tmp/tmpxy5isruf.swift:6:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpxiy9x28v.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpxiy9x28v.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: num)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp74ylqe_1.swift:5:21: error: cannot find 'NSPredicate' in scope\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n                    ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp7s7mc8c0.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp7s7mc8c0.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpkiu34wzx.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+\\\\.[0-9]{2}$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkiu34wzx.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSMakeRange(0, num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpy3yke446.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpy3yke446.swift:6:62: error: cannot find 'NSMakeRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSMakeRange(0, num.count))\n                                                             ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpmk19208f.swift:5:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpmk19208f.swift:6:62: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: num, options: [], range: NSRange(location: 0, length: num.count))\n                                                             ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpidlnd6xl.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:4:89: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: .caseInsensitive)\n                                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpidlnd6xl.swift:5:58: error: cannot find 'NSMakeRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count)) != nil\n                                                         ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_decimal(num: \"123.11\") == true)\nassert(is_decimal(num: \"e666.86\") == false)\nassert(is_decimal(num: \"3.124587\") == false)\nassert(is_decimal(num: \"1.11\") == true)\nassert(is_decimal(num: \"1.1.11\") == false)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp0j89s7ms.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+(\\\\.[0-9]{1,2})?$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0j89s7ms.swift:5:58: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: num, options: [], range: NSRange(location: 0, length: num.count)) != nil\n                                                         ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}