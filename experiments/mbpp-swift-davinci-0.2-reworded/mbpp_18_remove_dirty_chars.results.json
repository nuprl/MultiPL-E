{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "swift",
  "prompt": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dict = [Character: Bool]()\n    for char in second_string {\n        dict[char] = true\n    }\n    for char in string {\n        if dict[char] == nil {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var set = Set<Character>()\n    for char in second_string {\n        set.insert(char)\n    }\n    var result = \"\"\n    for char in string {\n        if !set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dict = [Character: Int]()\n    for char in second_string {\n        dict[char] = 1\n    }\n    for char in string {\n        if dict[char] == nil {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string.characters)\n    for char in string.characters {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpj46zofwb.swift:5:47: error: 'characters' is unavailable: Please use String directly\n    let second_string_set = Set(second_string.characters)\n                                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpj46zofwb.swift:6:24: error: 'characters' is unavailable: Please use String directly\n    for char in string.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string = string\n    for char in second_string {\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpf78z0g44.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string = string\n    for char in second_string {\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpf78z0g44.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string = string\n    for char in second_string {\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpf78z0g44.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dict = [Character: Int]()\n    for char in second_string {\n        dict[char] = 1\n    }\n    for char in string {\n        if dict[char] == nil {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    var dirty_chars = [Character](second_string)\n    for char in string {\n        if !dirty_chars.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var output = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            output.append(char)\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string = string\n    for char in second_string {\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpf78z0g44.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var first_string = string\n    for char in second_string {\n        first_string = first_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return first_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmprmbmvmxc.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        first_string = first_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var set = Set<Character>()\n    for char in second_string {\n        set.insert(char)\n    }\n    var result = \"\"\n    for char in string {\n        if !set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    \n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmp615p186p.swift:7:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var second_string_array = Array(second_string)\n    for char in string {\n        if !second_string_array.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var second_string_array = Array(second_string)\n    var string_array = Array(string)\n    for i in 0..<string_array.count {\n        if !second_string_array.contains(string_array[i]) {\n            result.append(string_array[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var second_string_set = Set<Character>()\n    for char in second_string {\n        second_string_set.insert(char)\n    }\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string_array = Array(string)\n    var second_string_array = Array(second_string)\n    var result_array = [Character]()\n    var second_string_dict = [Character: Int]()\n    for char in second_string_array {\n        if let value = second_string_dict[char] {\n            second_string_dict[char] = value + 1\n        } else {\n            second_string_dict[char] = 1\n        }\n    }\n    for char in string_array {\n        if second_string_dict[char] == nil {\n            result_array.append(char)\n        }\n    }\n    return String(result_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if second_string.contains(char) {\n            continue\n        }\n        result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        if let index = result.index(of: char) {\n            result.remove(at: index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "tmp1vjqkth6/tmp1vjqkth6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b86a787bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86a7572b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86a7572988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86a75717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1vjqkth6                        0x0000561d07ba856b <unavailable> + 5483\n5    libc.so.6                          0x00002b86a7a67460 __libc_start_main + 245\n6    tmp1vjqkth6                        0x0000561d07ba8179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var string = string\n    for char in second_string {\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpf78z0g44.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        string = string.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: \"\\(char)\", with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "/tmp/tmpakwqbntg.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: \"\\(char)\", with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = string\n    for char in second_string {\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpiuyem5h_.swift:6:37: error: value of type 'String' has no member 'replacingOccurrences'\n        clean_string = clean_string.replacingOccurrences(of: String(char), with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    var dict = [Character: Int]()\n    for char in second_string {\n        dict[char] = 1\n    }\n    for char in string {\n        if dict[char] == nil {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var new_string = string\n    for char in second_string {\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return new_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmp8st513ia.swift:6:33: error: value of type 'String' has no member 'replacingOccurrences'\n        new_string = new_string.replacingOccurrences(of: String(char), with: \"\")\n                     ~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var clean_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            clean_string.append(char)\n        }\n    }\n    return clean_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
      "timestamp": 1665517674,
      "stdout": "",
      "stderr": "/tmp/tmpbp2o83c_.swift:6:25: error: value of type 'String' has no member 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}