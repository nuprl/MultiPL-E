{
  "name": "mbpp_172_count_occurance",
  "language": "swift",
  "prompt": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let arr = s.components(separatedBy: \" \")\n    var count = 0\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpbvcuhu2i.swift:4:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index2 = s.index(s.startIndex, offsetBy: i+1)\n            if s[index2] == \"t\" {\n                let index3 = s.index(s.startIndex, offsetBy: i+2)\n                if s[index3] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ace8ac2fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ace8a926561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ace8a926286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ace8a92613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ace8a925bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ace8aa59ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002ace8aa12660 String.subscript.getter + 34\n7    tmpzmif79tl                        0x000055cfc56a092e <unavailable> + 6446\n8    tmpzmif79tl                        0x000055cfc56a063b <unavailable> + 5691\n9    libc.so.6                          0x00002ace8ae1b460 __libc_start_main + 245\n10   tmpzmif79tl                        0x000055cfc56a0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var index = s.startIndex\n    while index != s.endIndex {\n        if s[index] == \"s\" {\n            if s[index.advancedBy(1)] == \"t\" {\n                if s[index.advancedBy(2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmlvfhqo0.swift:8:24: error: value of type 'String.Index' has no member 'advancedBy'\n            if s[index.advancedBy(1)] == \"t\" {\n                 ~~~~~ ^~~~~~~~~~\n/tmp/tmpmlvfhqo0.swift:9:28: error: value of type 'String.Index' has no member 'advancedBy'\n                if s[index.advancedBy(2)] == \"d\" {\n                     ~~~~~ ^~~~~~~~~~\n/tmp/tmpmlvfhqo0.swift:14:23: error: value of type 'String.Index' has no member 'advancedBy'\n        index = index.advancedBy(1)\n                ~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.characters.count {\n        if s[s.index(s.startIndex, offsetBy: i)] == \"s\" {\n            if s[s.index(s.startIndex, offsetBy: i+1)] == \"t\" {\n                if s[s.index(s.startIndex, offsetBy: i+2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpphpo5xtg.swift:6:17: error: 'characters' is unavailable: Please use String directly\n    while i < s.characters.count {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b850cf1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b850cc14561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b850cc14286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b850cc1413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b850cc13bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b850cd47b0d <unavailable> + 2693901\n6    tmp4s8gtqkv                        0x00005646e0db1b94 <unavailable> + 7060\n7    tmp4s8gtqkv                        0x00005646e0db1626 <unavailable> + 5670\n8    libc.so.6                          0x00002b850d109460 __libc_start_main + 245\n9    tmp4s8gtqkv                        0x00005646e0db1329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpnpz7cc4_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index1 = s.index(s.startIndex, offsetBy: i+1)\n            let index2 = s.index(s.startIndex, offsetBy: i+2)\n            if s[index1] == \"t\" && s[index2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5fa9609c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5fa9300561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5fa9300286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5fa930013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5fa92ffbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5fa9433b0d <unavailable> + 2693901\n6    tmp_1ucj8qw                        0x000056490465cc3b <unavailable> + 7227\n7    tmp_1ucj8qw                        0x000056490465c7cb <unavailable> + 6091\n8    libc.so.6                          0x00002b5fa97f5460 __libc_start_main + 245\n9    tmp_1ucj8qw                        0x000056490465c2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if i + 3 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                    i += 2\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp5iiiyhb3.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5iiiyhb3.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5iiiyhb3.swift:9:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e5d714c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e5d40b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5e5d40b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5e5d40b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5e5d40abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5e5d53eb0d <unavailable> + 2693901\n6    tmpox2l1rk4                        0x000055c1a8e08b94 <unavailable> + 7060\n7    tmpox2l1rk4                        0x000055c1a8e08626 <unavailable> + 5670\n8    libc.so.6                          0x00002b5e5d900460 __libc_start_main + 245\n9    tmpox2l1rk4                        0x000055c1a8e08329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var start = s.startIndex\n    var end = s.endIndex\n    while start < end {\n        let range = start..<end\n        if let r = s.range(of: \"std\", options: .caseInsensitive, range: range, locale: nil) {\n            count += 1\n            start = r.upperBound\n        } else {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp_zxwq96m.swift:9:22: error: value of type 'String' has no member 'range'\n        if let r = s.range(of: \"std\", options: .caseInsensitive, range: range, locale: nil) {\n                   ~ ^~~~~\n/tmp/tmp_zxwq96m.swift:9:49: error: cannot infer contextual base in reference to member 'caseInsensitive'\n        if let r = s.range(of: \"std\", options: .caseInsensitive, range: range, locale: nil) {\n                                               ~^~~~~~~~~~~~~~~\n/tmp/tmp_zxwq96m.swift:9:88: error: 'nil' requires a contextual type\n        if let r = s.range(of: \"std\", options: .caseInsensitive, range: range, locale: nil) {\n                                                                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count-2 {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpj13wnz2g.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj13wnz2g.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj13wnz2g.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0edaff0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0edace7561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0edace7286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0edace713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0edace6bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b0edae1ab0d <unavailable> + 2693901\n6    tmpscd7vt50                        0x000055f2e307dba4 <unavailable> + 7076\n7    tmpscd7vt50                        0x000055f2e307d626 <unavailable> + 5670\n8    libc.so.6                          0x00002b0edb1dc460 __libc_start_main + 245\n9    tmpscd7vt50                        0x000055f2e307d329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpenrhuarx.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpenrhuarx.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpenrhuarx.swift:6:46: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                                             ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            if i + 2 < s.count {\n                let index1 = s.index(s.startIndex, offsetBy: i + 1)\n                let index2 = s.index(s.startIndex, offsetBy: i + 2)\n                if s[index1] == \"t\" && s[index2] == \"d\" {\n                    count += 1\n                    i += 2\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let str = s.lowercased()\n    let arr = str.components(separatedBy: \" \")\n    var count = 0\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp6l85qbpn.swift:5:19: error: value of type 'String' has no member 'components'\n    let arr = str.components(separatedBy: \" \")\n              ~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            if s[s.index(after: index)] == \"t\" {\n                if s[s.index(s.index(after: index), offsetBy: 1)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b42f9382c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b42f9079561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b42f9079286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b42f907913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b42f9078bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b42f91acec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b42f9165660 String.subscript.getter + 34\n7    tmp292oryg9                        0x000055eb38a8993d <unavailable> + 6461\n8    tmp292oryg9                        0x000055eb38a8969b <unavailable> + 5787\n9    libc.so.6                          0x00002b42f956e460 __libc_start_main + 245\n10   tmp292oryg9                        0x000055eb38a891a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e5d714c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e5d40b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5e5d40b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5e5d40b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5e5d40abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5e5d53eb0d <unavailable> + 2693901\n6    tmpox2l1rk4                        0x000055c1a8e08b94 <unavailable> + 7060\n7    tmpox2l1rk4                        0x000055c1a8e08626 <unavailable> + 5670\n8    libc.so.6                          0x00002b5e5d900460 __libc_start_main + 245\n9    tmpox2l1rk4                        0x000055c1a8e08329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpnpz7cc4_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let count = s.components(separatedBy: \"std\").count - 1\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpn22l7ns0.swift:4:19: error: value of type 'String' has no member 'components'\n    let count = s.components(separatedBy: \"std\").count - 1\n                ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpnpz7cc4_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnpz7cc4_.swift:8:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count - 2 {\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp9ynq35_y.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ynq35_y.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ynq35_y.swift:6:46: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                                             ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4306a6ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4306761561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b4306761286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b430676113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b4306760bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b4306894b0d <unavailable> + 2693901\n6    tmpjzfiqjb3                        0x000055581d3b79ca <unavailable> + 6602\n7    tmpjzfiqjb3                        0x000055581d3b7536 <unavailable> + 5430\n8    libc.so.6                          0x00002b4306c56460 __libc_start_main + 245\n9    tmpjzfiqjb3                        0x000055581d3b7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count - 2 {\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp9ynq35_y.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ynq35_y.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                          ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ynq35_y.swift:6:46: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i + 1] == \"t\" && s[i + 2] == \"d\" {\n                                             ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpn5_0k_rm.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn5_0k_rm.swift:7:33: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp6ar2p8l0.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6ar2p8l0.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6ar2p8l0.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp6ar2p8l0.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6ar2p8l0.swift:8:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6ar2p8l0.swift:9:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var startIndex = s.startIndex\n    while startIndex < s.endIndex {\n        let range = s.rangeOfString(\"std\", range: startIndex..<s.endIndex)\n        if let range = range {\n            count += 1\n            startIndex = range.endIndex\n        } else {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpwtcycphl.swift:7:23: error: value of type 'String' has no member 'rangeOfString'\n        let range = s.rangeOfString(\"std\", range: startIndex..<s.endIndex)\n                    ~ ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let words = s.components(separatedBy: \" \")\n    for word in words {\n        if word == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp4gm46im6.swift:5:19: error: value of type 'String' has no member 'components'\n    let words = s.components(separatedBy: \" \")\n                ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let arr = s.components(separatedBy: \" \")\n    for i in arr {\n        if i == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp2g307pn_.swift:5:17: error: value of type 'String' has no member 'components'\n    let arr = s.components(separatedBy: \" \")\n              ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n        if s[range] == \"std\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2bde015c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2bddd0c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b2bddd0c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b2bddd0c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b2bddd0bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b2bdde3fb0d <unavailable> + 2693901\n6    tmps6sx2oyh                        0x0000564aa0e719ca <unavailable> + 6602\n7    tmps6sx2oyh                        0x0000564aa0e71536 <unavailable> + 5430\n8    libc.so.6                          0x00002b2bde201460 __libc_start_main + 245\n9    tmps6sx2oyh                        0x0000564aa0e71239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            if s[s.startIndex.advancedBy(count+1)] == \"t\" {\n                if s[s.startIndex.advancedBy(count+2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpvfs2b8l8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvfs2b8l8.swift:7:31: error: value of type 'String.Index' has no member 'advancedBy'\n            if s[s.startIndex.advancedBy(count+1)] == \"t\" {\n                 ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpvfs2b8l8.swift:8:35: error: value of type 'String.Index' has no member 'advancedBy'\n                if s[s.startIndex.advancedBy(count+2)] == \"d\" {\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 2)\n        if s[start...end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b472ccbbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b472c9b2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b472c9b2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b472c9b213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b472c9b1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpaihj1tko                        0x00005630404bcba4 <unavailable> + 7076\n6    tmpaihj1tko                        0x00005630404bc9aa <unavailable> + 6570\n7    libc.so.6                          0x00002b472cea7460 __libc_start_main + 245\n8    tmpaihj1tko                        0x00005630404bc409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i+1)\n        let index3 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index] == \"s\" && s[index2] == \"t\" && s[index3] == \"d\" {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a670fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a66df5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9a66df5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9a66df513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9a66df4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b9a66f28b0d <unavailable> + 2693901\n6    tmpyccm8ndy                        0x00005603150358f2 <unavailable> + 6386\n7    tmpyccm8ndy                        0x0000560315035446 <unavailable> + 5190\n8    libc.so.6                          0x00002b9a672ea460 __libc_start_main + 245\n9    tmpyccm8ndy                        0x0000560315035149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        if s[s.index(s.startIndex, offsetBy: i)] == \"s\" {\n            if s[s.index(s.startIndex, offsetBy: i + 1)] == \"t\" {\n                if s[s.index(s.startIndex, offsetBy: i + 2)] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adda1e86c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adda1b7d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adda1b7d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adda1b7d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adda1b7cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002adda1cb0ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002adda1c69660 String.subscript.getter + 34\n7    tmpf4eypt7c                        0x0000559796d488f0 <unavailable> + 6384\n8    tmpf4eypt7c                        0x0000559796d4863b <unavailable> + 5691\n9    libc.so.6                          0x00002adda2072460 __libc_start_main + 245\n10   tmpf4eypt7c                        0x0000559796d48149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s {\n        if c == \"s\" {\n            if let next = s.index(of: \"t\") {\n                if let next2 = s.index(of: \"d\") {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "tmp6hcdwrcb/tmp6hcdwrcb.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af342617c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af34230eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af34230e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af34230d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6hcdwrcb                        0x000055d8d72815db <unavailable> + 5595\n5    libc.so.6                          0x00002af342803460 __libc_start_main + 245\n6    tmp6hcdwrcb                        0x000055d8d72811b9 <unavailable> + 4537\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        if s[start..<end] == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e5d714c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e5d40b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5e5d40b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5e5d40b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5e5d40abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b5e5d53eb0d <unavailable> + 2693901\n6    tmpox2l1rk4                        0x000055c1a8e08b94 <unavailable> + 7060\n7    tmpox2l1rk4                        0x000055c1a8e08626 <unavailable> + 5670\n8    libc.so.6                          0x00002b5e5d900460 __libc_start_main + 245\n9    tmpox2l1rk4                        0x000055c1a8e08329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    let words = s.split(separator: \" \")\n    for word in words {\n        if word == \"std\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "tmp7stqcijj/tmp7stqcijj.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5fdf53ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5fdf235b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5fdf235988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5fdf2347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7stqcijj                        0x0000559b97a4d724 <unavailable> + 5924\n5    libc.so.6                          0x00002b5fdf72a460 __libc_start_main + 245\n6    tmp7stqcijj                        0x0000559b97a4d3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpmtv0quu9.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmtv0quu9.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i+1)\n        let index3 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index] == \"s\" && s[index2] == \"t\" && s[index3] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "Swift/StringCharacterView.swift:153: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aadb5858c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aadb554f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aadb554f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aadb554f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aadb554ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002aadb5682b0d <unavailable> + 2693901\n6    tmpt_ajquow                        0x000055595d3bfbb0 <unavailable> + 7088\n7    tmpt_ajquow                        0x000055595d3bf5d6 <unavailable> + 5590\n8    libc.so.6                          0x00002aadb5a44460 __libc_start_main + 245\n9    tmpt_ajquow                        0x000055595d3bf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if i+2 < s.count {\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmpb236t5t1.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb236t5t1.swift:8:37: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && i+2 < s.count && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp5f117zft.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && i+2 < s.count && s[i+1] == \"t\" && s[i+2] == \"d\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5f117zft.swift:6:44: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && i+2 < s.count && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5f117zft.swift:6:61: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" && i+2 < s.count && s[i+1] == \"t\" && s[i+2] == \"d\" {\n                                                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if c == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmp68u9ngc8.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" {\n            if s[i+1] == \"t\" {\n                if s[i+2] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpyt0z5h9b.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if s[i] == \"s\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if s[i+1] == \"t\" {\n               ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyt0z5h9b.swift:8:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if s[i+2] == \"d\" {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    let str = s.lowercased()\n    let count = str.components(separatedBy: \"std\").count - 1\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "/tmp/tmp86o6v2t8.swift:5:21: error: value of type 'String' has no member 'components'\n    let count = str.components(separatedBy: \"std\").count - 1\n                ~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    var i = 0\n    while i < s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        if s[index] == \"s\" {\n            let index2 = s.index(s.startIndex, offsetBy: i+1)\n            if s[index2] == \"t\" {\n                let index3 = s.index(s.startIndex, offsetBy: i+2)\n                if s[index3] == \"d\" {\n                    count += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ace8ac2fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ace8a926561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ace8a926286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ace8a92613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ace8a925bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002ace8aa59ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002ace8aa12660 String.subscript.getter + 34\n7    tmpzmif79tl                        0x000055cfc56a092e <unavailable> + 6446\n8    tmpzmif79tl                        0x000055cfc56a063b <unavailable> + 5691\n9    libc.so.6                          0x00002ace8ae1b460 __libc_start_main + 245\n10   tmpzmif79tl                        0x000055cfc56a0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    return s.components(separatedBy: \"std\").count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmpv7ownyri.swift:4:14: error: value of type 'String' has no member 'components'\n    return s.components(separatedBy: \"std\").count - 1\n           ~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s: String) -> Int {\n    var count = 0\n    for i in s.characters {\n        if i == \"s\" {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_occurance(s: \"letstdlenstdporstd\") == 3)\nassert(count_occurance(s: \"truststdsolensporsd\") == 1)\nassert(count_occurance(s: \"makestdsostdworthit\") == 2)\nassert(count_occurance(s: \"stds\") == 1)\nassert(count_occurance(s: \"\") == 0)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "/tmp/tmppp8qx59n.swift:5:16: error: 'characters' is unavailable: Please use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}