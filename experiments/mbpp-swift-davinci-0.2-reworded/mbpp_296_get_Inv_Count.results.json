{
  "name": "mbpp_296_get_Inv_Count",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        while j < arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "tmptk06xiwx/tmptk06xiwx.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52ca88bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52ca582b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52ca582988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52ca5817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptk06xiwx                        0x000055a4664ec3c2 <unavailable> + 5058\n5    libc.so.6                          0x00002b52caa77460 __libc_start_main + 245\n6    tmptk06xiwx                        0x000055a4664ec019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversion_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversion_count += 1\n            }\n        }\n    }\n    return inversion_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversionCount = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversionCount += 1\n            }\n        }\n    }\n    return inversionCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var invCount = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                invCount += 1\n            }\n        }\n    }\n    return invCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "tmpnhg1ub3j/tmpnhg1ub3j.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3157b17c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b315780eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b315780e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b315780d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnhg1ub3j                        0x00005566ae287552 <unavailable> + 5458\n5    libc.so.6                          0x00002b3157d03460 __libc_start_main + 245\n6    tmpnhg1ub3j                        0x00005566ae2871a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inversions = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1666124004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var inv_count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                inv_count += 1\n            }\n        }\n    }\n    return inv_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to count inversions in an array.\nfunc get_Inv_Count(arr: [Int]) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] > arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)\nassert(get_Inv_Count(arr: [1, 2, 1]) == 1)\nassert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)",
      "timestamp": 1665510588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}