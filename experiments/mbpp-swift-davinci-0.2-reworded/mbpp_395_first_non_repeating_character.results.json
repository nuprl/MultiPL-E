{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var charCount = [Character: Int]()\n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    for (char, count) in charCount {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp6iuxlcgh/tmp6iuxlcgh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c7097cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c70673b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5c70673988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5c706727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6iuxlcgh                        0x00005555829119aa <unavailable> + 6570\n5    libc.so.6                          0x00002b5c70b68460 __libc_start_main + 245\n6    tmp6iuxlcgh                        0x0000555582911329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for character in str1 {\n        if let count = dict[character] {\n            dict[character] = count + 1\n        } else {\n            dict[character] = 1\n        }\n    }\n    for character in str1 {\n        if dict[character] == 1 {\n            return String(character)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = char_count[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [String: Int]()\n    for char in str1 {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return key\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp54j97ixu/tmp54j97ixu.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4871322c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4871019b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4871019988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48710187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp54j97ixu                        0x000055a0b5e7e9aa <unavailable> + 6570\n5    libc.so.6                          0x00002b487150e460 __libc_start_main + 245\n6    tmp54j97ixu                        0x000055a0b5e7e329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let val = dict[char] {\n            dict[char] = val + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    \n    var dict = [Character: Int]()\n    \n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict: [Character: Int] = [:]\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    \n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    \n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for char in str1 {\n        if char_count[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp420t_k6c/tmp420t_k6c.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b809a51cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b809a213b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b809a213988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b809a2127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp420t_k6c                        0x0000556a720809fa <unavailable> + 6650\n5    libc.so.6                          0x00002b809a708460 __libc_start_main + 245\n6    tmp420t_k6c                        0x0000556a72080379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for char in str1 {\n        if char_count[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [String: Int]()\n    for char in str1 {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[String(char)], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    var result: String?\n    \n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for (key, value) in dict {\n        if value == 1 {\n            result = String(key)\n            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmpr6_d7rak/tmpr6_d7rak.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7954201c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7953ef8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7953ef8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7953ef77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr6_d7rak                        0x0000564c3a10c9aa <unavailable> + 6570\n5    libc.so.6                          0x00002b79543ed460 __libc_start_main + 245\n6    tmpr6_d7rak                        0x0000564c3a10c329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [String: Int]()\n    for char in str1 {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[String(char)], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var charCount = [Character: Int]()\n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = charCount[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1\n    var charDict = [Character: Int]()\n    for char in str {\n        if let count = charDict[char] {\n            charDict[char] = count + 1\n        } else {\n            charDict[char] = 1\n        }\n    }\n    for char in str {\n        if let count = charDict[char] {\n            if count == 1 {\n                return String(char)\n            }\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1.lowercased()\n    var count = 0\n    var index = 0\n    var char: Character?\n    for i in str {\n        count = str.count\n        index = str.firstIndex(of: i)!\n        str.remove(at: index)\n        if str.count == count - 1 {\n            char = i\n            break\n        }\n        str = str1.lowercased()\n    }\n    return String(char ?? \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "/tmp/tmphmdkiu3g.swift:10:38: error: cannot assign value of type 'String.Index' to type 'Int'\n        index = str.firstIndex(of: i)!\n                ~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmphmdkiu3g.swift:11:24: error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n        str.remove(at: index)\n                       ^\n/tmp/tmphmdkiu3g.swift:18:27: error: cannot convert value of type 'String' to expected argument type 'Character'\n    return String(char ?? \"\")\n                          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    for char in str1 {\n        if str1.filter({$0 == char}).count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict: [Character: Int] = [:]\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character:Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if let count = dict[c], count == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for char in str1 {\n        if char_count[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if dict[char] == nil {\n            dict[char] = 1\n        } else {\n            dict[char]! += 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var result: String?\n    var charCount = [Character: Int]()\n    \n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if let count = charCount[char], count == 1 {\n            result = String(char)\n            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var result: String? = nil\n    var charCount = [Character: Int]()\n    \n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    \n    for (char, count) in charCount {\n        if count == 1 {\n            result = String(char)\n            break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "tmpz8mnrm4k/tmpz8mnrm4k.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af0defb6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af0decadb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af0decad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af0decac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz8mnrm4k                        0x0000558017b079aa <unavailable> + 6570\n5    libc.so.6                          0x00002af0df1a2460 __libc_start_main + 245\n6    tmpz8mnrm4k                        0x0000558017b07329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [String: Int]()\n    for char in str1 {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[String(char)] {\n            if count == 1 {\n                return String(char)\n            }\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if dict[c] == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        dict[c] = (dict[c] ?? 0) + 1\n    }\n    for c in str1 {\n        if dict[c] == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var charCount = [Character: Int]()\n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = charCount[char] {\n            if count == 1 {\n                return String(char)\n            }\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_dict = [Character: Int]()\n    for char in str1 {\n        if let count = char_dict[char] {\n            char_dict[char] = count + 1\n        } else {\n            char_dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = char_dict[char] {\n            if count == 1 {\n                return String(char)\n            }\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str2 = str1.lowercased()\n    for i in 0..<str2.count {\n        let index = str2.index(str2.startIndex, offsetBy: i)\n        let char = str2[index]\n        if str2.filter({$0 == char}).count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let str = str1.lowercased()\n    for (index, char) in str.enumerated() {\n        if str.firstIndex(of: char) == str.lastIndex(of: char) {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        char_count[char] = (char_count[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if char_count[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "tmp082sb5i7/tmp082sb5i7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba789df7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba789aeeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba789aee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba789aed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp082sb5i7                        0x000055d315a429aa <unavailable> + 6570\n5    libc.so.6                          0x00002ba789fe3460 __libc_start_main + 245\n6    tmp082sb5i7                        0x000055d315a42329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1.lowercased()\n    var dict = [String: Int]()\n    for char in str {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for char in str {\n        if let count = dict[String(char)], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123312,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}