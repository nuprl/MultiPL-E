{
  "name": "mbpp_748_capital_words_spaces",
  "language": "swift",
  "prompt": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result",
    "    var str2 = \"\"\n    var previous_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if previous_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            previous_char_is_capital = true\n        } else {\n            str2.append(char)\n            previous_char_is_capital = false\n        }\n    }\n    return str2",
    "    var str = str1\n    var result = \"\"\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            result.append(str[i])\n            i += 1\n        } else if str[i] >= \"A\" && str[i] <= \"Z\" {\n            result.append(\" \")\n            result.append(str[i])\n            i += 1\n        } else {\n            result.append(str[i])\n            i += 1\n        }\n    }\n    return result",
    "    var str = str1\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            str.insert(\" \", at: str.startIndex)\n            i += 1\n        }\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str",
    "    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \")\n                result.append(char)\n            }\n            last_char_is_capital = true\n        } else {\n            result.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return result",
    "    var str2 = \"\"\n    var prev = \"\"\n    for char in str1 {\n        if char.isUppercase && prev != \" \" {\n            str2 += \" \"\n        }\n        str2 += String(char)\n        prev = String(char)\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2",
    "    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n    return str1",
    "    var result = \"\"\n    for (index, char) in str1.characters.enumerated() {\n        if index > 0 && char.isUppercase && str1[str1.index(str1.startIndex, offsetBy: index - 1)].isLowercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result",
    "    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char == \" \" && char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3",
    "    var str = \"\"\n    var prev = \"\"\n    for char in str1 {\n        if char.isUppercase && prev != \" \" {\n            str += \" \"\n        }\n        str += String(char)\n        prev = String(char)\n    }\n    return str",
    "    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" {\n            str3 += \"\\(char)\"\n        } else if char.isUppercase {\n            str3 += \"\\(char)\"\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3",
    "    var str = \"\"\n    for (index, char) in str1.enumerated() {\n        if index != 0 && char.isUppercase {\n            str += \" \"\n        }\n        str += String(char)\n    }\n    return str",
    "    var str = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str",
    "    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(c)\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for (i, char) in str1.enumerated() {\n        if i == 0 {\n            str2.append(char)\n        } else {\n            if str1[i-1] == \" \" && char.isUppercase {\n                str2.append(\" \")\n            }\n            str2.append(char)\n        }\n    }\n    return str2"
  ]
}