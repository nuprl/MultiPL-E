{
  "name": "mbpp_565_split",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to split a string into characters.\nfunc split(word: String) -> [String] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split(word: \"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\nassert(split(word: \"Name\") == [\"N\", \"a\", \"m\", \"e\"])\nassert(split(word: \"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return word.characters.map { String($0) }",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    return word.characters.map { String($0) }",
    "    return word.characters.map { String($0) }",
    "    return word.characters.map { String($0) }",
    "    return word.characters.map { String($0) }",
    "    return word.characters.map { String($0) }",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    var result = [String]()\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    return word.characters.map { String($0) }",
    "    var characters: [String] = []\n    for character in word {\n        characters.append(String(character))\n    }\n    return characters",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    return word.characters.map { String($0) }",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    var characters: [String] = []\n    for character in word {\n        characters.append(String(character))\n    }\n    return characters",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    var result: [String] = []\n    for char in word {\n        result.append(String(char))\n    }\n    return result",
    "    return word.characters.map { String($0) }",
    "    return word.characters.map { String($0) }",
    "    var result: [String] = []\n    for c in word {\n        result.append(String(c))\n    }\n    return result"
  ]
}