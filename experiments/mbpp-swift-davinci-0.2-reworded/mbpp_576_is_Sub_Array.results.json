{
  "name": "mbpp_576_is_Sub_Array",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var flag = false\n    while i < A.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = 0\n            j += 1\n        }\n    }\n    if i == A.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        }\n        else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpl5xmq89x/tmpl5xmq89x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89de0e5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89ddddcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89ddddc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89ddddb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl5xmq89x                        0x000055dad49ef622 <unavailable> + 5666\n5    libc.so.6                          0x00002b89de2d1460 __libc_start_main + 245\n6    tmpl5xmq89x                        0x000055dad49ef019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var flag = false\n    while i < A.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let n = A.count\n    let m = B.count\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == m {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count {\n        if A[i] == B[j] {\n            flag = true\n            j += 1\n        } else {\n            flag = false\n            j = 0\n        }\n        if j == B.count {\n            return true\n        }\n        i += 1\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmphp9k80kk/tmphp9k80kk.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b29c1c3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b29c1932b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b29c1932988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29c19317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphp9k80kk                        0x0000557e7d890622 <unavailable> + 5666\n5    libc.so.6                          0x00002b29c1e27460 __libc_start_main + 245\n6    tmphp9k80kk                        0x0000557e7d890019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            isSubArray = true\n            for j in 0..<B.count {\n                if A[i+j] != B[j] {\n                    isSubArray = false\n                    break\n                }\n            }\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b000ed82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b000ea79561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b000ea79286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b000ea7913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b000ea78bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b000e879e83 <unavailable> + 188035\n6    tmp8g4jzsen                        0x000055fa0029caf6 <unavailable> + 6902\n7    tmp8g4jzsen                        0x000055fa0029c602 <unavailable> + 5634\n8    libc.so.6                          0x00002b000ef6e460 __libc_start_main + 245\n9    tmp8g4jzsen                        0x000055fa0029c1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var j = 0\n    for i in 0..<A.count {\n        if A[i] == B[j] {\n            j += 1\n            if j == B.count {\n                isSubArray = true\n                break\n            }\n        } else {\n            j = 0\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    \n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    \n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpu00pon0w/tmpu00pon0w.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0177bcac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b01778c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b01778c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b01778c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu00pon0w                        0x00005614c90b8622 <unavailable> + 5666\n5    libc.so.6                          0x00002b0177db6460 __libc_start_main + 245\n6    tmpu00pon0w                        0x00005614c90b8019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        }\n        else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmp5kd93fbb/tmp5kd93fbb.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9731040c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9730d37b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9730d37988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9730d367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5kd93fbb                        0x00005557cbb6b622 <unavailable> + 5666\n5    libc.so.6                          0x00002b973122c460 __libc_start_main + 245\n6    tmp5kd93fbb                        0x00005557cbb6b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var isSubArray = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count > B.count {\n        return false\n    }\n    for i in 0...(B.count - A.count) {\n        var j = 0\n        while j < A.count && A[j] == B[i + j] {\n            j += 1\n        }\n        if j == A.count {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var isSubArray = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            isSubArray = true\n        } else {\n            i += 1\n            j = 0\n            isSubArray = false\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpleg5uqgl/tmpleg5uqgl.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b944a715c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b944a40cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b944a40c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b944a40b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpleg5uqgl                        0x0000565102fa4622 <unavailable> + 5666\n5    libc.so.6                          0x00002b944a901460 __libc_start_main + 245\n6    tmpleg5uqgl                        0x0000565102fa4019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = 1\n        } else {\n            i += 1\n            j = 0\n            flag = 0\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmp6jjgg945/tmp6jjgg945.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdc91f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdc8ee8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdc8ee8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdc8ee77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6jjgg945                        0x00005561ec753622 <unavailable> + 5666\n5    libc.so.6                          0x00002acdc93dd460 __libc_start_main + 245\n6    tmp6jjgg945                        0x00005561ec753019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        }\n        else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpp27swkfk/tmpp27swkfk.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fffa1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fff711b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fff711988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fff7107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp27swkfk                        0x000056301c7fa622 <unavailable> + 5666\n5    libc.so.6                          0x00002b7fffc06460 __libc_start_main + 245\n6    tmpp27swkfk                        0x000056301c7fa019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var flag = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            k = i\n            for j in 0..<B.count {\n                if A[k] == B[j] {\n                    k += 1\n                    flag = true\n                } else {\n                    flag = false\n                    break\n                }\n            }\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9cc6e68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9cc6b5f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9cc6b5f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9cc6b5f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9cc6b5ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9cc695fe83 <unavailable> + 188035\n6    tmpzngdqxd9                        0x000055a9b702db32 <unavailable> + 6962\n7    tmpzngdqxd9                        0x000055a9b702d602 <unavailable> + 5634\n8    libc.so.6                          0x00002b9cc7054460 __libc_start_main + 245\n9    tmpzngdqxd9                        0x000055a9b702d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        }\n        else {\n            i = i - k + 1\n            j = 0\n            k = 0\n            flag = false\n        }\n        k += 1\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124061,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var flag = false\n    for i in 0..<A.count {\n        if A[i] == B[0] {\n            for j in 0..<B.count {\n                if A[i+j] == B[j] {\n                    flag = true\n                }\n                else {\n                    flag = false\n                    break\n                }\n            }\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d3f45cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d3f153561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9d3f153286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9d3f15313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9d3f152bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9d3ef53e83 <unavailable> + 188035\n6    tmpyk4gp2xo                        0x0000557c8945eaf2 <unavailable> + 6898\n7    tmpyk4gp2xo                        0x0000557c8945e602 <unavailable> + 5634\n8    libc.so.6                          0x00002b9d3f648460 __libc_start_main + 245\n9    tmpyk4gp2xo                        0x0000557c8945e1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0, j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    let n = A.count\n    let m = B.count\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == m {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    let m = A.count\n    let n = B.count\n    var i = 0\n    var j = 0\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == n {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpoteu4g15/tmpoteu4g15.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fdf93bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9fdf632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9fdf632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9fdf6317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoteu4g15                        0x0000557397dfd622 <unavailable> + 5666\n5    libc.so.6                          0x00002b9fdfb27460 __libc_start_main + 245\n6    tmpoteu4g15                        0x0000557397dfd019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    for i in 0..<A.count {\n        for j in 0..<B.count {\n            if A[i] == B[j] {\n                isSubArray = true\n            }\n        }\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpva21u7dw/tmpva21u7dw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac281a62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac281759b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac281759988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2817587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpva21u7dw                        0x000056459038057e <unavailable> + 5502\n5    libc.so.6                          0x00002ac281c4e460 __libc_start_main + 245\n6    tmpva21u7dw                        0x00005645903801a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        } else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmpmery8dbf/tmpmery8dbf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac068571c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac068268b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac068268988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac0682677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmery8dbf                        0x00005610d728b622 <unavailable> + 5666\n5    libc.so.6                          0x00002ac06875d460 __libc_start_main + 245\n6    tmpmery8dbf                        0x00005610d728b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        }\n        else {\n            i += 1\n            j = 0\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "tmpl5xmq89x/tmpl5xmq89x.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89de0e5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89ddddcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89ddddc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89ddddb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl5xmq89x                        0x000055dad49ef622 <unavailable> + 5666\n5    libc.so.6                          0x00002b89de2d1460 __libc_start_main + 245\n6    tmpl5xmq89x                        0x000055dad49ef019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        flag = true\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var isSubArray = false\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        isSubArray = true\n    }\n    return isSubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        }\n        else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    return j == B.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n            flag = true\n        }\n        else {\n            i += 1\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "tmp5kd93fbb/tmp5kd93fbb.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9731040c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9730d37b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9730d37988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9730d367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5kd93fbb                        0x00005557cbb6b622 <unavailable> + 5666\n5    libc.so.6                          0x00002b973122c460 __libc_start_main + 245\n6    tmp5kd93fbb                        0x00005557cbb6b019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var is_SubArray = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        is_SubArray = true\n    }\n    return is_SubArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n    }\n    if j == B.count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = i - j + 1\n            j = 0\n        }\n        if j == B.count {\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag = false\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n            j = 0\n        }\n        if j == B.count {\n            flag = true\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to check whether an array is subarray of another or not.\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n    if A.count > B.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < A.count && j < B.count {\n        if A[i] == B[j] {\n            i += 1\n            j += 1\n        } else {\n            i = 0\n            j += 1\n        }\n    }\n    if i == A.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)\nassert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)\nassert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}