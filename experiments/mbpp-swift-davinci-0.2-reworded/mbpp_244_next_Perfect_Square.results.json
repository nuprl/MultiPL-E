{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = N\n    while true {\n        if i*i > N {\n            return i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmp3e0y5_7_/tmp3e0y5_7_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b803f753c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b803f44ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b803f44a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b803f4497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3e0y5_7_                        0x000055706fb7d1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b803f93f460 __libc_start_main + 245\n6    tmp3e0y5_7_                        0x000055706fb7ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let square = i * i\n        if square > N {\n            return square\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i*i > N {\n            return i*i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 0\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmphtgbil2e/tmphtgbil2e.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b46928bfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b46925b6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b46925b6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b46925b57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphtgbil2e                        0x000055f9ed4672b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b4692aab460 __libc_start_main + 245\n6    tmphtgbil2e                        0x000055f9ed466e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i <= N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i*i < N) {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmpmvofd63s/tmpmvofd63s.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7353d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7350ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af7350cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af7350cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvofd63s                        0x000055be8c99a2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002af7355c1460 __libc_start_main + 245\n6    tmpmvofd63s                        0x000055be8c999e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmp0zskog3d/tmp0zskog3d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9da73fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9da70f5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9da70f5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9da70f47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0zskog3d                        0x000055707e0c21b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9da75ea460 __libc_start_main + 245\n6    tmp0zskog3d                        0x000055707e0c1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var x = 1\n    while x * x <= N {\n        x += 1\n    }\n    return x * x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i <= N) {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        let sq = i * i\n        if sq > N {\n            return sq\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    while n % 2 == 0 {\n        n /= 2\n    }\n    while n % 3 == 0 {\n        n /= 3\n    }\n    var i = 5\n    while i * i <= n {\n        while n % i == 0 {\n            n /= i\n        }\n        i += 2\n    }\n    if n > 1 {\n        return n\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmp4kzlqpl2/tmp4kzlqpl2.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeea8f64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeea8c5bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeea8c5b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeea8c5a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4kzlqpl2                        0x00005557d2248245 <unavailable> + 4677\n5    libc.so.6                          0x00002aeea9150460 __libc_start_main + 245\n6    tmp4kzlqpl2                        0x00005557d2247ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var num = N\n    while true {\n        if is_Perfect_Square(num) {\n            return num\n        }\n        num += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "/tmp/tmpmo2ov0ur.swift:6:12: error: cannot find 'is_Perfect_Square' in scope\n        if is_Perfect_Square(num) {\n           ^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while(true) {\n        if(i*i > N) {\n            return i*i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i <= N) {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i*i <= N) {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i*i <= N) {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i: Int = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmpvn_fyc1i/tmpvn_fyc1i.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfbbb03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfbb7fab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adfbb7fa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adfbb7f97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvn_fyc1i                        0x000055ac3ad0e2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002adfbbcef460 __libc_start_main + 245\n6    tmpvn_fyc1i                        0x000055ac3ad0de69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var n = N\n    var i = 1\n    while n > 0 {\n        n -= i\n        i += 2\n    }\n    return i - 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmpwh85blny/tmpwh85blny.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c8e4bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c8e1b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c8e1b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c8e1b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwh85blny                        0x000055675e9411b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3c8e6a7460 __libc_start_main + 245\n6    tmpwh85blny                        0x000055675e940e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i) <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmp0zskog3d/tmp0zskog3d.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9da73fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9da70f5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9da70f5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9da70f47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0zskog3d                        0x000055707e0c21b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9da75ea460 __libc_start_main + 245\n6    tmp0zskog3d                        0x000055707e0c1e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = N\n    while true {\n        if i % 2 == 0 {\n            if (i / 2) % 2 == 0 {\n                return i\n            }\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmpizqo65r2/tmpizqo65r2.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d55f5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d55c52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d55c52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d55c517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpizqo65r2                        0x000055ca55ab12c0 <unavailable> + 4800\n5    libc.so.6                          0x00002b6d56147460 __libc_start_main + 245\n6    tmpizqo65r2                        0x000055ca55ab0ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while true {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i < N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "tmp5f1x4jut/tmp5f1x4jut.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b700f670c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b700f367b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b700f367988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b700f3667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5f1x4jut                        0x000055d9f943c2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b700f85c460 __libc_start_main + 245\n6    tmp5f1x4jut                        0x000055d9f943be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    var num = 0\n    while num < N {\n        num = i * i\n        i += 1\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmpyo_2kcos/tmpyo_2kcos.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aae8f3edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aae8f0e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aae8f0e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aae8f0e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyo_2kcos                        0x0000562e03f412b3 <unavailable> + 4787\n5    libc.so.6                          0x00002aae8f5d9460 __libc_start_main + 245\n6    tmpyo_2kcos                        0x0000562e03f40e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i <= N) {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i < N {\n        if i * i > N {\n            return i * i\n        }\n        i += 1\n    }\n    return N\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i*i <= N {\n        i += 1\n    }\n    return i*i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i < N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "tmp8umz_b5j/tmp8umz_b5j.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba29ee80c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba29eb77b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba29eb77988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba29eb767b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8umz_b5j                        0x0000563c7e0b02b3 <unavailable> + 4787\n5    libc.so.6                          0x00002ba29f06c460 __libc_start_main + 245\n6    tmp8umz_b5j                        0x0000563c7e0afe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while i * i <= N {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1665510024,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N: Int) -> Int {\n    var i = 1\n    while (i * i <= N) {\n        i += 1\n    }\n    return i * i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(next_Perfect_Square(N: 35) == 36)\nassert(next_Perfect_Square(N: 6) == 9)\nassert(next_Perfect_Square(N: 9) == 16)",
      "timestamp": 1666122777,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}